package grammar

// Code generated by peg query.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleTypeSpec
	ruleFilter
	ruleMetrics
	ruleIdentifier
	ruleIdentifierList
	ruleLiteralStringList
	ruleIDStartCharacter
	ruleIDCharacter
	ruleIDQuotedCharacter
	ruleLiteralString
	ruleMETRICS
	ruleNAME
	ruleREGEX
	ruleRESOURCE
	ruleWHERE_HEALTH
	ruleWHERE_STATE
	ruleWHERE_STATUS
	ruleQuote
	ruleComma
	ruleBackTick
	ruleDot
	ruleLP
	ruleRP
	rule_
	ruleLiteralChar
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	rulePegText
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"TypeSpec",
	"Filter",
	"Metrics",
	"Identifier",
	"IdentifierList",
	"LiteralStringList",
	"IDStartCharacter",
	"IDCharacter",
	"IDQuotedCharacter",
	"LiteralString",
	"METRICS",
	"NAME",
	"REGEX",
	"RESOURCE",
	"WHERE_HEALTH",
	"WHERE_STATE",
	"WHERE_STATUS",
	"Quote",
	"Comma",
	"BackTick",
	"Dot",
	"LP",
	"RP",
	"_",
	"LiteralChar",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"PegText",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type QueryParser struct {
	Query RawQuery

	currentList []string
	currentText string

	Buffer string
	buffer []rune
	rules  [47]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *QueryParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *QueryParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *QueryParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *QueryParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *QueryParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *QueryParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *QueryParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.currentList = make([]string, 0)
		case ruleAction1:
			p.Query.ResourceKinds = p.currentList
		case ruleAction2:
			p.currentList = make([]string, 0)
		case ruleAction3:
			p.Query.Name = p.currentList
		case ruleAction4:
			p.currentList = make([]string, 0)
		case ruleAction5:
			p.Query.Regex = p.currentList
		case ruleAction6:
			p.currentList = make([]string, 0)
		case ruleAction7:
			p.Query.Health = p.currentList
		case ruleAction8:
			p.currentList = make([]string, 0)
		case ruleAction9:
			p.Query.Status = p.currentList
		case ruleAction10:
			p.currentList = make([]string, 0)
		case ruleAction11:
			p.Query.State = p.currentList
		case ruleAction12:
			p.currentList = make([]string, 0)
		case ruleAction13:
			p.Query.Metrics = p.currentList
		case ruleAction14:
			p.currentList = append(p.currentList, text)
		case ruleAction15:
			p.currentList = append(p.currentList, text)
		case ruleAction16:
			p.currentList = append(p.currentList, p.currentText)
		case ruleAction17:
			p.currentList = append(p.currentList, p.currentText)
		case ruleAction18:
			p.currentText = text

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *QueryParser) Init(options ...func(*QueryParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(TypeSpec (Dot Filter)+ Dot Metrics !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleTypeSpec]() {
					goto l0
				}
				if !_rules[ruleDot]() {
					goto l0
				}
				if !_rules[ruleFilter]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleDot]() {
						goto l3
					}
					if !_rules[ruleFilter]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if !_rules[ruleDot]() {
					goto l0
				}
				if !_rules[ruleMetrics]() {
					goto l0
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l0
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 TypeSpec <- <(RESOURCE Action0 LP IdentifierList RP Action1)> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				if !_rules[ruleRESOURCE]() {
					goto l5
				}
				if !_rules[ruleAction0]() {
					goto l5
				}
				if !_rules[ruleLP]() {
					goto l5
				}
				if !_rules[ruleIdentifierList]() {
					goto l5
				}
				if !_rules[ruleRP]() {
					goto l5
				}
				if !_rules[ruleAction1]() {
					goto l5
				}
				add(ruleTypeSpec, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 2 Filter <- <((NAME Action2 LP LiteralStringList RP Action3) / (REGEX Action4 LP LiteralStringList RP Action5) / (WHERE_HEALTH Action6 LP IdentifierList RP Action7) / (WHERE_STATUS Action8 LP IdentifierList RP Action9) / (WHERE_STATE Action10 LP IdentifierList RP Action11))> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[ruleNAME]() {
						goto l10
					}
					if !_rules[ruleAction2]() {
						goto l10
					}
					if !_rules[ruleLP]() {
						goto l10
					}
					if !_rules[ruleLiteralStringList]() {
						goto l10
					}
					if !_rules[ruleRP]() {
						goto l10
					}
					if !_rules[ruleAction3]() {
						goto l10
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleREGEX]() {
						goto l11
					}
					if !_rules[ruleAction4]() {
						goto l11
					}
					if !_rules[ruleLP]() {
						goto l11
					}
					if !_rules[ruleLiteralStringList]() {
						goto l11
					}
					if !_rules[ruleRP]() {
						goto l11
					}
					if !_rules[ruleAction5]() {
						goto l11
					}
					goto l9
				l11:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleWHERE_HEALTH]() {
						goto l12
					}
					if !_rules[ruleAction6]() {
						goto l12
					}
					if !_rules[ruleLP]() {
						goto l12
					}
					if !_rules[ruleIdentifierList]() {
						goto l12
					}
					if !_rules[ruleRP]() {
						goto l12
					}
					if !_rules[ruleAction7]() {
						goto l12
					}
					goto l9
				l12:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleWHERE_STATUS]() {
						goto l13
					}
					if !_rules[ruleAction8]() {
						goto l13
					}
					if !_rules[ruleLP]() {
						goto l13
					}
					if !_rules[ruleIdentifierList]() {
						goto l13
					}
					if !_rules[ruleRP]() {
						goto l13
					}
					if !_rules[ruleAction9]() {
						goto l13
					}
					goto l9
				l13:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleWHERE_STATE]() {
						goto l7
					}
					if !_rules[ruleAction10]() {
						goto l7
					}
					if !_rules[ruleLP]() {
						goto l7
					}
					if !_rules[ruleIdentifierList]() {
						goto l7
					}
					if !_rules[ruleRP]() {
						goto l7
					}
					if !_rules[ruleAction11]() {
						goto l7
					}
				}
			l9:
				add(ruleFilter, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 3 Metrics <- <(METRICS Action12 LP IdentifierList RP Action13)> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				if !_rules[ruleMETRICS]() {
					goto l14
				}
				if !_rules[ruleAction12]() {
					goto l14
				}
				if !_rules[ruleLP]() {
					goto l14
				}
				if !_rules[ruleIdentifierList]() {
					goto l14
				}
				if !_rules[ruleRP]() {
					goto l14
				}
				if !_rules[ruleAction13]() {
					goto l14
				}
				add(ruleMetrics, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 4 Identifier <- <((IDStartCharacter IDCharacter*) / (BackTick <IDQuotedCharacter+> BackTick))> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				{
					position18, tokenIndex18 := position, tokenIndex
					if !_rules[ruleIDStartCharacter]() {
						goto l19
					}
				l20:
					{
						position21, tokenIndex21 := position, tokenIndex
						if !_rules[ruleIDCharacter]() {
							goto l21
						}
						goto l20
					l21:
						position, tokenIndex = position21, tokenIndex21
					}
					goto l18
				l19:
					position, tokenIndex = position18, tokenIndex18
					if !_rules[ruleBackTick]() {
						goto l16
					}
					{
						position22 := position
						if !_rules[ruleIDQuotedCharacter]() {
							goto l16
						}
					l23:
						{
							position24, tokenIndex24 := position, tokenIndex
							if !_rules[ruleIDQuotedCharacter]() {
								goto l24
							}
							goto l23
						l24:
							position, tokenIndex = position24, tokenIndex24
						}
						add(rulePegText, position22)
					}
					if !_rules[ruleBackTick]() {
						goto l16
					}
				}
			l18:
				add(ruleIdentifier, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 5 IdentifierList <- <(<Identifier> Action14 (Comma <Identifier> Action15)*)> */
		func() bool {
			position25, tokenIndex25 := position, tokenIndex
			{
				position26 := position
				{
					position27 := position
					if !_rules[ruleIdentifier]() {
						goto l25
					}
					add(rulePegText, position27)
				}
				if !_rules[ruleAction14]() {
					goto l25
				}
			l28:
				{
					position29, tokenIndex29 := position, tokenIndex
					if !_rules[ruleComma]() {
						goto l29
					}
					{
						position30 := position
						if !_rules[ruleIdentifier]() {
							goto l29
						}
						add(rulePegText, position30)
					}
					if !_rules[ruleAction15]() {
						goto l29
					}
					goto l28
				l29:
					position, tokenIndex = position29, tokenIndex29
				}
				add(ruleIdentifierList, position26)
			}
			return true
		l25:
			position, tokenIndex = position25, tokenIndex25
			return false
		},
		/* 6 LiteralStringList <- <(<LiteralString> Action16 (Comma <LiteralString> Action17)*)> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				{
					position33 := position
					if !_rules[ruleLiteralString]() {
						goto l31
					}
					add(rulePegText, position33)
				}
				if !_rules[ruleAction16]() {
					goto l31
				}
			l34:
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[ruleComma]() {
						goto l35
					}
					{
						position36 := position
						if !_rules[ruleLiteralString]() {
							goto l35
						}
						add(rulePegText, position36)
					}
					if !_rules[ruleAction17]() {
						goto l35
					}
					goto l34
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
				add(ruleLiteralStringList, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 7 IDStartCharacter <- <([A-Z] / [a-z] / '_')> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l40
					}
					position++
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l41
					}
					position++
					goto l39
				l41:
					position, tokenIndex = position39, tokenIndex39
					if buffer[position] != rune('_') {
						goto l37
					}
					position++
				}
			l39:
				add(ruleIDStartCharacter, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 8 IDCharacter <- <([A-Z] / [a-z] / [0-9] / '_' / ':' / '|' / '.' / '-')> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				{
					position44, tokenIndex44 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l45
					}
					position++
					goto l44
				l45:
					position, tokenIndex = position44, tokenIndex44
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l46
					}
					position++
					goto l44
				l46:
					position, tokenIndex = position44, tokenIndex44
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l47
					}
					position++
					goto l44
				l47:
					position, tokenIndex = position44, tokenIndex44
					if buffer[position] != rune('_') {
						goto l48
					}
					position++
					goto l44
				l48:
					position, tokenIndex = position44, tokenIndex44
					if buffer[position] != rune(':') {
						goto l49
					}
					position++
					goto l44
				l49:
					position, tokenIndex = position44, tokenIndex44
					if buffer[position] != rune('|') {
						goto l50
					}
					position++
					goto l44
				l50:
					position, tokenIndex = position44, tokenIndex44
					if buffer[position] != rune('.') {
						goto l51
					}
					position++
					goto l44
				l51:
					position, tokenIndex = position44, tokenIndex44
					if buffer[position] != rune('-') {
						goto l42
					}
					position++
				}
			l44:
				add(ruleIDCharacter, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 9 IDQuotedCharacter <- <([A-Z] / [a-z] / [0-9] / '_' / ':' / '|' / '.' / '-' / ' ' / ',' / '$')> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				{
					position54, tokenIndex54 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l55
					}
					position++
					goto l54
				l55:
					position, tokenIndex = position54, tokenIndex54
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l56
					}
					position++
					goto l54
				l56:
					position, tokenIndex = position54, tokenIndex54
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l57
					}
					position++
					goto l54
				l57:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('_') {
						goto l58
					}
					position++
					goto l54
				l58:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune(':') {
						goto l59
					}
					position++
					goto l54
				l59:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('|') {
						goto l60
					}
					position++
					goto l54
				l60:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('.') {
						goto l61
					}
					position++
					goto l54
				l61:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('-') {
						goto l62
					}
					position++
					goto l54
				l62:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune(' ') {
						goto l63
					}
					position++
					goto l54
				l63:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune(',') {
						goto l64
					}
					position++
					goto l54
				l64:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('$') {
						goto l52
					}
					position++
				}
			l54:
				add(ruleIDQuotedCharacter, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 10 LiteralString <- <(Quote <LiteralChar*> Action18 Quote)> */
		func() bool {
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				if !_rules[ruleQuote]() {
					goto l65
				}
				{
					position67 := position
				l68:
					{
						position69, tokenIndex69 := position, tokenIndex
						if !_rules[ruleLiteralChar]() {
							goto l69
						}
						goto l68
					l69:
						position, tokenIndex = position69, tokenIndex69
					}
					add(rulePegText, position67)
				}
				if !_rules[ruleAction18]() {
					goto l65
				}
				if !_rules[ruleQuote]() {
					goto l65
				}
				add(ruleLiteralString, position66)
			}
			return true
		l65:
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 11 METRICS <- <(('m' / 'M') ('e' / 'E') ('t' / 'T') ('r' / 'R') ('i' / 'I') ('c' / 'C'))> */
		func() bool {
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l73
					}
					position++
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					if buffer[position] != rune('M') {
						goto l70
					}
					position++
				}
			l72:
				{
					position74, tokenIndex74 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l75
					}
					position++
					goto l74
				l75:
					position, tokenIndex = position74, tokenIndex74
					if buffer[position] != rune('E') {
						goto l70
					}
					position++
				}
			l74:
				{
					position76, tokenIndex76 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l77
					}
					position++
					goto l76
				l77:
					position, tokenIndex = position76, tokenIndex76
					if buffer[position] != rune('T') {
						goto l70
					}
					position++
				}
			l76:
				{
					position78, tokenIndex78 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l79
					}
					position++
					goto l78
				l79:
					position, tokenIndex = position78, tokenIndex78
					if buffer[position] != rune('R') {
						goto l70
					}
					position++
				}
			l78:
				{
					position80, tokenIndex80 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l81
					}
					position++
					goto l80
				l81:
					position, tokenIndex = position80, tokenIndex80
					if buffer[position] != rune('I') {
						goto l70
					}
					position++
				}
			l80:
				{
					position82, tokenIndex82 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l83
					}
					position++
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					if buffer[position] != rune('C') {
						goto l70
					}
					position++
				}
			l82:
				add(ruleMETRICS, position71)
			}
			return true
		l70:
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 12 NAME <- <(('n' / 'N') ('a' / 'A') ('m' / 'M') ('e' / 'E'))> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				{
					position86, tokenIndex86 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l87
					}
					position++
					goto l86
				l87:
					position, tokenIndex = position86, tokenIndex86
					if buffer[position] != rune('N') {
						goto l84
					}
					position++
				}
			l86:
				{
					position88, tokenIndex88 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l89
					}
					position++
					goto l88
				l89:
					position, tokenIndex = position88, tokenIndex88
					if buffer[position] != rune('A') {
						goto l84
					}
					position++
				}
			l88:
				{
					position90, tokenIndex90 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l91
					}
					position++
					goto l90
				l91:
					position, tokenIndex = position90, tokenIndex90
					if buffer[position] != rune('M') {
						goto l84
					}
					position++
				}
			l90:
				{
					position92, tokenIndex92 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l93
					}
					position++
					goto l92
				l93:
					position, tokenIndex = position92, tokenIndex92
					if buffer[position] != rune('E') {
						goto l84
					}
					position++
				}
			l92:
				add(ruleNAME, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 13 REGEX <- <(('r' / 'R') ('e' / 'E') ('g' / 'G') ('e' / 'E') ('x' / 'X'))> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				{
					position96, tokenIndex96 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l97
					}
					position++
					goto l96
				l97:
					position, tokenIndex = position96, tokenIndex96
					if buffer[position] != rune('R') {
						goto l94
					}
					position++
				}
			l96:
				{
					position98, tokenIndex98 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l99
					}
					position++
					goto l98
				l99:
					position, tokenIndex = position98, tokenIndex98
					if buffer[position] != rune('E') {
						goto l94
					}
					position++
				}
			l98:
				{
					position100, tokenIndex100 := position, tokenIndex
					if buffer[position] != rune('g') {
						goto l101
					}
					position++
					goto l100
				l101:
					position, tokenIndex = position100, tokenIndex100
					if buffer[position] != rune('G') {
						goto l94
					}
					position++
				}
			l100:
				{
					position102, tokenIndex102 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l103
					}
					position++
					goto l102
				l103:
					position, tokenIndex = position102, tokenIndex102
					if buffer[position] != rune('E') {
						goto l94
					}
					position++
				}
			l102:
				{
					position104, tokenIndex104 := position, tokenIndex
					if buffer[position] != rune('x') {
						goto l105
					}
					position++
					goto l104
				l105:
					position, tokenIndex = position104, tokenIndex104
					if buffer[position] != rune('X') {
						goto l94
					}
					position++
				}
			l104:
				add(ruleREGEX, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 14 RESOURCE <- <(('r' / 'R') ('e' / 'E') ('s' / 'S') ('o' / 'O') ('u' / 'U') ('r' / 'R') ('c' / 'C') ('e' / 'E'))> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				{
					position108, tokenIndex108 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l109
					}
					position++
					goto l108
				l109:
					position, tokenIndex = position108, tokenIndex108
					if buffer[position] != rune('R') {
						goto l106
					}
					position++
				}
			l108:
				{
					position110, tokenIndex110 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l111
					}
					position++
					goto l110
				l111:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('E') {
						goto l106
					}
					position++
				}
			l110:
				{
					position112, tokenIndex112 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l113
					}
					position++
					goto l112
				l113:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('S') {
						goto l106
					}
					position++
				}
			l112:
				{
					position114, tokenIndex114 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l115
					}
					position++
					goto l114
				l115:
					position, tokenIndex = position114, tokenIndex114
					if buffer[position] != rune('O') {
						goto l106
					}
					position++
				}
			l114:
				{
					position116, tokenIndex116 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l117
					}
					position++
					goto l116
				l117:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune('U') {
						goto l106
					}
					position++
				}
			l116:
				{
					position118, tokenIndex118 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l119
					}
					position++
					goto l118
				l119:
					position, tokenIndex = position118, tokenIndex118
					if buffer[position] != rune('R') {
						goto l106
					}
					position++
				}
			l118:
				{
					position120, tokenIndex120 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l121
					}
					position++
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('C') {
						goto l106
					}
					position++
				}
			l120:
				{
					position122, tokenIndex122 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l123
					}
					position++
					goto l122
				l123:
					position, tokenIndex = position122, tokenIndex122
					if buffer[position] != rune('E') {
						goto l106
					}
					position++
				}
			l122:
				add(ruleRESOURCE, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 15 WHERE_HEALTH <- <(('w' / 'W') ('h' / 'H') ('e' / 'E') ('r' / 'R') ('e' / 'E') ('h' / 'H') ('e' / 'E') ('a' / 'A') ('l' / 'L') ('t' / 'T') ('h' / 'H'))> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				{
					position126, tokenIndex126 := position, tokenIndex
					if buffer[position] != rune('w') {
						goto l127
					}
					position++
					goto l126
				l127:
					position, tokenIndex = position126, tokenIndex126
					if buffer[position] != rune('W') {
						goto l124
					}
					position++
				}
			l126:
				{
					position128, tokenIndex128 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l129
					}
					position++
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					if buffer[position] != rune('H') {
						goto l124
					}
					position++
				}
			l128:
				{
					position130, tokenIndex130 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l131
					}
					position++
					goto l130
				l131:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune('E') {
						goto l124
					}
					position++
				}
			l130:
				{
					position132, tokenIndex132 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l133
					}
					position++
					goto l132
				l133:
					position, tokenIndex = position132, tokenIndex132
					if buffer[position] != rune('R') {
						goto l124
					}
					position++
				}
			l132:
				{
					position134, tokenIndex134 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l135
					}
					position++
					goto l134
				l135:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('E') {
						goto l124
					}
					position++
				}
			l134:
				{
					position136, tokenIndex136 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l137
					}
					position++
					goto l136
				l137:
					position, tokenIndex = position136, tokenIndex136
					if buffer[position] != rune('H') {
						goto l124
					}
					position++
				}
			l136:
				{
					position138, tokenIndex138 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l139
					}
					position++
					goto l138
				l139:
					position, tokenIndex = position138, tokenIndex138
					if buffer[position] != rune('E') {
						goto l124
					}
					position++
				}
			l138:
				{
					position140, tokenIndex140 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l141
					}
					position++
					goto l140
				l141:
					position, tokenIndex = position140, tokenIndex140
					if buffer[position] != rune('A') {
						goto l124
					}
					position++
				}
			l140:
				{
					position142, tokenIndex142 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l143
					}
					position++
					goto l142
				l143:
					position, tokenIndex = position142, tokenIndex142
					if buffer[position] != rune('L') {
						goto l124
					}
					position++
				}
			l142:
				{
					position144, tokenIndex144 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l145
					}
					position++
					goto l144
				l145:
					position, tokenIndex = position144, tokenIndex144
					if buffer[position] != rune('T') {
						goto l124
					}
					position++
				}
			l144:
				{
					position146, tokenIndex146 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l147
					}
					position++
					goto l146
				l147:
					position, tokenIndex = position146, tokenIndex146
					if buffer[position] != rune('H') {
						goto l124
					}
					position++
				}
			l146:
				add(ruleWHERE_HEALTH, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 16 WHERE_STATE <- <(('w' / 'W') ('h' / 'H') ('e' / 'E') ('r' / 'R') ('e' / 'E') ('s' / 'S') ('t' / 'T') ('a' / 'A') ('t' / 'T') ('e' / 'E'))> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				{
					position150, tokenIndex150 := position, tokenIndex
					if buffer[position] != rune('w') {
						goto l151
					}
					position++
					goto l150
				l151:
					position, tokenIndex = position150, tokenIndex150
					if buffer[position] != rune('W') {
						goto l148
					}
					position++
				}
			l150:
				{
					position152, tokenIndex152 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l153
					}
					position++
					goto l152
				l153:
					position, tokenIndex = position152, tokenIndex152
					if buffer[position] != rune('H') {
						goto l148
					}
					position++
				}
			l152:
				{
					position154, tokenIndex154 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l155
					}
					position++
					goto l154
				l155:
					position, tokenIndex = position154, tokenIndex154
					if buffer[position] != rune('E') {
						goto l148
					}
					position++
				}
			l154:
				{
					position156, tokenIndex156 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l157
					}
					position++
					goto l156
				l157:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('R') {
						goto l148
					}
					position++
				}
			l156:
				{
					position158, tokenIndex158 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l159
					}
					position++
					goto l158
				l159:
					position, tokenIndex = position158, tokenIndex158
					if buffer[position] != rune('E') {
						goto l148
					}
					position++
				}
			l158:
				{
					position160, tokenIndex160 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l161
					}
					position++
					goto l160
				l161:
					position, tokenIndex = position160, tokenIndex160
					if buffer[position] != rune('S') {
						goto l148
					}
					position++
				}
			l160:
				{
					position162, tokenIndex162 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l163
					}
					position++
					goto l162
				l163:
					position, tokenIndex = position162, tokenIndex162
					if buffer[position] != rune('T') {
						goto l148
					}
					position++
				}
			l162:
				{
					position164, tokenIndex164 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l165
					}
					position++
					goto l164
				l165:
					position, tokenIndex = position164, tokenIndex164
					if buffer[position] != rune('A') {
						goto l148
					}
					position++
				}
			l164:
				{
					position166, tokenIndex166 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l167
					}
					position++
					goto l166
				l167:
					position, tokenIndex = position166, tokenIndex166
					if buffer[position] != rune('T') {
						goto l148
					}
					position++
				}
			l166:
				{
					position168, tokenIndex168 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l169
					}
					position++
					goto l168
				l169:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('E') {
						goto l148
					}
					position++
				}
			l168:
				add(ruleWHERE_STATE, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 17 WHERE_STATUS <- <(('w' / 'W') ('h' / 'H') ('e' / 'E') ('r' / 'R') ('e' / 'E') ('s' / 'S') ('t' / 'T') ('a' / 'A') ('t' / 'T') ('u' / 'U') ('s' / 'S'))> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				{
					position172, tokenIndex172 := position, tokenIndex
					if buffer[position] != rune('w') {
						goto l173
					}
					position++
					goto l172
				l173:
					position, tokenIndex = position172, tokenIndex172
					if buffer[position] != rune('W') {
						goto l170
					}
					position++
				}
			l172:
				{
					position174, tokenIndex174 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l175
					}
					position++
					goto l174
				l175:
					position, tokenIndex = position174, tokenIndex174
					if buffer[position] != rune('H') {
						goto l170
					}
					position++
				}
			l174:
				{
					position176, tokenIndex176 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l177
					}
					position++
					goto l176
				l177:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('E') {
						goto l170
					}
					position++
				}
			l176:
				{
					position178, tokenIndex178 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l179
					}
					position++
					goto l178
				l179:
					position, tokenIndex = position178, tokenIndex178
					if buffer[position] != rune('R') {
						goto l170
					}
					position++
				}
			l178:
				{
					position180, tokenIndex180 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l181
					}
					position++
					goto l180
				l181:
					position, tokenIndex = position180, tokenIndex180
					if buffer[position] != rune('E') {
						goto l170
					}
					position++
				}
			l180:
				{
					position182, tokenIndex182 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l183
					}
					position++
					goto l182
				l183:
					position, tokenIndex = position182, tokenIndex182
					if buffer[position] != rune('S') {
						goto l170
					}
					position++
				}
			l182:
				{
					position184, tokenIndex184 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l185
					}
					position++
					goto l184
				l185:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('T') {
						goto l170
					}
					position++
				}
			l184:
				{
					position186, tokenIndex186 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l187
					}
					position++
					goto l186
				l187:
					position, tokenIndex = position186, tokenIndex186
					if buffer[position] != rune('A') {
						goto l170
					}
					position++
				}
			l186:
				{
					position188, tokenIndex188 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l189
					}
					position++
					goto l188
				l189:
					position, tokenIndex = position188, tokenIndex188
					if buffer[position] != rune('T') {
						goto l170
					}
					position++
				}
			l188:
				{
					position190, tokenIndex190 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l191
					}
					position++
					goto l190
				l191:
					position, tokenIndex = position190, tokenIndex190
					if buffer[position] != rune('U') {
						goto l170
					}
					position++
				}
			l190:
				{
					position192, tokenIndex192 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l193
					}
					position++
					goto l192
				l193:
					position, tokenIndex = position192, tokenIndex192
					if buffer[position] != rune('S') {
						goto l170
					}
					position++
				}
			l192:
				add(ruleWHERE_STATUS, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 18 Quote <- <'"'> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				if buffer[position] != rune('"') {
					goto l194
				}
				position++
				add(ruleQuote, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 19 Comma <- <(_ ',' _)> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				if !_rules[rule_]() {
					goto l196
				}
				if buffer[position] != rune(',') {
					goto l196
				}
				position++
				if !_rules[rule_]() {
					goto l196
				}
				add(ruleComma, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 20 BackTick <- <'`'> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				if buffer[position] != rune('`') {
					goto l198
				}
				position++
				add(ruleBackTick, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 21 Dot <- <(_ '.' _)> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				if !_rules[rule_]() {
					goto l200
				}
				if buffer[position] != rune('.') {
					goto l200
				}
				position++
				if !_rules[rule_]() {
					goto l200
				}
				add(ruleDot, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 22 LP <- <(_ '(' _)> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				if !_rules[rule_]() {
					goto l202
				}
				if buffer[position] != rune('(') {
					goto l202
				}
				position++
				if !_rules[rule_]() {
					goto l202
				}
				add(ruleLP, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 23 RP <- <(_ ')' _)> */
		func() bool {
			position204, tokenIndex204 := position, tokenIndex
			{
				position205 := position
				if !_rules[rule_]() {
					goto l204
				}
				if buffer[position] != rune(')') {
					goto l204
				}
				position++
				if !_rules[rule_]() {
					goto l204
				}
				add(ruleRP, position205)
			}
			return true
		l204:
			position, tokenIndex = position204, tokenIndex204
			return false
		},
		/* 24 _ <- <(' ' / '\t' / '\n' / '\r')*> */
		func() bool {
			{
				position207 := position
			l208:
				{
					position209, tokenIndex209 := position, tokenIndex
					{
						position210, tokenIndex210 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l211
						}
						position++
						goto l210
					l211:
						position, tokenIndex = position210, tokenIndex210
						if buffer[position] != rune('\t') {
							goto l212
						}
						position++
						goto l210
					l212:
						position, tokenIndex = position210, tokenIndex210
						if buffer[position] != rune('\n') {
							goto l213
						}
						position++
						goto l210
					l213:
						position, tokenIndex = position210, tokenIndex210
						if buffer[position] != rune('\r') {
							goto l209
						}
						position++
					}
				l210:
					goto l208
				l209:
					position, tokenIndex = position209, tokenIndex209
				}
				add(rule_, position207)
			}
			return true
		},
		/* 25 LiteralChar <- <(!('"' / '^' / '\n') .)> */
		func() bool {
			position214, tokenIndex214 := position, tokenIndex
			{
				position215 := position
				{
					position216, tokenIndex216 := position, tokenIndex
					{
						position217, tokenIndex217 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l218
						}
						position++
						goto l217
					l218:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('^') {
							goto l219
						}
						position++
						goto l217
					l219:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('\n') {
							goto l216
						}
						position++
					}
				l217:
					goto l214
				l216:
					position, tokenIndex = position216, tokenIndex216
				}
				if !matchDot() {
					goto l214
				}
				add(ruleLiteralChar, position215)
			}
			return true
		l214:
			position, tokenIndex = position214, tokenIndex214
			return false
		},
		/* 27 Action0 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 28 Action1 <- <{ p.Query.ResourceKinds = p.currentList }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 29 Action2 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 30 Action3 <- <{ p.Query.Name = p.currentList }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 31 Action4 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 32 Action5 <- <{ p.Query.Regex = p.currentList }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 33 Action6 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 34 Action7 <- <{ p.Query.Health = p.currentList }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 35 Action8 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 36 Action9 <- <{ p.Query.Status = p.currentList }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 37 Action10 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 38 Action11 <- <{ p.Query.State = p.currentList }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 39 Action12 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 40 Action13 <- <{ p.Query.Metrics = p.currentList}> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		nil,
		/* 42 Action14 <- <{ p.currentList = append(p.currentList, text)}> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 43 Action15 <- <{ p.currentList = append(p.currentList, text)}> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 44 Action16 <- <{ p.currentList = append(p.currentList, p.currentText )}> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 45 Action17 <- <{ p.currentList = append(p.currentList, p.currentText) }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 46 Action18 <- <{ p.currentText = text }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
