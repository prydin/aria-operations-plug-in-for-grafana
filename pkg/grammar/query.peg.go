package grammar

// Code generated by peg pkg/grammar/query.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleTypeSpec
	ruleFilter
	ruleConditions
	ruleTerm
	ruleConjunctive
	ruleFunction
	ruleUnaryFunction
	ruleUnaryFunctionName
	ruleBinaryFunctionName
	ruleOperator
	ruleBinaryFunction
	ruleInfixExpression
	ruleLiteralConditionValue
	ruleMetrics
	ruleAggregation
	ruleIdentifier
	ruleIdentifierList
	ruleLiteralStringList
	ruleIDStartCharacter
	ruleIDCharacter
	ruleIDQuotedCharacter
	ruleLiteralString
	ruleMETRICS
	ruleNAME
	ruleREGEX
	ruleRESOURCE
	ruleWHERE_HEALTH
	ruleWHERE_STATE
	ruleWHERE_STATUS
	ruleWHERE_METRICS
	ruleWHERE_PROPERTIES
	ruleAND
	ruleOR
	ruleIN
	ruleNOT_IN
	ruleCONTAINS
	ruleSTARTS_WITH
	ruleENDS_WITH
	ruleNOT_STARTS_WITH
	ruleNOT_ENDS_WITH
	ruleNOT_CONTAINS
	ruleNOT_REGEX
	ruleEXISTS
	ruleNOT_EXISTS
	ruleGT
	ruleLT
	ruleGTE
	ruleLTE
	ruleEQ
	ruleNE
	ruleAVG
	ruleMIN
	ruleMAX
	ruleCOUNT
	ruleSUM
	ruleSTDDEV
	ruleVARIANCE
	ruleMEDIAN
	rulePERCENTILE
	ruleQuote
	ruleComma
	ruleBackTick
	ruleDot
	ruleLP
	ruleRP
	rule_
	ruleLiteralChar
	ruleFloat
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"TypeSpec",
	"Filter",
	"Conditions",
	"Term",
	"Conjunctive",
	"Function",
	"UnaryFunction",
	"UnaryFunctionName",
	"BinaryFunctionName",
	"Operator",
	"BinaryFunction",
	"InfixExpression",
	"LiteralConditionValue",
	"Metrics",
	"Aggregation",
	"Identifier",
	"IdentifierList",
	"LiteralStringList",
	"IDStartCharacter",
	"IDCharacter",
	"IDQuotedCharacter",
	"LiteralString",
	"METRICS",
	"NAME",
	"REGEX",
	"RESOURCE",
	"WHERE_HEALTH",
	"WHERE_STATE",
	"WHERE_STATUS",
	"WHERE_METRICS",
	"WHERE_PROPERTIES",
	"AND",
	"OR",
	"IN",
	"NOT_IN",
	"CONTAINS",
	"STARTS_WITH",
	"ENDS_WITH",
	"NOT_STARTS_WITH",
	"NOT_ENDS_WITH",
	"NOT_CONTAINS",
	"NOT_REGEX",
	"EXISTS",
	"NOT_EXISTS",
	"GT",
	"LT",
	"GTE",
	"LTE",
	"EQ",
	"NE",
	"AVG",
	"MIN",
	"MAX",
	"COUNT",
	"SUM",
	"STDDEV",
	"VARIANCE",
	"MEDIAN",
	"PERCENTILE",
	"Quote",
	"Comma",
	"BackTick",
	"Dot",
	"LP",
	"RP",
	"_",
	"LiteralChar",
	"Float",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type QueryParser struct {
	Query RawQuery

	currentText        string
	currentList        []string
	currentCondition   Condition
	currentConditions  []Condition
	currentConjunctive string
	currentFloat       float64

	Buffer string
	buffer []rune
	rules  [113]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *QueryParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *QueryParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *QueryParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *QueryParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *QueryParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *QueryParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *QueryParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.currentList = make([]string, 0)
		case ruleAction1:
			p.Query.ResourceKinds = p.currentList
		case ruleAction2:
			p.currentList = make([]string, 0)
		case ruleAction3:
			p.Query.Name = p.currentList
		case ruleAction4:
			p.currentList = make([]string, 0)
		case ruleAction5:
			p.Query.Regex = p.currentList
		case ruleAction6:
			p.currentList = make([]string, 0)
		case ruleAction7:
			p.Query.Health = p.currentList
		case ruleAction8:
			p.currentList = make([]string, 0)
		case ruleAction9:
			p.Query.Status = p.currentList
		case ruleAction10:
			p.currentList = make([]string, 0)
		case ruleAction11:
			p.Query.State = p.currentList
		case ruleAction12:
			p.currentConditions = make([]Condition, 0)
		case ruleAction13:
			p.Query.MetricConditions = p.currentConditions
		case ruleAction14:
			p.currentConditions = make([]Condition, 0)
		case ruleAction15:
			p.Query.PropertyConditions = p.currentConditions
		case ruleAction16:
			p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(""))
		case ruleAction17:
			p.currentConjunctive = strings.ToUpper(text)
		case ruleAction18:
			p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(p.currentConjunctive))
		case ruleAction19:
			p.currentCondition.Operator = text
		case ruleAction20:
			p.currentCondition.Key = text
		case ruleAction21:
			p.currentCondition.Operator = text
		case ruleAction22:
			p.currentCondition.Key = text
		case ruleAction23:
			p.currentCondition.Key = text
		case ruleAction24:
			p.currentCondition.Operator = text
		case ruleAction25:
			p.currentCondition.StringValue = &text
		case ruleAction26:

			tmp := p.currentFloat
			p.currentCondition.DoubleValue = &tmp

		case ruleAction27:
			p.currentList = make([]string, 0)
		case ruleAction28:
			p.Query.Metrics = p.currentList
		case ruleAction29:
			p.Query.Aggregation.Type = text
		case ruleAction30:
			p.currentList = make([]string, 0)
		case ruleAction31:
			p.Query.Aggregation.Properties = p.currentList
		case ruleAction32:
			p.Query.Aggregation.Type = text
		case ruleAction33:
			p.currentList = make([]string, 0)
		case ruleAction34:
			p.Query.Aggregation.Parameter = p.currentFloat
		case ruleAction35:
			p.Query.Aggregation.Properties = p.currentList
		case ruleAction36:
			p.currentList = append(p.currentList, text)
		case ruleAction37:
			p.currentList = append(p.currentList, text)
		case ruleAction38:
			p.currentList = append(p.currentList, p.currentText)
		case ruleAction39:
			p.currentList = append(p.currentList, p.currentText)
		case ruleAction40:
			p.currentText = text
		case ruleAction41:
			p.currentFloat, _ = strconv.ParseFloat(text, 64)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *QueryParser) Init(options ...func(*QueryParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(TypeSpec (Dot Filter)* Dot Metrics (Dot Aggregation)? !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleTypeSpec]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleDot]() {
						goto l3
					}
					if !_rules[ruleFilter]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if !_rules[ruleDot]() {
					goto l0
				}
				if !_rules[ruleMetrics]() {
					goto l0
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !_rules[ruleDot]() {
						goto l4
					}
					if !_rules[ruleAggregation]() {
						goto l4
					}
					goto l5
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
			l5:
				{
					position6, tokenIndex6 := position, tokenIndex
					if !matchDot() {
						goto l6
					}
					goto l0
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 TypeSpec <- <(<RESOURCE> Action0 LP IdentifierList RP Action1)> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				{
					position9 := position
					if !_rules[ruleRESOURCE]() {
						goto l7
					}
					add(rulePegText, position9)
				}
				if !_rules[ruleAction0]() {
					goto l7
				}
				if !_rules[ruleLP]() {
					goto l7
				}
				if !_rules[ruleIdentifierList]() {
					goto l7
				}
				if !_rules[ruleRP]() {
					goto l7
				}
				if !_rules[ruleAction1]() {
					goto l7
				}
				add(ruleTypeSpec, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 2 Filter <- <((NAME Action2 LP LiteralStringList RP Action3) / (REGEX Action4 LP LiteralStringList RP Action5) / (WHERE_HEALTH Action6 LP IdentifierList RP Action7) / (WHERE_STATUS Action8 LP IdentifierList RP Action9) / (WHERE_STATE Action10 LP IdentifierList RP Action11) / (WHERE_METRICS Action12 LP Conditions RP Action13) / (WHERE_PROPERTIES Action14 LP Conditions RP Action15))> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				{
					position12, tokenIndex12 := position, tokenIndex
					if !_rules[ruleNAME]() {
						goto l13
					}
					if !_rules[ruleAction2]() {
						goto l13
					}
					if !_rules[ruleLP]() {
						goto l13
					}
					if !_rules[ruleLiteralStringList]() {
						goto l13
					}
					if !_rules[ruleRP]() {
						goto l13
					}
					if !_rules[ruleAction3]() {
						goto l13
					}
					goto l12
				l13:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleREGEX]() {
						goto l14
					}
					if !_rules[ruleAction4]() {
						goto l14
					}
					if !_rules[ruleLP]() {
						goto l14
					}
					if !_rules[ruleLiteralStringList]() {
						goto l14
					}
					if !_rules[ruleRP]() {
						goto l14
					}
					if !_rules[ruleAction5]() {
						goto l14
					}
					goto l12
				l14:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_HEALTH]() {
						goto l15
					}
					if !_rules[ruleAction6]() {
						goto l15
					}
					if !_rules[ruleLP]() {
						goto l15
					}
					if !_rules[ruleIdentifierList]() {
						goto l15
					}
					if !_rules[ruleRP]() {
						goto l15
					}
					if !_rules[ruleAction7]() {
						goto l15
					}
					goto l12
				l15:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_STATUS]() {
						goto l16
					}
					if !_rules[ruleAction8]() {
						goto l16
					}
					if !_rules[ruleLP]() {
						goto l16
					}
					if !_rules[ruleIdentifierList]() {
						goto l16
					}
					if !_rules[ruleRP]() {
						goto l16
					}
					if !_rules[ruleAction9]() {
						goto l16
					}
					goto l12
				l16:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_STATE]() {
						goto l17
					}
					if !_rules[ruleAction10]() {
						goto l17
					}
					if !_rules[ruleLP]() {
						goto l17
					}
					if !_rules[ruleIdentifierList]() {
						goto l17
					}
					if !_rules[ruleRP]() {
						goto l17
					}
					if !_rules[ruleAction11]() {
						goto l17
					}
					goto l12
				l17:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_METRICS]() {
						goto l18
					}
					if !_rules[ruleAction12]() {
						goto l18
					}
					if !_rules[ruleLP]() {
						goto l18
					}
					if !_rules[ruleConditions]() {
						goto l18
					}
					if !_rules[ruleRP]() {
						goto l18
					}
					if !_rules[ruleAction13]() {
						goto l18
					}
					goto l12
				l18:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_PROPERTIES]() {
						goto l10
					}
					if !_rules[ruleAction14]() {
						goto l10
					}
					if !_rules[ruleLP]() {
						goto l10
					}
					if !_rules[ruleConditions]() {
						goto l10
					}
					if !_rules[ruleRP]() {
						goto l10
					}
					if !_rules[ruleAction15]() {
						goto l10
					}
				}
			l12:
				add(ruleFilter, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 3 Conditions <- <(Term Action16 (_ <Conjunctive> _ Action17 Term Action18)*)> */
		func() bool {
			position19, tokenIndex19 := position, tokenIndex
			{
				position20 := position
				if !_rules[ruleTerm]() {
					goto l19
				}
				if !_rules[ruleAction16]() {
					goto l19
				}
			l21:
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[rule_]() {
						goto l22
					}
					{
						position23 := position
						if !_rules[ruleConjunctive]() {
							goto l22
						}
						add(rulePegText, position23)
					}
					if !_rules[rule_]() {
						goto l22
					}
					if !_rules[ruleAction17]() {
						goto l22
					}
					if !_rules[ruleTerm]() {
						goto l22
					}
					if !_rules[ruleAction18]() {
						goto l22
					}
					goto l21
				l22:
					position, tokenIndex = position22, tokenIndex22
				}
				add(ruleConditions, position20)
			}
			return true
		l19:
			position, tokenIndex = position19, tokenIndex19
			return false
		},
		/* 4 Term <- <(Function / InfixExpression)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if !_rules[ruleFunction]() {
						goto l27
					}
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleInfixExpression]() {
						goto l24
					}
				}
			l26:
				add(ruleTerm, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 5 Conjunctive <- <(AND / OR)> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				{
					position30, tokenIndex30 := position, tokenIndex
					if !_rules[ruleAND]() {
						goto l31
					}
					goto l30
				l31:
					position, tokenIndex = position30, tokenIndex30
					if !_rules[ruleOR]() {
						goto l28
					}
				}
			l30:
				add(ruleConjunctive, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 6 Function <- <(UnaryFunction / BinaryFunction)> */
		func() bool {
			position32, tokenIndex32 := position, tokenIndex
			{
				position33 := position
				{
					position34, tokenIndex34 := position, tokenIndex
					if !_rules[ruleUnaryFunction]() {
						goto l35
					}
					goto l34
				l35:
					position, tokenIndex = position34, tokenIndex34
					if !_rules[ruleBinaryFunction]() {
						goto l32
					}
				}
			l34:
				add(ruleFunction, position33)
			}
			return true
		l32:
			position, tokenIndex = position32, tokenIndex32
			return false
		},
		/* 7 UnaryFunction <- <(<UnaryFunctionName> Action19 LP <Identifier> Action20 RP)> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				{
					position38 := position
					if !_rules[ruleUnaryFunctionName]() {
						goto l36
					}
					add(rulePegText, position38)
				}
				if !_rules[ruleAction19]() {
					goto l36
				}
				if !_rules[ruleLP]() {
					goto l36
				}
				{
					position39 := position
					if !_rules[ruleIdentifier]() {
						goto l36
					}
					add(rulePegText, position39)
				}
				if !_rules[ruleAction20]() {
					goto l36
				}
				if !_rules[ruleRP]() {
					goto l36
				}
				add(ruleUnaryFunction, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 8 UnaryFunctionName <- <(EXISTS / NOT_EXISTS)> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				{
					position42, tokenIndex42 := position, tokenIndex
					if !_rules[ruleEXISTS]() {
						goto l43
					}
					goto l42
				l43:
					position, tokenIndex = position42, tokenIndex42
					if !_rules[ruleNOT_EXISTS]() {
						goto l40
					}
				}
			l42:
				add(ruleUnaryFunctionName, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 9 BinaryFunctionName <- <(CONTAINS / STARTS_WITH / ENDS_WITH / REGEX / NOT_CONTAINS / NOT_STARTS_WITH / NOT_ENDS_WITH / NOT_REGEX / IN / NOT_IN)> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				{
					position46, tokenIndex46 := position, tokenIndex
					if !_rules[ruleCONTAINS]() {
						goto l47
					}
					goto l46
				l47:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleSTARTS_WITH]() {
						goto l48
					}
					goto l46
				l48:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleENDS_WITH]() {
						goto l49
					}
					goto l46
				l49:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleREGEX]() {
						goto l50
					}
					goto l46
				l50:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleNOT_CONTAINS]() {
						goto l51
					}
					goto l46
				l51:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleNOT_STARTS_WITH]() {
						goto l52
					}
					goto l46
				l52:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleNOT_ENDS_WITH]() {
						goto l53
					}
					goto l46
				l53:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleNOT_REGEX]() {
						goto l54
					}
					goto l46
				l54:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleIN]() {
						goto l55
					}
					goto l46
				l55:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleNOT_IN]() {
						goto l44
					}
				}
			l46:
				add(ruleBinaryFunctionName, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 10 Operator <- <(EQ / NE / LTE / LT / GTE / GT)> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[ruleEQ]() {
						goto l59
					}
					goto l58
				l59:
					position, tokenIndex = position58, tokenIndex58
					if !_rules[ruleNE]() {
						goto l60
					}
					goto l58
				l60:
					position, tokenIndex = position58, tokenIndex58
					if !_rules[ruleLTE]() {
						goto l61
					}
					goto l58
				l61:
					position, tokenIndex = position58, tokenIndex58
					if !_rules[ruleLT]() {
						goto l62
					}
					goto l58
				l62:
					position, tokenIndex = position58, tokenIndex58
					if !_rules[ruleGTE]() {
						goto l63
					}
					goto l58
				l63:
					position, tokenIndex = position58, tokenIndex58
					if !_rules[ruleGT]() {
						goto l56
					}
				}
			l58:
				add(ruleOperator, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 11 BinaryFunction <- <(<BinaryFunctionName> Action21 LP <Identifier> Action22 Comma LiteralConditionValue RP)> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				{
					position66 := position
					if !_rules[ruleBinaryFunctionName]() {
						goto l64
					}
					add(rulePegText, position66)
				}
				if !_rules[ruleAction21]() {
					goto l64
				}
				if !_rules[ruleLP]() {
					goto l64
				}
				{
					position67 := position
					if !_rules[ruleIdentifier]() {
						goto l64
					}
					add(rulePegText, position67)
				}
				if !_rules[ruleAction22]() {
					goto l64
				}
				if !_rules[ruleComma]() {
					goto l64
				}
				if !_rules[ruleLiteralConditionValue]() {
					goto l64
				}
				if !_rules[ruleRP]() {
					goto l64
				}
				add(ruleBinaryFunction, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 12 InfixExpression <- <(<Identifier> Action23 _ <Operator> Action24 _ LiteralConditionValue)> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				{
					position70 := position
					if !_rules[ruleIdentifier]() {
						goto l68
					}
					add(rulePegText, position70)
				}
				if !_rules[ruleAction23]() {
					goto l68
				}
				if !_rules[rule_]() {
					goto l68
				}
				{
					position71 := position
					if !_rules[ruleOperator]() {
						goto l68
					}
					add(rulePegText, position71)
				}
				if !_rules[ruleAction24]() {
					goto l68
				}
				if !_rules[rule_]() {
					goto l68
				}
				if !_rules[ruleLiteralConditionValue]() {
					goto l68
				}
				add(ruleInfixExpression, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 13 LiteralConditionValue <- <((<LiteralString> Action25) / (Float Action26))> */
		func() bool {
			position72, tokenIndex72 := position, tokenIndex
			{
				position73 := position
				{
					position74, tokenIndex74 := position, tokenIndex
					{
						position76 := position
						if !_rules[ruleLiteralString]() {
							goto l75
						}
						add(rulePegText, position76)
					}
					if !_rules[ruleAction25]() {
						goto l75
					}
					goto l74
				l75:
					position, tokenIndex = position74, tokenIndex74
					if !_rules[ruleFloat]() {
						goto l72
					}
					if !_rules[ruleAction26]() {
						goto l72
					}
				}
			l74:
				add(ruleLiteralConditionValue, position73)
			}
			return true
		l72:
			position, tokenIndex = position72, tokenIndex72
			return false
		},
		/* 14 Metrics <- <(METRICS Action27 LP IdentifierList RP Action28)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if !_rules[ruleMETRICS]() {
					goto l77
				}
				if !_rules[ruleAction27]() {
					goto l77
				}
				if !_rules[ruleLP]() {
					goto l77
				}
				if !_rules[ruleIdentifierList]() {
					goto l77
				}
				if !_rules[ruleRP]() {
					goto l77
				}
				if !_rules[ruleAction28]() {
					goto l77
				}
				add(ruleMetrics, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 Aggregation <- <((<(AVG / MIN / MAX / STDDEV / VARIANCE / MEDIAN / COUNT / SUM)> Action29 LP Action30 IdentifierList? Action31 RP) / (<PERCENTILE> Action32 LP Action33 Float Action34 (Comma IdentifierList)? Action35 RP))> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					{
						position83 := position
						{
							position84, tokenIndex84 := position, tokenIndex
							if !_rules[ruleAVG]() {
								goto l85
							}
							goto l84
						l85:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleMIN]() {
								goto l86
							}
							goto l84
						l86:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleMAX]() {
								goto l87
							}
							goto l84
						l87:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleSTDDEV]() {
								goto l88
							}
							goto l84
						l88:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleVARIANCE]() {
								goto l89
							}
							goto l84
						l89:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleMEDIAN]() {
								goto l90
							}
							goto l84
						l90:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleCOUNT]() {
								goto l91
							}
							goto l84
						l91:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleSUM]() {
								goto l82
							}
						}
					l84:
						add(rulePegText, position83)
					}
					if !_rules[ruleAction29]() {
						goto l82
					}
					if !_rules[ruleLP]() {
						goto l82
					}
					if !_rules[ruleAction30]() {
						goto l82
					}
					{
						position92, tokenIndex92 := position, tokenIndex
						if !_rules[ruleIdentifierList]() {
							goto l92
						}
						goto l93
					l92:
						position, tokenIndex = position92, tokenIndex92
					}
				l93:
					if !_rules[ruleAction31]() {
						goto l82
					}
					if !_rules[ruleRP]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					{
						position94 := position
						if !_rules[rulePERCENTILE]() {
							goto l79
						}
						add(rulePegText, position94)
					}
					if !_rules[ruleAction32]() {
						goto l79
					}
					if !_rules[ruleLP]() {
						goto l79
					}
					if !_rules[ruleAction33]() {
						goto l79
					}
					if !_rules[ruleFloat]() {
						goto l79
					}
					if !_rules[ruleAction34]() {
						goto l79
					}
					{
						position95, tokenIndex95 := position, tokenIndex
						if !_rules[ruleComma]() {
							goto l95
						}
						if !_rules[ruleIdentifierList]() {
							goto l95
						}
						goto l96
					l95:
						position, tokenIndex = position95, tokenIndex95
					}
				l96:
					if !_rules[ruleAction35]() {
						goto l79
					}
					if !_rules[ruleRP]() {
						goto l79
					}
				}
			l81:
				add(ruleAggregation, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 Identifier <- <((IDStartCharacter IDCharacter*) / (BackTick <IDQuotedCharacter+> BackTick))> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleIDStartCharacter]() {
						goto l100
					}
				l101:
					{
						position102, tokenIndex102 := position, tokenIndex
						if !_rules[ruleIDCharacter]() {
							goto l102
						}
						goto l101
					l102:
						position, tokenIndex = position102, tokenIndex102
					}
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleBackTick]() {
						goto l97
					}
					{
						position103 := position
						if !_rules[ruleIDQuotedCharacter]() {
							goto l97
						}
					l104:
						{
							position105, tokenIndex105 := position, tokenIndex
							if !_rules[ruleIDQuotedCharacter]() {
								goto l105
							}
							goto l104
						l105:
							position, tokenIndex = position105, tokenIndex105
						}
						add(rulePegText, position103)
					}
					if !_rules[ruleBackTick]() {
						goto l97
					}
				}
			l99:
				add(ruleIdentifier, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 17 IdentifierList <- <(<Identifier> Action36 (Comma <Identifier> Action37)*)> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				{
					position108 := position
					if !_rules[ruleIdentifier]() {
						goto l106
					}
					add(rulePegText, position108)
				}
				if !_rules[ruleAction36]() {
					goto l106
				}
			l109:
				{
					position110, tokenIndex110 := position, tokenIndex
					if !_rules[ruleComma]() {
						goto l110
					}
					{
						position111 := position
						if !_rules[ruleIdentifier]() {
							goto l110
						}
						add(rulePegText, position111)
					}
					if !_rules[ruleAction37]() {
						goto l110
					}
					goto l109
				l110:
					position, tokenIndex = position110, tokenIndex110
				}
				add(ruleIdentifierList, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 18 LiteralStringList <- <(<LiteralString> Action38 (Comma <LiteralString> Action39)*)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				{
					position114 := position
					if !_rules[ruleLiteralString]() {
						goto l112
					}
					add(rulePegText, position114)
				}
				if !_rules[ruleAction38]() {
					goto l112
				}
			l115:
				{
					position116, tokenIndex116 := position, tokenIndex
					if !_rules[ruleComma]() {
						goto l116
					}
					{
						position117 := position
						if !_rules[ruleLiteralString]() {
							goto l116
						}
						add(rulePegText, position117)
					}
					if !_rules[ruleAction39]() {
						goto l116
					}
					goto l115
				l116:
					position, tokenIndex = position116, tokenIndex116
				}
				add(ruleLiteralStringList, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 19 IDStartCharacter <- <([A-Z] / [a-z] / '_')> */
		func() bool {
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				{
					position120, tokenIndex120 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l121
					}
					position++
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l122
					}
					position++
					goto l120
				l122:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('_') {
						goto l118
					}
					position++
				}
			l120:
				add(ruleIDStartCharacter, position119)
			}
			return true
		l118:
			position, tokenIndex = position118, tokenIndex118
			return false
		},
		/* 20 IDCharacter <- <([A-Z] / [a-z] / [0-9] / '_' / ':' / '|' / '.' / '-')> */
		func() bool {
			position123, tokenIndex123 := position, tokenIndex
			{
				position124 := position
				{
					position125, tokenIndex125 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l126
					}
					position++
					goto l125
				l126:
					position, tokenIndex = position125, tokenIndex125
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l127
					}
					position++
					goto l125
				l127:
					position, tokenIndex = position125, tokenIndex125
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l128
					}
					position++
					goto l125
				l128:
					position, tokenIndex = position125, tokenIndex125
					if buffer[position] != rune('_') {
						goto l129
					}
					position++
					goto l125
				l129:
					position, tokenIndex = position125, tokenIndex125
					if buffer[position] != rune(':') {
						goto l130
					}
					position++
					goto l125
				l130:
					position, tokenIndex = position125, tokenIndex125
					if buffer[position] != rune('|') {
						goto l131
					}
					position++
					goto l125
				l131:
					position, tokenIndex = position125, tokenIndex125
					if buffer[position] != rune('.') {
						goto l132
					}
					position++
					goto l125
				l132:
					position, tokenIndex = position125, tokenIndex125
					if buffer[position] != rune('-') {
						goto l123
					}
					position++
				}
			l125:
				add(ruleIDCharacter, position124)
			}
			return true
		l123:
			position, tokenIndex = position123, tokenIndex123
			return false
		},
		/* 21 IDQuotedCharacter <- <([A-Z] / [a-z] / [0-9] / '_' / ':' / '|' / '.' / '-' / ' ' / ',' / '$')> */
		func() bool {
			position133, tokenIndex133 := position, tokenIndex
			{
				position134 := position
				{
					position135, tokenIndex135 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l136
					}
					position++
					goto l135
				l136:
					position, tokenIndex = position135, tokenIndex135
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l137
					}
					position++
					goto l135
				l137:
					position, tokenIndex = position135, tokenIndex135
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l138
					}
					position++
					goto l135
				l138:
					position, tokenIndex = position135, tokenIndex135
					if buffer[position] != rune('_') {
						goto l139
					}
					position++
					goto l135
				l139:
					position, tokenIndex = position135, tokenIndex135
					if buffer[position] != rune(':') {
						goto l140
					}
					position++
					goto l135
				l140:
					position, tokenIndex = position135, tokenIndex135
					if buffer[position] != rune('|') {
						goto l141
					}
					position++
					goto l135
				l141:
					position, tokenIndex = position135, tokenIndex135
					if buffer[position] != rune('.') {
						goto l142
					}
					position++
					goto l135
				l142:
					position, tokenIndex = position135, tokenIndex135
					if buffer[position] != rune('-') {
						goto l143
					}
					position++
					goto l135
				l143:
					position, tokenIndex = position135, tokenIndex135
					if buffer[position] != rune(' ') {
						goto l144
					}
					position++
					goto l135
				l144:
					position, tokenIndex = position135, tokenIndex135
					if buffer[position] != rune(',') {
						goto l145
					}
					position++
					goto l135
				l145:
					position, tokenIndex = position135, tokenIndex135
					if buffer[position] != rune('$') {
						goto l133
					}
					position++
				}
			l135:
				add(ruleIDQuotedCharacter, position134)
			}
			return true
		l133:
			position, tokenIndex = position133, tokenIndex133
			return false
		},
		/* 22 LiteralString <- <(Quote <LiteralChar*> Action40 Quote)> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				if !_rules[ruleQuote]() {
					goto l146
				}
				{
					position148 := position
				l149:
					{
						position150, tokenIndex150 := position, tokenIndex
						if !_rules[ruleLiteralChar]() {
							goto l150
						}
						goto l149
					l150:
						position, tokenIndex = position150, tokenIndex150
					}
					add(rulePegText, position148)
				}
				if !_rules[ruleAction40]() {
					goto l146
				}
				if !_rules[ruleQuote]() {
					goto l146
				}
				add(ruleLiteralString, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 23 METRICS <- <('m' 'e' 't' 'r' 'i' 'c' 's')> */
		func() bool {
			position151, tokenIndex151 := position, tokenIndex
			{
				position152 := position
				if buffer[position] != rune('m') {
					goto l151
				}
				position++
				if buffer[position] != rune('e') {
					goto l151
				}
				position++
				if buffer[position] != rune('t') {
					goto l151
				}
				position++
				if buffer[position] != rune('r') {
					goto l151
				}
				position++
				if buffer[position] != rune('i') {
					goto l151
				}
				position++
				if buffer[position] != rune('c') {
					goto l151
				}
				position++
				if buffer[position] != rune('s') {
					goto l151
				}
				position++
				add(ruleMETRICS, position152)
			}
			return true
		l151:
			position, tokenIndex = position151, tokenIndex151
			return false
		},
		/* 24 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				if buffer[position] != rune('n') {
					goto l153
				}
				position++
				if buffer[position] != rune('a') {
					goto l153
				}
				position++
				if buffer[position] != rune('m') {
					goto l153
				}
				position++
				if buffer[position] != rune('e') {
					goto l153
				}
				position++
				add(ruleNAME, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 25 REGEX <- <('r' 'e' 'g' 'e' 'x')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if buffer[position] != rune('r') {
					goto l155
				}
				position++
				if buffer[position] != rune('e') {
					goto l155
				}
				position++
				if buffer[position] != rune('g') {
					goto l155
				}
				position++
				if buffer[position] != rune('e') {
					goto l155
				}
				position++
				if buffer[position] != rune('x') {
					goto l155
				}
				position++
				add(ruleREGEX, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 26 RESOURCE <- <('r' 'e' 's' 'o' 'u' 'r' 'c' 'e')> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				if buffer[position] != rune('r') {
					goto l157
				}
				position++
				if buffer[position] != rune('e') {
					goto l157
				}
				position++
				if buffer[position] != rune('s') {
					goto l157
				}
				position++
				if buffer[position] != rune('o') {
					goto l157
				}
				position++
				if buffer[position] != rune('u') {
					goto l157
				}
				position++
				if buffer[position] != rune('r') {
					goto l157
				}
				position++
				if buffer[position] != rune('c') {
					goto l157
				}
				position++
				if buffer[position] != rune('e') {
					goto l157
				}
				position++
				add(ruleRESOURCE, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 27 WHERE_HEALTH <- <('w' 'h' 'e' 'r' 'e' 'H' 'e' 'a' 'l' 't' 'h')> */
		func() bool {
			position159, tokenIndex159 := position, tokenIndex
			{
				position160 := position
				if buffer[position] != rune('w') {
					goto l159
				}
				position++
				if buffer[position] != rune('h') {
					goto l159
				}
				position++
				if buffer[position] != rune('e') {
					goto l159
				}
				position++
				if buffer[position] != rune('r') {
					goto l159
				}
				position++
				if buffer[position] != rune('e') {
					goto l159
				}
				position++
				if buffer[position] != rune('H') {
					goto l159
				}
				position++
				if buffer[position] != rune('e') {
					goto l159
				}
				position++
				if buffer[position] != rune('a') {
					goto l159
				}
				position++
				if buffer[position] != rune('l') {
					goto l159
				}
				position++
				if buffer[position] != rune('t') {
					goto l159
				}
				position++
				if buffer[position] != rune('h') {
					goto l159
				}
				position++
				add(ruleWHERE_HEALTH, position160)
			}
			return true
		l159:
			position, tokenIndex = position159, tokenIndex159
			return false
		},
		/* 28 WHERE_STATE <- <('w' 'h' 'e' 'r' 'e' 'S' 't' 'a' 't' 'e')> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				if buffer[position] != rune('w') {
					goto l161
				}
				position++
				if buffer[position] != rune('h') {
					goto l161
				}
				position++
				if buffer[position] != rune('e') {
					goto l161
				}
				position++
				if buffer[position] != rune('r') {
					goto l161
				}
				position++
				if buffer[position] != rune('e') {
					goto l161
				}
				position++
				if buffer[position] != rune('S') {
					goto l161
				}
				position++
				if buffer[position] != rune('t') {
					goto l161
				}
				position++
				if buffer[position] != rune('a') {
					goto l161
				}
				position++
				if buffer[position] != rune('t') {
					goto l161
				}
				position++
				if buffer[position] != rune('e') {
					goto l161
				}
				position++
				add(ruleWHERE_STATE, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 29 WHERE_STATUS <- <('w' 'h' 'e' 'r' 'e' 'S' 't' 'a' 't' 'u' 's')> */
		func() bool {
			position163, tokenIndex163 := position, tokenIndex
			{
				position164 := position
				if buffer[position] != rune('w') {
					goto l163
				}
				position++
				if buffer[position] != rune('h') {
					goto l163
				}
				position++
				if buffer[position] != rune('e') {
					goto l163
				}
				position++
				if buffer[position] != rune('r') {
					goto l163
				}
				position++
				if buffer[position] != rune('e') {
					goto l163
				}
				position++
				if buffer[position] != rune('S') {
					goto l163
				}
				position++
				if buffer[position] != rune('t') {
					goto l163
				}
				position++
				if buffer[position] != rune('a') {
					goto l163
				}
				position++
				if buffer[position] != rune('t') {
					goto l163
				}
				position++
				if buffer[position] != rune('u') {
					goto l163
				}
				position++
				if buffer[position] != rune('s') {
					goto l163
				}
				position++
				add(ruleWHERE_STATUS, position164)
			}
			return true
		l163:
			position, tokenIndex = position163, tokenIndex163
			return false
		},
		/* 30 WHERE_METRICS <- <('w' 'h' 'e' 'r' 'e' 'M' 'e' 't' 'r' 'i' 'c' 's')> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				if buffer[position] != rune('w') {
					goto l165
				}
				position++
				if buffer[position] != rune('h') {
					goto l165
				}
				position++
				if buffer[position] != rune('e') {
					goto l165
				}
				position++
				if buffer[position] != rune('r') {
					goto l165
				}
				position++
				if buffer[position] != rune('e') {
					goto l165
				}
				position++
				if buffer[position] != rune('M') {
					goto l165
				}
				position++
				if buffer[position] != rune('e') {
					goto l165
				}
				position++
				if buffer[position] != rune('t') {
					goto l165
				}
				position++
				if buffer[position] != rune('r') {
					goto l165
				}
				position++
				if buffer[position] != rune('i') {
					goto l165
				}
				position++
				if buffer[position] != rune('c') {
					goto l165
				}
				position++
				if buffer[position] != rune('s') {
					goto l165
				}
				position++
				add(ruleWHERE_METRICS, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 31 WHERE_PROPERTIES <- <('w' 'h' 'e' 'r' 'e' 'P' 'r' 'o' 'p' 'e' 'r' 't' 'i' 'e' 's')> */
		func() bool {
			position167, tokenIndex167 := position, tokenIndex
			{
				position168 := position
				if buffer[position] != rune('w') {
					goto l167
				}
				position++
				if buffer[position] != rune('h') {
					goto l167
				}
				position++
				if buffer[position] != rune('e') {
					goto l167
				}
				position++
				if buffer[position] != rune('r') {
					goto l167
				}
				position++
				if buffer[position] != rune('e') {
					goto l167
				}
				position++
				if buffer[position] != rune('P') {
					goto l167
				}
				position++
				if buffer[position] != rune('r') {
					goto l167
				}
				position++
				if buffer[position] != rune('o') {
					goto l167
				}
				position++
				if buffer[position] != rune('p') {
					goto l167
				}
				position++
				if buffer[position] != rune('e') {
					goto l167
				}
				position++
				if buffer[position] != rune('r') {
					goto l167
				}
				position++
				if buffer[position] != rune('t') {
					goto l167
				}
				position++
				if buffer[position] != rune('i') {
					goto l167
				}
				position++
				if buffer[position] != rune('e') {
					goto l167
				}
				position++
				if buffer[position] != rune('s') {
					goto l167
				}
				position++
				add(ruleWHERE_PROPERTIES, position168)
			}
			return true
		l167:
			position, tokenIndex = position167, tokenIndex167
			return false
		},
		/* 32 AND <- <('a' 'n' 'd')> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				if buffer[position] != rune('a') {
					goto l169
				}
				position++
				if buffer[position] != rune('n') {
					goto l169
				}
				position++
				if buffer[position] != rune('d') {
					goto l169
				}
				position++
				add(ruleAND, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 33 OR <- <('o' 'r')> */
		func() bool {
			position171, tokenIndex171 := position, tokenIndex
			{
				position172 := position
				if buffer[position] != rune('o') {
					goto l171
				}
				position++
				if buffer[position] != rune('r') {
					goto l171
				}
				position++
				add(ruleOR, position172)
			}
			return true
		l171:
			position, tokenIndex = position171, tokenIndex171
			return false
		},
		/* 34 IN <- <('i' 'n')> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				if buffer[position] != rune('i') {
					goto l173
				}
				position++
				if buffer[position] != rune('n') {
					goto l173
				}
				position++
				add(ruleIN, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 35 NOT_IN <- <('n' 'o' 't' ' ' 'i' 'n')> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				if buffer[position] != rune('n') {
					goto l175
				}
				position++
				if buffer[position] != rune('o') {
					goto l175
				}
				position++
				if buffer[position] != rune('t') {
					goto l175
				}
				position++
				if buffer[position] != rune(' ') {
					goto l175
				}
				position++
				if buffer[position] != rune('i') {
					goto l175
				}
				position++
				if buffer[position] != rune('n') {
					goto l175
				}
				position++
				add(ruleNOT_IN, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 36 CONTAINS <- <('c' 'o' 'n' 't' 'a' 'i' 'n' 's')> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				if buffer[position] != rune('c') {
					goto l177
				}
				position++
				if buffer[position] != rune('o') {
					goto l177
				}
				position++
				if buffer[position] != rune('n') {
					goto l177
				}
				position++
				if buffer[position] != rune('t') {
					goto l177
				}
				position++
				if buffer[position] != rune('a') {
					goto l177
				}
				position++
				if buffer[position] != rune('i') {
					goto l177
				}
				position++
				if buffer[position] != rune('n') {
					goto l177
				}
				position++
				if buffer[position] != rune('s') {
					goto l177
				}
				position++
				add(ruleCONTAINS, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 37 STARTS_WITH <- <('s' 't' 'a' 'r' 't' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position179, tokenIndex179 := position, tokenIndex
			{
				position180 := position
				if buffer[position] != rune('s') {
					goto l179
				}
				position++
				if buffer[position] != rune('t') {
					goto l179
				}
				position++
				if buffer[position] != rune('a') {
					goto l179
				}
				position++
				if buffer[position] != rune('r') {
					goto l179
				}
				position++
				if buffer[position] != rune('t') {
					goto l179
				}
				position++
				if buffer[position] != rune('s') {
					goto l179
				}
				position++
				if buffer[position] != rune('_') {
					goto l179
				}
				position++
				if buffer[position] != rune('w') {
					goto l179
				}
				position++
				if buffer[position] != rune('i') {
					goto l179
				}
				position++
				if buffer[position] != rune('t') {
					goto l179
				}
				position++
				if buffer[position] != rune('h') {
					goto l179
				}
				position++
				add(ruleSTARTS_WITH, position180)
			}
			return true
		l179:
			position, tokenIndex = position179, tokenIndex179
			return false
		},
		/* 38 ENDS_WITH <- <('e' 'n' 'd' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				if buffer[position] != rune('e') {
					goto l181
				}
				position++
				if buffer[position] != rune('n') {
					goto l181
				}
				position++
				if buffer[position] != rune('d') {
					goto l181
				}
				position++
				if buffer[position] != rune('s') {
					goto l181
				}
				position++
				if buffer[position] != rune('_') {
					goto l181
				}
				position++
				if buffer[position] != rune('w') {
					goto l181
				}
				position++
				if buffer[position] != rune('i') {
					goto l181
				}
				position++
				if buffer[position] != rune('t') {
					goto l181
				}
				position++
				if buffer[position] != rune('h') {
					goto l181
				}
				position++
				add(ruleENDS_WITH, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 39 NOT_STARTS_WITH <- <('n' 'o' 't' ' ' 's' 't' 'a' 'r' 't' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				if buffer[position] != rune('n') {
					goto l183
				}
				position++
				if buffer[position] != rune('o') {
					goto l183
				}
				position++
				if buffer[position] != rune('t') {
					goto l183
				}
				position++
				if buffer[position] != rune(' ') {
					goto l183
				}
				position++
				if buffer[position] != rune('s') {
					goto l183
				}
				position++
				if buffer[position] != rune('t') {
					goto l183
				}
				position++
				if buffer[position] != rune('a') {
					goto l183
				}
				position++
				if buffer[position] != rune('r') {
					goto l183
				}
				position++
				if buffer[position] != rune('t') {
					goto l183
				}
				position++
				if buffer[position] != rune('s') {
					goto l183
				}
				position++
				if buffer[position] != rune('_') {
					goto l183
				}
				position++
				if buffer[position] != rune('w') {
					goto l183
				}
				position++
				if buffer[position] != rune('i') {
					goto l183
				}
				position++
				if buffer[position] != rune('t') {
					goto l183
				}
				position++
				if buffer[position] != rune('h') {
					goto l183
				}
				position++
				add(ruleNOT_STARTS_WITH, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 40 NOT_ENDS_WITH <- <('n' 'o' 't' ' ' 'e' 'n' 'd' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position185, tokenIndex185 := position, tokenIndex
			{
				position186 := position
				if buffer[position] != rune('n') {
					goto l185
				}
				position++
				if buffer[position] != rune('o') {
					goto l185
				}
				position++
				if buffer[position] != rune('t') {
					goto l185
				}
				position++
				if buffer[position] != rune(' ') {
					goto l185
				}
				position++
				if buffer[position] != rune('e') {
					goto l185
				}
				position++
				if buffer[position] != rune('n') {
					goto l185
				}
				position++
				if buffer[position] != rune('d') {
					goto l185
				}
				position++
				if buffer[position] != rune('s') {
					goto l185
				}
				position++
				if buffer[position] != rune('_') {
					goto l185
				}
				position++
				if buffer[position] != rune('w') {
					goto l185
				}
				position++
				if buffer[position] != rune('i') {
					goto l185
				}
				position++
				if buffer[position] != rune('t') {
					goto l185
				}
				position++
				if buffer[position] != rune('h') {
					goto l185
				}
				position++
				add(ruleNOT_ENDS_WITH, position186)
			}
			return true
		l185:
			position, tokenIndex = position185, tokenIndex185
			return false
		},
		/* 41 NOT_CONTAINS <- <('n' 'o' 't' ' ' 'c' 'o' 'n' 't' 'a' 'i' 'n' 's')> */
		func() bool {
			position187, tokenIndex187 := position, tokenIndex
			{
				position188 := position
				if buffer[position] != rune('n') {
					goto l187
				}
				position++
				if buffer[position] != rune('o') {
					goto l187
				}
				position++
				if buffer[position] != rune('t') {
					goto l187
				}
				position++
				if buffer[position] != rune(' ') {
					goto l187
				}
				position++
				if buffer[position] != rune('c') {
					goto l187
				}
				position++
				if buffer[position] != rune('o') {
					goto l187
				}
				position++
				if buffer[position] != rune('n') {
					goto l187
				}
				position++
				if buffer[position] != rune('t') {
					goto l187
				}
				position++
				if buffer[position] != rune('a') {
					goto l187
				}
				position++
				if buffer[position] != rune('i') {
					goto l187
				}
				position++
				if buffer[position] != rune('n') {
					goto l187
				}
				position++
				if buffer[position] != rune('s') {
					goto l187
				}
				position++
				add(ruleNOT_CONTAINS, position188)
			}
			return true
		l187:
			position, tokenIndex = position187, tokenIndex187
			return false
		},
		/* 42 NOT_REGEX <- <('n' 'o' 't' ' ' 'r' 'e' 'g' 'e' 'x')> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				if buffer[position] != rune('n') {
					goto l189
				}
				position++
				if buffer[position] != rune('o') {
					goto l189
				}
				position++
				if buffer[position] != rune('t') {
					goto l189
				}
				position++
				if buffer[position] != rune(' ') {
					goto l189
				}
				position++
				if buffer[position] != rune('r') {
					goto l189
				}
				position++
				if buffer[position] != rune('e') {
					goto l189
				}
				position++
				if buffer[position] != rune('g') {
					goto l189
				}
				position++
				if buffer[position] != rune('e') {
					goto l189
				}
				position++
				if buffer[position] != rune('x') {
					goto l189
				}
				position++
				add(ruleNOT_REGEX, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 43 EXISTS <- <('e' 'x' 'i' 's' 't' 's')> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				if buffer[position] != rune('e') {
					goto l191
				}
				position++
				if buffer[position] != rune('x') {
					goto l191
				}
				position++
				if buffer[position] != rune('i') {
					goto l191
				}
				position++
				if buffer[position] != rune('s') {
					goto l191
				}
				position++
				if buffer[position] != rune('t') {
					goto l191
				}
				position++
				if buffer[position] != rune('s') {
					goto l191
				}
				position++
				add(ruleEXISTS, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 44 NOT_EXISTS <- <('n' 'o' 't' ' ' 'e' 'x' 'i' 's' 't' 's')> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				if buffer[position] != rune('n') {
					goto l193
				}
				position++
				if buffer[position] != rune('o') {
					goto l193
				}
				position++
				if buffer[position] != rune('t') {
					goto l193
				}
				position++
				if buffer[position] != rune(' ') {
					goto l193
				}
				position++
				if buffer[position] != rune('e') {
					goto l193
				}
				position++
				if buffer[position] != rune('x') {
					goto l193
				}
				position++
				if buffer[position] != rune('i') {
					goto l193
				}
				position++
				if buffer[position] != rune('s') {
					goto l193
				}
				position++
				if buffer[position] != rune('t') {
					goto l193
				}
				position++
				if buffer[position] != rune('s') {
					goto l193
				}
				position++
				add(ruleNOT_EXISTS, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
		/* 45 GT <- <'>'> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				if buffer[position] != rune('>') {
					goto l195
				}
				position++
				add(ruleGT, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 46 LT <- <'<'> */
		func() bool {
			position197, tokenIndex197 := position, tokenIndex
			{
				position198 := position
				if buffer[position] != rune('<') {
					goto l197
				}
				position++
				add(ruleLT, position198)
			}
			return true
		l197:
			position, tokenIndex = position197, tokenIndex197
			return false
		},
		/* 47 GTE <- <('>' '=')> */
		func() bool {
			position199, tokenIndex199 := position, tokenIndex
			{
				position200 := position
				if buffer[position] != rune('>') {
					goto l199
				}
				position++
				if buffer[position] != rune('=') {
					goto l199
				}
				position++
				add(ruleGTE, position200)
			}
			return true
		l199:
			position, tokenIndex = position199, tokenIndex199
			return false
		},
		/* 48 LTE <- <('<' '=')> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if buffer[position] != rune('<') {
					goto l201
				}
				position++
				if buffer[position] != rune('=') {
					goto l201
				}
				position++
				add(ruleLTE, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 49 EQ <- <'='> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if buffer[position] != rune('=') {
					goto l203
				}
				position++
				add(ruleEQ, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 50 NE <- <('!' '=')> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				if buffer[position] != rune('!') {
					goto l205
				}
				position++
				if buffer[position] != rune('=') {
					goto l205
				}
				position++
				add(ruleNE, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 51 AVG <- <('a' 'v' 'g')> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				if buffer[position] != rune('a') {
					goto l207
				}
				position++
				if buffer[position] != rune('v') {
					goto l207
				}
				position++
				if buffer[position] != rune('g') {
					goto l207
				}
				position++
				add(ruleAVG, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 52 MIN <- <('m' 'i' 'n')> */
		func() bool {
			position209, tokenIndex209 := position, tokenIndex
			{
				position210 := position
				if buffer[position] != rune('m') {
					goto l209
				}
				position++
				if buffer[position] != rune('i') {
					goto l209
				}
				position++
				if buffer[position] != rune('n') {
					goto l209
				}
				position++
				add(ruleMIN, position210)
			}
			return true
		l209:
			position, tokenIndex = position209, tokenIndex209
			return false
		},
		/* 53 MAX <- <('m' 'a' 'x')> */
		func() bool {
			position211, tokenIndex211 := position, tokenIndex
			{
				position212 := position
				if buffer[position] != rune('m') {
					goto l211
				}
				position++
				if buffer[position] != rune('a') {
					goto l211
				}
				position++
				if buffer[position] != rune('x') {
					goto l211
				}
				position++
				add(ruleMAX, position212)
			}
			return true
		l211:
			position, tokenIndex = position211, tokenIndex211
			return false
		},
		/* 54 COUNT <- <('c' 'o' 'u' 'n' 't')> */
		func() bool {
			position213, tokenIndex213 := position, tokenIndex
			{
				position214 := position
				if buffer[position] != rune('c') {
					goto l213
				}
				position++
				if buffer[position] != rune('o') {
					goto l213
				}
				position++
				if buffer[position] != rune('u') {
					goto l213
				}
				position++
				if buffer[position] != rune('n') {
					goto l213
				}
				position++
				if buffer[position] != rune('t') {
					goto l213
				}
				position++
				add(ruleCOUNT, position214)
			}
			return true
		l213:
			position, tokenIndex = position213, tokenIndex213
			return false
		},
		/* 55 SUM <- <('s' 'u' 'm')> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				if buffer[position] != rune('s') {
					goto l215
				}
				position++
				if buffer[position] != rune('u') {
					goto l215
				}
				position++
				if buffer[position] != rune('m') {
					goto l215
				}
				position++
				add(ruleSUM, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 56 STDDEV <- <('s' 't' 'd' 'd' 'e' 'v')> */
		func() bool {
			position217, tokenIndex217 := position, tokenIndex
			{
				position218 := position
				if buffer[position] != rune('s') {
					goto l217
				}
				position++
				if buffer[position] != rune('t') {
					goto l217
				}
				position++
				if buffer[position] != rune('d') {
					goto l217
				}
				position++
				if buffer[position] != rune('d') {
					goto l217
				}
				position++
				if buffer[position] != rune('e') {
					goto l217
				}
				position++
				if buffer[position] != rune('v') {
					goto l217
				}
				position++
				add(ruleSTDDEV, position218)
			}
			return true
		l217:
			position, tokenIndex = position217, tokenIndex217
			return false
		},
		/* 57 VARIANCE <- <('v' 'a' 'r' 'i' 'a' 'n' 'c' 'e')> */
		func() bool {
			position219, tokenIndex219 := position, tokenIndex
			{
				position220 := position
				if buffer[position] != rune('v') {
					goto l219
				}
				position++
				if buffer[position] != rune('a') {
					goto l219
				}
				position++
				if buffer[position] != rune('r') {
					goto l219
				}
				position++
				if buffer[position] != rune('i') {
					goto l219
				}
				position++
				if buffer[position] != rune('a') {
					goto l219
				}
				position++
				if buffer[position] != rune('n') {
					goto l219
				}
				position++
				if buffer[position] != rune('c') {
					goto l219
				}
				position++
				if buffer[position] != rune('e') {
					goto l219
				}
				position++
				add(ruleVARIANCE, position220)
			}
			return true
		l219:
			position, tokenIndex = position219, tokenIndex219
			return false
		},
		/* 58 MEDIAN <- <('m' 'e' 'd' 'i' 'a' 'n')> */
		func() bool {
			position221, tokenIndex221 := position, tokenIndex
			{
				position222 := position
				if buffer[position] != rune('m') {
					goto l221
				}
				position++
				if buffer[position] != rune('e') {
					goto l221
				}
				position++
				if buffer[position] != rune('d') {
					goto l221
				}
				position++
				if buffer[position] != rune('i') {
					goto l221
				}
				position++
				if buffer[position] != rune('a') {
					goto l221
				}
				position++
				if buffer[position] != rune('n') {
					goto l221
				}
				position++
				add(ruleMEDIAN, position222)
			}
			return true
		l221:
			position, tokenIndex = position221, tokenIndex221
			return false
		},
		/* 59 PERCENTILE <- <('p' 'e' 'r' 'c' 'e' 'n' 't' 'i' 'l' 'e')> */
		func() bool {
			position223, tokenIndex223 := position, tokenIndex
			{
				position224 := position
				if buffer[position] != rune('p') {
					goto l223
				}
				position++
				if buffer[position] != rune('e') {
					goto l223
				}
				position++
				if buffer[position] != rune('r') {
					goto l223
				}
				position++
				if buffer[position] != rune('c') {
					goto l223
				}
				position++
				if buffer[position] != rune('e') {
					goto l223
				}
				position++
				if buffer[position] != rune('n') {
					goto l223
				}
				position++
				if buffer[position] != rune('t') {
					goto l223
				}
				position++
				if buffer[position] != rune('i') {
					goto l223
				}
				position++
				if buffer[position] != rune('l') {
					goto l223
				}
				position++
				if buffer[position] != rune('e') {
					goto l223
				}
				position++
				add(rulePERCENTILE, position224)
			}
			return true
		l223:
			position, tokenIndex = position223, tokenIndex223
			return false
		},
		/* 60 Quote <- <'"'> */
		func() bool {
			position225, tokenIndex225 := position, tokenIndex
			{
				position226 := position
				if buffer[position] != rune('"') {
					goto l225
				}
				position++
				add(ruleQuote, position226)
			}
			return true
		l225:
			position, tokenIndex = position225, tokenIndex225
			return false
		},
		/* 61 Comma <- <(_ ',' _)> */
		func() bool {
			position227, tokenIndex227 := position, tokenIndex
			{
				position228 := position
				if !_rules[rule_]() {
					goto l227
				}
				if buffer[position] != rune(',') {
					goto l227
				}
				position++
				if !_rules[rule_]() {
					goto l227
				}
				add(ruleComma, position228)
			}
			return true
		l227:
			position, tokenIndex = position227, tokenIndex227
			return false
		},
		/* 62 BackTick <- <'`'> */
		func() bool {
			position229, tokenIndex229 := position, tokenIndex
			{
				position230 := position
				if buffer[position] != rune('`') {
					goto l229
				}
				position++
				add(ruleBackTick, position230)
			}
			return true
		l229:
			position, tokenIndex = position229, tokenIndex229
			return false
		},
		/* 63 Dot <- <(_ '.' _)> */
		func() bool {
			position231, tokenIndex231 := position, tokenIndex
			{
				position232 := position
				if !_rules[rule_]() {
					goto l231
				}
				if buffer[position] != rune('.') {
					goto l231
				}
				position++
				if !_rules[rule_]() {
					goto l231
				}
				add(ruleDot, position232)
			}
			return true
		l231:
			position, tokenIndex = position231, tokenIndex231
			return false
		},
		/* 64 LP <- <(_ '(' _)> */
		func() bool {
			position233, tokenIndex233 := position, tokenIndex
			{
				position234 := position
				if !_rules[rule_]() {
					goto l233
				}
				if buffer[position] != rune('(') {
					goto l233
				}
				position++
				if !_rules[rule_]() {
					goto l233
				}
				add(ruleLP, position234)
			}
			return true
		l233:
			position, tokenIndex = position233, tokenIndex233
			return false
		},
		/* 65 RP <- <(_ ')' _)> */
		func() bool {
			position235, tokenIndex235 := position, tokenIndex
			{
				position236 := position
				if !_rules[rule_]() {
					goto l235
				}
				if buffer[position] != rune(')') {
					goto l235
				}
				position++
				if !_rules[rule_]() {
					goto l235
				}
				add(ruleRP, position236)
			}
			return true
		l235:
			position, tokenIndex = position235, tokenIndex235
			return false
		},
		/* 66 _ <- <(' ' / '\t' / '\n' / '\r')*> */
		func() bool {
			{
				position238 := position
			l239:
				{
					position240, tokenIndex240 := position, tokenIndex
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l242
						}
						position++
						goto l241
					l242:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('\t') {
							goto l243
						}
						position++
						goto l241
					l243:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('\n') {
							goto l244
						}
						position++
						goto l241
					l244:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('\r') {
							goto l240
						}
						position++
					}
				l241:
					goto l239
				l240:
					position, tokenIndex = position240, tokenIndex240
				}
				add(rule_, position238)
			}
			return true
		},
		/* 67 LiteralChar <- <(!('"' / '^' / '\n') .)> */
		func() bool {
			position245, tokenIndex245 := position, tokenIndex
			{
				position246 := position
				{
					position247, tokenIndex247 := position, tokenIndex
					{
						position248, tokenIndex248 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l249
						}
						position++
						goto l248
					l249:
						position, tokenIndex = position248, tokenIndex248
						if buffer[position] != rune('^') {
							goto l250
						}
						position++
						goto l248
					l250:
						position, tokenIndex = position248, tokenIndex248
						if buffer[position] != rune('\n') {
							goto l247
						}
						position++
					}
				l248:
					goto l245
				l247:
					position, tokenIndex = position247, tokenIndex247
				}
				if !matchDot() {
					goto l245
				}
				add(ruleLiteralChar, position246)
			}
			return true
		l245:
			position, tokenIndex = position245, tokenIndex245
			return false
		},
		/* 68 Float <- <(<('-'? [0-9]+ ('.' [0-9]+)? (('E' / 'e') ('+' / '-')? [0-9]+)?)> Action41)> */
		func() bool {
			position251, tokenIndex251 := position, tokenIndex
			{
				position252 := position
				{
					position253 := position
					{
						position254, tokenIndex254 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l254
						}
						position++
						goto l255
					l254:
						position, tokenIndex = position254, tokenIndex254
					}
				l255:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l251
					}
					position++
				l256:
					{
						position257, tokenIndex257 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l257
						}
						position++
						goto l256
					l257:
						position, tokenIndex = position257, tokenIndex257
					}
					{
						position258, tokenIndex258 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l258
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l258
						}
						position++
					l260:
						{
							position261, tokenIndex261 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l261
							}
							position++
							goto l260
						l261:
							position, tokenIndex = position261, tokenIndex261
						}
						goto l259
					l258:
						position, tokenIndex = position258, tokenIndex258
					}
				l259:
					{
						position262, tokenIndex262 := position, tokenIndex
						{
							position264, tokenIndex264 := position, tokenIndex
							if buffer[position] != rune('E') {
								goto l265
							}
							position++
							goto l264
						l265:
							position, tokenIndex = position264, tokenIndex264
							if buffer[position] != rune('e') {
								goto l262
							}
							position++
						}
					l264:
						{
							position266, tokenIndex266 := position, tokenIndex
							{
								position268, tokenIndex268 := position, tokenIndex
								if buffer[position] != rune('+') {
									goto l269
								}
								position++
								goto l268
							l269:
								position, tokenIndex = position268, tokenIndex268
								if buffer[position] != rune('-') {
									goto l266
								}
								position++
							}
						l268:
							goto l267
						l266:
							position, tokenIndex = position266, tokenIndex266
						}
					l267:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l262
						}
						position++
					l270:
						{
							position271, tokenIndex271 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l271
							}
							position++
							goto l270
						l271:
							position, tokenIndex = position271, tokenIndex271
						}
						goto l263
					l262:
						position, tokenIndex = position262, tokenIndex262
					}
				l263:
					add(rulePegText, position253)
				}
				if !_rules[ruleAction41]() {
					goto l251
				}
				add(ruleFloat, position252)
			}
			return true
		l251:
			position, tokenIndex = position251, tokenIndex251
			return false
		},
		nil,
		/* 71 Action0 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 72 Action1 <- <{ p.Query.ResourceKinds = p.currentList }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 73 Action2 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 74 Action3 <- <{ p.Query.Name = p.currentList }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 75 Action4 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 76 Action5 <- <{ p.Query.Regex = p.currentList }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 77 Action6 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 78 Action7 <- <{ p.Query.Health = p.currentList }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 79 Action8 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 80 Action9 <- <{ p.Query.Status = p.currentList }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 81 Action10 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 82 Action11 <- <{ p.Query.State = p.currentList }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 83 Action12 <- <{ p.currentConditions = make([]Condition, 0) }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 84 Action13 <- <{ p.Query.MetricConditions = p.currentConditions }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 85 Action14 <- <{ p.currentConditions = make([]Condition, 0) }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 86 Action15 <- <{ p.Query.PropertyConditions = p.currentConditions }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 87 Action16 <- <{ p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive("")) }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 88 Action17 <- <{ p.currentConjunctive = strings.ToUpper(text) }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 89 Action18 <- <{ p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(p.currentConjunctive)) }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 90 Action19 <- <{ p.currentCondition.Operator = text}> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 91 Action20 <- <{ p.currentCondition.Key = text }> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 92 Action21 <- <{ p.currentCondition.Operator = text}> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 93 Action22 <- <{ p.currentCondition.Key = text}> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 94 Action23 <- <{ p.currentCondition.Key = text }> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 95 Action24 <- <{ p.currentCondition.Operator = text }> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 96 Action25 <- <{ p.currentCondition.StringValue = &text }> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 97 Action26 <- <{
		   tmp := p.currentFloat
		   p.currentCondition.DoubleValue = &tmp
		 }> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 98 Action27 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 99 Action28 <- <{ p.Query.Metrics = p.currentList }> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 100 Action29 <- <{ p.Query.Aggregation.Type = text }> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 101 Action30 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 102 Action31 <- <{ p.Query.Aggregation.Properties = p.currentList }> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 103 Action32 <- <{ p.Query.Aggregation.Type = text }> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 104 Action33 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 105 Action34 <- <{ p.Query.Aggregation.Parameter = p.currentFloat }> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 106 Action35 <- <{ p.Query.Aggregation.Properties = p.currentList }> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 107 Action36 <- <{ p.currentList = append(p.currentList, text)}> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 108 Action37 <- <{ p.currentList = append(p.currentList, text)}> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 109 Action38 <- <{ p.currentList = append(p.currentList, p.currentText )}> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 110 Action39 <- <{ p.currentList = append(p.currentList, p.currentText) }> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
		/* 111 Action40 <- <{ p.currentText = text }> */
		func() bool {
			{
				add(ruleAction40, position)
			}
			return true
		},
		/* 112 Action41 <- <{ p.currentFloat, _ = strconv.ParseFloat(text, 64) }> */
		func() bool {
			{
				add(ruleAction41, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
