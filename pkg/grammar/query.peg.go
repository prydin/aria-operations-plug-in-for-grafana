package grammar

// Code generated by peg pkg/grammar/query.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleTypeSpec
	ruleFilter
	ruleConditions
	ruleTerm
	ruleConjunctive
	ruleFunction
	ruleUnaryFunction
	ruleUnaryFunctionName
	ruleBinaryFunctionName
	ruleOperator
	ruleBinaryFunction
	ruleInfixExpression
	ruleLiteralConditionValue
	ruleMetrics
	ruleIdentifier
	ruleIdentifierList
	ruleLiteralStringList
	ruleIDStartCharacter
	ruleIDCharacter
	ruleIDQuotedCharacter
	ruleLiteralString
	ruleMETRICS
	ruleNAME
	ruleREGEX
	ruleRESOURCE
	ruleWHERE_HEALTH
	ruleWHERE_STATE
	ruleWHERE_STATUS
	ruleWHERE_METRICS
	ruleWHERE_PROPERTIES
	ruleAND
	ruleOR
	ruleIN
	ruleNOT_IN
	ruleCONTAINS
	ruleSTARTS_WITH
	ruleENDS_WITH
	ruleNOT_STARTS_WITH
	ruleNOT_ENDS_WITH
	ruleNOT_CONTAINS
	ruleNOT_REGEX
	ruleEXISTS
	ruleNOT_EXISTS
	ruleGT
	ruleLT
	ruleGTE
	ruleLTE
	ruleEQ
	ruleNE
	ruleQuote
	ruleComma
	ruleBackTick
	ruleDot
	ruleLP
	ruleRP
	rule_
	ruleLiteralChar
	ruleFloat
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"TypeSpec",
	"Filter",
	"Conditions",
	"Term",
	"Conjunctive",
	"Function",
	"UnaryFunction",
	"UnaryFunctionName",
	"BinaryFunctionName",
	"Operator",
	"BinaryFunction",
	"InfixExpression",
	"LiteralConditionValue",
	"Metrics",
	"Identifier",
	"IdentifierList",
	"LiteralStringList",
	"IDStartCharacter",
	"IDCharacter",
	"IDQuotedCharacter",
	"LiteralString",
	"METRICS",
	"NAME",
	"REGEX",
	"RESOURCE",
	"WHERE_HEALTH",
	"WHERE_STATE",
	"WHERE_STATUS",
	"WHERE_METRICS",
	"WHERE_PROPERTIES",
	"AND",
	"OR",
	"IN",
	"NOT_IN",
	"CONTAINS",
	"STARTS_WITH",
	"ENDS_WITH",
	"NOT_STARTS_WITH",
	"NOT_ENDS_WITH",
	"NOT_CONTAINS",
	"NOT_REGEX",
	"EXISTS",
	"NOT_EXISTS",
	"GT",
	"LT",
	"GTE",
	"LTE",
	"EQ",
	"NE",
	"Quote",
	"Comma",
	"BackTick",
	"Dot",
	"LP",
	"RP",
	"_",
	"LiteralChar",
	"Float",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type QueryParser struct {
	Query RawQuery

	currentText        string
	currentList        []string
	currentCondition   Condition
	currentConditions  []Condition
	currentConjunctive string

	Buffer string
	buffer []rune
	rules  [95]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *QueryParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *QueryParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *QueryParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *QueryParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *QueryParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *QueryParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *QueryParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.currentList = make([]string, 0)
		case ruleAction1:
			p.Query.ResourceKinds = p.currentList
		case ruleAction2:
			p.currentList = make([]string, 0)
		case ruleAction3:
			p.Query.Name = p.currentList
		case ruleAction4:
			p.currentList = make([]string, 0)
		case ruleAction5:
			p.Query.Regex = p.currentList
		case ruleAction6:
			p.currentList = make([]string, 0)
		case ruleAction7:
			p.Query.Health = p.currentList
		case ruleAction8:
			p.currentList = make([]string, 0)
		case ruleAction9:
			p.Query.Status = p.currentList
		case ruleAction10:
			p.currentList = make([]string, 0)
		case ruleAction11:
			p.Query.State = p.currentList
		case ruleAction12:
			p.currentConditions = make([]Condition, 0)
		case ruleAction13:
			p.Query.MetricConditions = p.currentConditions
		case ruleAction14:
			p.currentConditions = make([]Condition, 0)
		case ruleAction15:
			p.Query.PropertyConditions = p.currentConditions
		case ruleAction16:
			p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(""))
		case ruleAction17:
			p.currentConjunctive = strings.ToUpper(text)
		case ruleAction18:
			p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(p.currentConjunctive))
		case ruleAction19:
			p.currentCondition.Operator = text
		case ruleAction20:
			p.currentCondition.Key = text
		case ruleAction21:
			p.currentCondition.Operator = text
		case ruleAction22:
			p.currentCondition.Key = text
		case ruleAction23:
			p.currentCondition.Key = text
		case ruleAction24:
			p.currentCondition.Operator = text
		case ruleAction25:
			p.currentCondition.StringValue = text
		case ruleAction26:
			p.currentCondition.DoubleValue, _ = strconv.ParseFloat(text, 64)
		case ruleAction27:
			p.currentList = make([]string, 0)
		case ruleAction28:
			p.Query.Metrics = p.currentList
		case ruleAction29:
			p.currentList = append(p.currentList, text)
		case ruleAction30:
			p.currentList = append(p.currentList, text)
		case ruleAction31:
			p.currentList = append(p.currentList, p.currentText)
		case ruleAction32:
			p.currentList = append(p.currentList, p.currentText)
		case ruleAction33:
			p.currentText = text

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *QueryParser) Init(options ...func(*QueryParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(TypeSpec (Dot Filter)+ Dot Metrics !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleTypeSpec]() {
					goto l0
				}
				if !_rules[ruleDot]() {
					goto l0
				}
				if !_rules[ruleFilter]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleDot]() {
						goto l3
					}
					if !_rules[ruleFilter]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if !_rules[ruleDot]() {
					goto l0
				}
				if !_rules[ruleMetrics]() {
					goto l0
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l0
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 TypeSpec <- <(<RESOURCE> Action0 LP IdentifierList RP Action1)> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				{
					position7 := position
					if !_rules[ruleRESOURCE]() {
						goto l5
					}
					add(rulePegText, position7)
				}
				if !_rules[ruleAction0]() {
					goto l5
				}
				if !_rules[ruleLP]() {
					goto l5
				}
				if !_rules[ruleIdentifierList]() {
					goto l5
				}
				if !_rules[ruleRP]() {
					goto l5
				}
				if !_rules[ruleAction1]() {
					goto l5
				}
				add(ruleTypeSpec, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 2 Filter <- <((NAME Action2 LP LiteralStringList RP Action3) / (REGEX Action4 LP LiteralStringList RP Action5) / (WHERE_HEALTH Action6 LP IdentifierList RP Action7) / (WHERE_STATUS Action8 LP IdentifierList RP Action9) / (WHERE_STATE Action10 LP IdentifierList RP Action11) / (WHERE_METRICS Action12 LP Conditions RP Action13) / (WHERE_PROPERTIES Action14 LP Conditions RP Action15))> */
		func() bool {
			position8, tokenIndex8 := position, tokenIndex
			{
				position9 := position
				{
					position10, tokenIndex10 := position, tokenIndex
					if !_rules[ruleNAME]() {
						goto l11
					}
					if !_rules[ruleAction2]() {
						goto l11
					}
					if !_rules[ruleLP]() {
						goto l11
					}
					if !_rules[ruleLiteralStringList]() {
						goto l11
					}
					if !_rules[ruleRP]() {
						goto l11
					}
					if !_rules[ruleAction3]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[ruleREGEX]() {
						goto l12
					}
					if !_rules[ruleAction4]() {
						goto l12
					}
					if !_rules[ruleLP]() {
						goto l12
					}
					if !_rules[ruleLiteralStringList]() {
						goto l12
					}
					if !_rules[ruleRP]() {
						goto l12
					}
					if !_rules[ruleAction5]() {
						goto l12
					}
					goto l10
				l12:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[ruleWHERE_HEALTH]() {
						goto l13
					}
					if !_rules[ruleAction6]() {
						goto l13
					}
					if !_rules[ruleLP]() {
						goto l13
					}
					if !_rules[ruleIdentifierList]() {
						goto l13
					}
					if !_rules[ruleRP]() {
						goto l13
					}
					if !_rules[ruleAction7]() {
						goto l13
					}
					goto l10
				l13:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[ruleWHERE_STATUS]() {
						goto l14
					}
					if !_rules[ruleAction8]() {
						goto l14
					}
					if !_rules[ruleLP]() {
						goto l14
					}
					if !_rules[ruleIdentifierList]() {
						goto l14
					}
					if !_rules[ruleRP]() {
						goto l14
					}
					if !_rules[ruleAction9]() {
						goto l14
					}
					goto l10
				l14:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[ruleWHERE_STATE]() {
						goto l15
					}
					if !_rules[ruleAction10]() {
						goto l15
					}
					if !_rules[ruleLP]() {
						goto l15
					}
					if !_rules[ruleIdentifierList]() {
						goto l15
					}
					if !_rules[ruleRP]() {
						goto l15
					}
					if !_rules[ruleAction11]() {
						goto l15
					}
					goto l10
				l15:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[ruleWHERE_METRICS]() {
						goto l16
					}
					if !_rules[ruleAction12]() {
						goto l16
					}
					if !_rules[ruleLP]() {
						goto l16
					}
					if !_rules[ruleConditions]() {
						goto l16
					}
					if !_rules[ruleRP]() {
						goto l16
					}
					if !_rules[ruleAction13]() {
						goto l16
					}
					goto l10
				l16:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[ruleWHERE_PROPERTIES]() {
						goto l8
					}
					if !_rules[ruleAction14]() {
						goto l8
					}
					if !_rules[ruleLP]() {
						goto l8
					}
					if !_rules[ruleConditions]() {
						goto l8
					}
					if !_rules[ruleRP]() {
						goto l8
					}
					if !_rules[ruleAction15]() {
						goto l8
					}
				}
			l10:
				add(ruleFilter, position9)
			}
			return true
		l8:
			position, tokenIndex = position8, tokenIndex8
			return false
		},
		/* 3 Conditions <- <(Term Action16 (_ <Conjunctive> _ Action17 Term Action18)*)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				if !_rules[ruleTerm]() {
					goto l17
				}
				if !_rules[ruleAction16]() {
					goto l17
				}
			l19:
				{
					position20, tokenIndex20 := position, tokenIndex
					if !_rules[rule_]() {
						goto l20
					}
					{
						position21 := position
						if !_rules[ruleConjunctive]() {
							goto l20
						}
						add(rulePegText, position21)
					}
					if !_rules[rule_]() {
						goto l20
					}
					if !_rules[ruleAction17]() {
						goto l20
					}
					if !_rules[ruleTerm]() {
						goto l20
					}
					if !_rules[ruleAction18]() {
						goto l20
					}
					goto l19
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
				add(ruleConditions, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 4 Term <- <(Function / InfixExpression)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[ruleFunction]() {
						goto l25
					}
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[ruleInfixExpression]() {
						goto l22
					}
				}
			l24:
				add(ruleTerm, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 Conjunctive <- <(AND / OR)> */
		func() bool {
			position26, tokenIndex26 := position, tokenIndex
			{
				position27 := position
				{
					position28, tokenIndex28 := position, tokenIndex
					if !_rules[ruleAND]() {
						goto l29
					}
					goto l28
				l29:
					position, tokenIndex = position28, tokenIndex28
					if !_rules[ruleOR]() {
						goto l26
					}
				}
			l28:
				add(ruleConjunctive, position27)
			}
			return true
		l26:
			position, tokenIndex = position26, tokenIndex26
			return false
		},
		/* 6 Function <- <(UnaryFunction / BinaryFunction)> */
		func() bool {
			position30, tokenIndex30 := position, tokenIndex
			{
				position31 := position
				{
					position32, tokenIndex32 := position, tokenIndex
					if !_rules[ruleUnaryFunction]() {
						goto l33
					}
					goto l32
				l33:
					position, tokenIndex = position32, tokenIndex32
					if !_rules[ruleBinaryFunction]() {
						goto l30
					}
				}
			l32:
				add(ruleFunction, position31)
			}
			return true
		l30:
			position, tokenIndex = position30, tokenIndex30
			return false
		},
		/* 7 UnaryFunction <- <(<UnaryFunctionName> Action19 LP <Identifier> Action20 RP)> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				{
					position36 := position
					if !_rules[ruleUnaryFunctionName]() {
						goto l34
					}
					add(rulePegText, position36)
				}
				if !_rules[ruleAction19]() {
					goto l34
				}
				if !_rules[ruleLP]() {
					goto l34
				}
				{
					position37 := position
					if !_rules[ruleIdentifier]() {
						goto l34
					}
					add(rulePegText, position37)
				}
				if !_rules[ruleAction20]() {
					goto l34
				}
				if !_rules[ruleRP]() {
					goto l34
				}
				add(ruleUnaryFunction, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 8 UnaryFunctionName <- <(EXISTS / NOT_EXISTS)> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				{
					position40, tokenIndex40 := position, tokenIndex
					if !_rules[ruleEXISTS]() {
						goto l41
					}
					goto l40
				l41:
					position, tokenIndex = position40, tokenIndex40
					if !_rules[ruleNOT_EXISTS]() {
						goto l38
					}
				}
			l40:
				add(ruleUnaryFunctionName, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 9 BinaryFunctionName <- <(CONTAINS / STARTS_WITH / ENDS_WITH / REGEX / NOT_CONTAINS / NOT_STARTS_WITH / NOT_ENDS_WITH / NOT_REGEX / IN / NOT_IN)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				{
					position44, tokenIndex44 := position, tokenIndex
					if !_rules[ruleCONTAINS]() {
						goto l45
					}
					goto l44
				l45:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleSTARTS_WITH]() {
						goto l46
					}
					goto l44
				l46:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleENDS_WITH]() {
						goto l47
					}
					goto l44
				l47:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleREGEX]() {
						goto l48
					}
					goto l44
				l48:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleNOT_CONTAINS]() {
						goto l49
					}
					goto l44
				l49:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleNOT_STARTS_WITH]() {
						goto l50
					}
					goto l44
				l50:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleNOT_ENDS_WITH]() {
						goto l51
					}
					goto l44
				l51:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleNOT_REGEX]() {
						goto l52
					}
					goto l44
				l52:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleIN]() {
						goto l53
					}
					goto l44
				l53:
					position, tokenIndex = position44, tokenIndex44
					if !_rules[ruleNOT_IN]() {
						goto l42
					}
				}
			l44:
				add(ruleBinaryFunctionName, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 10 Operator <- <(EQ / NE / LTE / LT / GTE / GT)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				{
					position56, tokenIndex56 := position, tokenIndex
					if !_rules[ruleEQ]() {
						goto l57
					}
					goto l56
				l57:
					position, tokenIndex = position56, tokenIndex56
					if !_rules[ruleNE]() {
						goto l58
					}
					goto l56
				l58:
					position, tokenIndex = position56, tokenIndex56
					if !_rules[ruleLTE]() {
						goto l59
					}
					goto l56
				l59:
					position, tokenIndex = position56, tokenIndex56
					if !_rules[ruleLT]() {
						goto l60
					}
					goto l56
				l60:
					position, tokenIndex = position56, tokenIndex56
					if !_rules[ruleGTE]() {
						goto l61
					}
					goto l56
				l61:
					position, tokenIndex = position56, tokenIndex56
					if !_rules[ruleGT]() {
						goto l54
					}
				}
			l56:
				add(ruleOperator, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 11 BinaryFunction <- <(<BinaryFunctionName> Action21 LP <Identifier> Action22 Comma LiteralConditionValue RP)> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				{
					position64 := position
					if !_rules[ruleBinaryFunctionName]() {
						goto l62
					}
					add(rulePegText, position64)
				}
				if !_rules[ruleAction21]() {
					goto l62
				}
				if !_rules[ruleLP]() {
					goto l62
				}
				{
					position65 := position
					if !_rules[ruleIdentifier]() {
						goto l62
					}
					add(rulePegText, position65)
				}
				if !_rules[ruleAction22]() {
					goto l62
				}
				if !_rules[ruleComma]() {
					goto l62
				}
				if !_rules[ruleLiteralConditionValue]() {
					goto l62
				}
				if !_rules[ruleRP]() {
					goto l62
				}
				add(ruleBinaryFunction, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 12 InfixExpression <- <(<Identifier> Action23 _ <Operator> Action24 _ LiteralConditionValue)> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				{
					position68 := position
					if !_rules[ruleIdentifier]() {
						goto l66
					}
					add(rulePegText, position68)
				}
				if !_rules[ruleAction23]() {
					goto l66
				}
				if !_rules[rule_]() {
					goto l66
				}
				{
					position69 := position
					if !_rules[ruleOperator]() {
						goto l66
					}
					add(rulePegText, position69)
				}
				if !_rules[ruleAction24]() {
					goto l66
				}
				if !_rules[rule_]() {
					goto l66
				}
				if !_rules[ruleLiteralConditionValue]() {
					goto l66
				}
				add(ruleInfixExpression, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 13 LiteralConditionValue <- <((<LiteralString> Action25) / (<Float> Action26))> */
		func() bool {
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					{
						position74 := position
						if !_rules[ruleLiteralString]() {
							goto l73
						}
						add(rulePegText, position74)
					}
					if !_rules[ruleAction25]() {
						goto l73
					}
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					{
						position75 := position
						if !_rules[ruleFloat]() {
							goto l70
						}
						add(rulePegText, position75)
					}
					if !_rules[ruleAction26]() {
						goto l70
					}
				}
			l72:
				add(ruleLiteralConditionValue, position71)
			}
			return true
		l70:
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 14 Metrics <- <(METRICS Action27 LP IdentifierList RP Action28)> */
		func() bool {
			position76, tokenIndex76 := position, tokenIndex
			{
				position77 := position
				if !_rules[ruleMETRICS]() {
					goto l76
				}
				if !_rules[ruleAction27]() {
					goto l76
				}
				if !_rules[ruleLP]() {
					goto l76
				}
				if !_rules[ruleIdentifierList]() {
					goto l76
				}
				if !_rules[ruleRP]() {
					goto l76
				}
				if !_rules[ruleAction28]() {
					goto l76
				}
				add(ruleMetrics, position77)
			}
			return true
		l76:
			position, tokenIndex = position76, tokenIndex76
			return false
		},
		/* 15 Identifier <- <((IDStartCharacter IDCharacter*) / (BackTick <IDQuotedCharacter+> BackTick))> */
		func() bool {
			position78, tokenIndex78 := position, tokenIndex
			{
				position79 := position
				{
					position80, tokenIndex80 := position, tokenIndex
					if !_rules[ruleIDStartCharacter]() {
						goto l81
					}
				l82:
					{
						position83, tokenIndex83 := position, tokenIndex
						if !_rules[ruleIDCharacter]() {
							goto l83
						}
						goto l82
					l83:
						position, tokenIndex = position83, tokenIndex83
					}
					goto l80
				l81:
					position, tokenIndex = position80, tokenIndex80
					if !_rules[ruleBackTick]() {
						goto l78
					}
					{
						position84 := position
						if !_rules[ruleIDQuotedCharacter]() {
							goto l78
						}
					l85:
						{
							position86, tokenIndex86 := position, tokenIndex
							if !_rules[ruleIDQuotedCharacter]() {
								goto l86
							}
							goto l85
						l86:
							position, tokenIndex = position86, tokenIndex86
						}
						add(rulePegText, position84)
					}
					if !_rules[ruleBackTick]() {
						goto l78
					}
				}
			l80:
				add(ruleIdentifier, position79)
			}
			return true
		l78:
			position, tokenIndex = position78, tokenIndex78
			return false
		},
		/* 16 IdentifierList <- <(<Identifier> Action29 (Comma <Identifier> Action30)*)> */
		func() bool {
			position87, tokenIndex87 := position, tokenIndex
			{
				position88 := position
				{
					position89 := position
					if !_rules[ruleIdentifier]() {
						goto l87
					}
					add(rulePegText, position89)
				}
				if !_rules[ruleAction29]() {
					goto l87
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleComma]() {
						goto l91
					}
					{
						position92 := position
						if !_rules[ruleIdentifier]() {
							goto l91
						}
						add(rulePegText, position92)
					}
					if !_rules[ruleAction30]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				add(ruleIdentifierList, position88)
			}
			return true
		l87:
			position, tokenIndex = position87, tokenIndex87
			return false
		},
		/* 17 LiteralStringList <- <(<LiteralString> Action31 (Comma <LiteralString> Action32)*)> */
		func() bool {
			position93, tokenIndex93 := position, tokenIndex
			{
				position94 := position
				{
					position95 := position
					if !_rules[ruleLiteralString]() {
						goto l93
					}
					add(rulePegText, position95)
				}
				if !_rules[ruleAction31]() {
					goto l93
				}
			l96:
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[ruleComma]() {
						goto l97
					}
					{
						position98 := position
						if !_rules[ruleLiteralString]() {
							goto l97
						}
						add(rulePegText, position98)
					}
					if !_rules[ruleAction32]() {
						goto l97
					}
					goto l96
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
				add(ruleLiteralStringList, position94)
			}
			return true
		l93:
			position, tokenIndex = position93, tokenIndex93
			return false
		},
		/* 18 IDStartCharacter <- <([A-Z] / [a-z] / '_')> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				{
					position101, tokenIndex101 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l102
					}
					position++
					goto l101
				l102:
					position, tokenIndex = position101, tokenIndex101
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l103
					}
					position++
					goto l101
				l103:
					position, tokenIndex = position101, tokenIndex101
					if buffer[position] != rune('_') {
						goto l99
					}
					position++
				}
			l101:
				add(ruleIDStartCharacter, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 19 IDCharacter <- <([A-Z] / [a-z] / [0-9] / '_' / ':' / '|' / '.' / '-')> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				{
					position106, tokenIndex106 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l107
					}
					position++
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l108
					}
					position++
					goto l106
				l108:
					position, tokenIndex = position106, tokenIndex106
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l109
					}
					position++
					goto l106
				l109:
					position, tokenIndex = position106, tokenIndex106
					if buffer[position] != rune('_') {
						goto l110
					}
					position++
					goto l106
				l110:
					position, tokenIndex = position106, tokenIndex106
					if buffer[position] != rune(':') {
						goto l111
					}
					position++
					goto l106
				l111:
					position, tokenIndex = position106, tokenIndex106
					if buffer[position] != rune('|') {
						goto l112
					}
					position++
					goto l106
				l112:
					position, tokenIndex = position106, tokenIndex106
					if buffer[position] != rune('.') {
						goto l113
					}
					position++
					goto l106
				l113:
					position, tokenIndex = position106, tokenIndex106
					if buffer[position] != rune('-') {
						goto l104
					}
					position++
				}
			l106:
				add(ruleIDCharacter, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 20 IDQuotedCharacter <- <([A-Z] / [a-z] / [0-9] / '_' / ':' / '|' / '.' / '-' / ' ' / ',' / '$')> */
		func() bool {
			position114, tokenIndex114 := position, tokenIndex
			{
				position115 := position
				{
					position116, tokenIndex116 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l117
					}
					position++
					goto l116
				l117:
					position, tokenIndex = position116, tokenIndex116
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l118
					}
					position++
					goto l116
				l118:
					position, tokenIndex = position116, tokenIndex116
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l119
					}
					position++
					goto l116
				l119:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune('_') {
						goto l120
					}
					position++
					goto l116
				l120:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune(':') {
						goto l121
					}
					position++
					goto l116
				l121:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune('|') {
						goto l122
					}
					position++
					goto l116
				l122:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune('.') {
						goto l123
					}
					position++
					goto l116
				l123:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune('-') {
						goto l124
					}
					position++
					goto l116
				l124:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune(' ') {
						goto l125
					}
					position++
					goto l116
				l125:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune(',') {
						goto l126
					}
					position++
					goto l116
				l126:
					position, tokenIndex = position116, tokenIndex116
					if buffer[position] != rune('$') {
						goto l114
					}
					position++
				}
			l116:
				add(ruleIDQuotedCharacter, position115)
			}
			return true
		l114:
			position, tokenIndex = position114, tokenIndex114
			return false
		},
		/* 21 LiteralString <- <(Quote <LiteralChar*> Action33 Quote)> */
		func() bool {
			position127, tokenIndex127 := position, tokenIndex
			{
				position128 := position
				if !_rules[ruleQuote]() {
					goto l127
				}
				{
					position129 := position
				l130:
					{
						position131, tokenIndex131 := position, tokenIndex
						if !_rules[ruleLiteralChar]() {
							goto l131
						}
						goto l130
					l131:
						position, tokenIndex = position131, tokenIndex131
					}
					add(rulePegText, position129)
				}
				if !_rules[ruleAction33]() {
					goto l127
				}
				if !_rules[ruleQuote]() {
					goto l127
				}
				add(ruleLiteralString, position128)
			}
			return true
		l127:
			position, tokenIndex = position127, tokenIndex127
			return false
		},
		/* 22 METRICS <- <('m' 'e' 't' 'r' 'i' 'c' 's')> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				if buffer[position] != rune('m') {
					goto l132
				}
				position++
				if buffer[position] != rune('e') {
					goto l132
				}
				position++
				if buffer[position] != rune('t') {
					goto l132
				}
				position++
				if buffer[position] != rune('r') {
					goto l132
				}
				position++
				if buffer[position] != rune('i') {
					goto l132
				}
				position++
				if buffer[position] != rune('c') {
					goto l132
				}
				position++
				if buffer[position] != rune('s') {
					goto l132
				}
				position++
				add(ruleMETRICS, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 23 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				if buffer[position] != rune('n') {
					goto l134
				}
				position++
				if buffer[position] != rune('a') {
					goto l134
				}
				position++
				if buffer[position] != rune('m') {
					goto l134
				}
				position++
				if buffer[position] != rune('e') {
					goto l134
				}
				position++
				add(ruleNAME, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 24 REGEX <- <('r' 'e' 'g' 'e' 'x')> */
		func() bool {
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				if buffer[position] != rune('r') {
					goto l136
				}
				position++
				if buffer[position] != rune('e') {
					goto l136
				}
				position++
				if buffer[position] != rune('g') {
					goto l136
				}
				position++
				if buffer[position] != rune('e') {
					goto l136
				}
				position++
				if buffer[position] != rune('x') {
					goto l136
				}
				position++
				add(ruleREGEX, position137)
			}
			return true
		l136:
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		/* 25 RESOURCE <- <('r' 'e' 's' 'o' 'u' 'r' 'c' 'e')> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				if buffer[position] != rune('r') {
					goto l138
				}
				position++
				if buffer[position] != rune('e') {
					goto l138
				}
				position++
				if buffer[position] != rune('s') {
					goto l138
				}
				position++
				if buffer[position] != rune('o') {
					goto l138
				}
				position++
				if buffer[position] != rune('u') {
					goto l138
				}
				position++
				if buffer[position] != rune('r') {
					goto l138
				}
				position++
				if buffer[position] != rune('c') {
					goto l138
				}
				position++
				if buffer[position] != rune('e') {
					goto l138
				}
				position++
				add(ruleRESOURCE, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 26 WHERE_HEALTH <- <('w' 'h' 'e' 'r' 'e' 'H' 'e' 'a' 'l' 't' 'h')> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				if buffer[position] != rune('w') {
					goto l140
				}
				position++
				if buffer[position] != rune('h') {
					goto l140
				}
				position++
				if buffer[position] != rune('e') {
					goto l140
				}
				position++
				if buffer[position] != rune('r') {
					goto l140
				}
				position++
				if buffer[position] != rune('e') {
					goto l140
				}
				position++
				if buffer[position] != rune('H') {
					goto l140
				}
				position++
				if buffer[position] != rune('e') {
					goto l140
				}
				position++
				if buffer[position] != rune('a') {
					goto l140
				}
				position++
				if buffer[position] != rune('l') {
					goto l140
				}
				position++
				if buffer[position] != rune('t') {
					goto l140
				}
				position++
				if buffer[position] != rune('h') {
					goto l140
				}
				position++
				add(ruleWHERE_HEALTH, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 27 WHERE_STATE <- <('w' 'h' 'e' 'r' 'e' 'S' 't' 'a' 't' 'e')> */
		func() bool {
			position142, tokenIndex142 := position, tokenIndex
			{
				position143 := position
				if buffer[position] != rune('w') {
					goto l142
				}
				position++
				if buffer[position] != rune('h') {
					goto l142
				}
				position++
				if buffer[position] != rune('e') {
					goto l142
				}
				position++
				if buffer[position] != rune('r') {
					goto l142
				}
				position++
				if buffer[position] != rune('e') {
					goto l142
				}
				position++
				if buffer[position] != rune('S') {
					goto l142
				}
				position++
				if buffer[position] != rune('t') {
					goto l142
				}
				position++
				if buffer[position] != rune('a') {
					goto l142
				}
				position++
				if buffer[position] != rune('t') {
					goto l142
				}
				position++
				if buffer[position] != rune('e') {
					goto l142
				}
				position++
				add(ruleWHERE_STATE, position143)
			}
			return true
		l142:
			position, tokenIndex = position142, tokenIndex142
			return false
		},
		/* 28 WHERE_STATUS <- <('w' 'h' 'e' 'r' 'e' 'S' 't' 'a' 't' 'u' 's')> */
		func() bool {
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
				if buffer[position] != rune('w') {
					goto l144
				}
				position++
				if buffer[position] != rune('h') {
					goto l144
				}
				position++
				if buffer[position] != rune('e') {
					goto l144
				}
				position++
				if buffer[position] != rune('r') {
					goto l144
				}
				position++
				if buffer[position] != rune('e') {
					goto l144
				}
				position++
				if buffer[position] != rune('S') {
					goto l144
				}
				position++
				if buffer[position] != rune('t') {
					goto l144
				}
				position++
				if buffer[position] != rune('a') {
					goto l144
				}
				position++
				if buffer[position] != rune('t') {
					goto l144
				}
				position++
				if buffer[position] != rune('u') {
					goto l144
				}
				position++
				if buffer[position] != rune('s') {
					goto l144
				}
				position++
				add(ruleWHERE_STATUS, position145)
			}
			return true
		l144:
			position, tokenIndex = position144, tokenIndex144
			return false
		},
		/* 29 WHERE_METRICS <- <('w' 'h' 'e' 'r' 'e' 'M' 'e' 't' 'r' 'i' 'c' 's')> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				if buffer[position] != rune('w') {
					goto l146
				}
				position++
				if buffer[position] != rune('h') {
					goto l146
				}
				position++
				if buffer[position] != rune('e') {
					goto l146
				}
				position++
				if buffer[position] != rune('r') {
					goto l146
				}
				position++
				if buffer[position] != rune('e') {
					goto l146
				}
				position++
				if buffer[position] != rune('M') {
					goto l146
				}
				position++
				if buffer[position] != rune('e') {
					goto l146
				}
				position++
				if buffer[position] != rune('t') {
					goto l146
				}
				position++
				if buffer[position] != rune('r') {
					goto l146
				}
				position++
				if buffer[position] != rune('i') {
					goto l146
				}
				position++
				if buffer[position] != rune('c') {
					goto l146
				}
				position++
				if buffer[position] != rune('s') {
					goto l146
				}
				position++
				add(ruleWHERE_METRICS, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 30 WHERE_PROPERTIES <- <('w' 'h' 'e' 'r' 'e' 'P' 'r' 'o' 'p' 'e' 'r' 't' 'i' 'e' 's')> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				if buffer[position] != rune('w') {
					goto l148
				}
				position++
				if buffer[position] != rune('h') {
					goto l148
				}
				position++
				if buffer[position] != rune('e') {
					goto l148
				}
				position++
				if buffer[position] != rune('r') {
					goto l148
				}
				position++
				if buffer[position] != rune('e') {
					goto l148
				}
				position++
				if buffer[position] != rune('P') {
					goto l148
				}
				position++
				if buffer[position] != rune('r') {
					goto l148
				}
				position++
				if buffer[position] != rune('o') {
					goto l148
				}
				position++
				if buffer[position] != rune('p') {
					goto l148
				}
				position++
				if buffer[position] != rune('e') {
					goto l148
				}
				position++
				if buffer[position] != rune('r') {
					goto l148
				}
				position++
				if buffer[position] != rune('t') {
					goto l148
				}
				position++
				if buffer[position] != rune('i') {
					goto l148
				}
				position++
				if buffer[position] != rune('e') {
					goto l148
				}
				position++
				if buffer[position] != rune('s') {
					goto l148
				}
				position++
				add(ruleWHERE_PROPERTIES, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 31 AND <- <('a' 'n' 'd')> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				if buffer[position] != rune('a') {
					goto l150
				}
				position++
				if buffer[position] != rune('n') {
					goto l150
				}
				position++
				if buffer[position] != rune('d') {
					goto l150
				}
				position++
				add(ruleAND, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 32 OR <- <('o' 'r')> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if buffer[position] != rune('o') {
					goto l152
				}
				position++
				if buffer[position] != rune('r') {
					goto l152
				}
				position++
				add(ruleOR, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 33 IN <- <('i' 'n')> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if buffer[position] != rune('i') {
					goto l154
				}
				position++
				if buffer[position] != rune('n') {
					goto l154
				}
				position++
				add(ruleIN, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 34 NOT_IN <- <('n' 'o' 't' ' ' 'i' 'n')> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if buffer[position] != rune('n') {
					goto l156
				}
				position++
				if buffer[position] != rune('o') {
					goto l156
				}
				position++
				if buffer[position] != rune('t') {
					goto l156
				}
				position++
				if buffer[position] != rune(' ') {
					goto l156
				}
				position++
				if buffer[position] != rune('i') {
					goto l156
				}
				position++
				if buffer[position] != rune('n') {
					goto l156
				}
				position++
				add(ruleNOT_IN, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 35 CONTAINS <- <('c' 'o' 'n' 't' 'a' 'i' 'n' 's')> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				if buffer[position] != rune('c') {
					goto l158
				}
				position++
				if buffer[position] != rune('o') {
					goto l158
				}
				position++
				if buffer[position] != rune('n') {
					goto l158
				}
				position++
				if buffer[position] != rune('t') {
					goto l158
				}
				position++
				if buffer[position] != rune('a') {
					goto l158
				}
				position++
				if buffer[position] != rune('i') {
					goto l158
				}
				position++
				if buffer[position] != rune('n') {
					goto l158
				}
				position++
				if buffer[position] != rune('s') {
					goto l158
				}
				position++
				add(ruleCONTAINS, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 36 STARTS_WITH <- <('s' 't' 'a' 'r' 't' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if buffer[position] != rune('s') {
					goto l160
				}
				position++
				if buffer[position] != rune('t') {
					goto l160
				}
				position++
				if buffer[position] != rune('a') {
					goto l160
				}
				position++
				if buffer[position] != rune('r') {
					goto l160
				}
				position++
				if buffer[position] != rune('t') {
					goto l160
				}
				position++
				if buffer[position] != rune('s') {
					goto l160
				}
				position++
				if buffer[position] != rune('_') {
					goto l160
				}
				position++
				if buffer[position] != rune('w') {
					goto l160
				}
				position++
				if buffer[position] != rune('i') {
					goto l160
				}
				position++
				if buffer[position] != rune('t') {
					goto l160
				}
				position++
				if buffer[position] != rune('h') {
					goto l160
				}
				position++
				add(ruleSTARTS_WITH, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 37 ENDS_WITH <- <('e' 'n' 'd' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				if buffer[position] != rune('e') {
					goto l162
				}
				position++
				if buffer[position] != rune('n') {
					goto l162
				}
				position++
				if buffer[position] != rune('d') {
					goto l162
				}
				position++
				if buffer[position] != rune('s') {
					goto l162
				}
				position++
				if buffer[position] != rune('_') {
					goto l162
				}
				position++
				if buffer[position] != rune('w') {
					goto l162
				}
				position++
				if buffer[position] != rune('i') {
					goto l162
				}
				position++
				if buffer[position] != rune('t') {
					goto l162
				}
				position++
				if buffer[position] != rune('h') {
					goto l162
				}
				position++
				add(ruleENDS_WITH, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 38 NOT_STARTS_WITH <- <('n' 'o' 't' ' ' 's' 't' 'a' 'r' 't' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				if buffer[position] != rune('n') {
					goto l164
				}
				position++
				if buffer[position] != rune('o') {
					goto l164
				}
				position++
				if buffer[position] != rune('t') {
					goto l164
				}
				position++
				if buffer[position] != rune(' ') {
					goto l164
				}
				position++
				if buffer[position] != rune('s') {
					goto l164
				}
				position++
				if buffer[position] != rune('t') {
					goto l164
				}
				position++
				if buffer[position] != rune('a') {
					goto l164
				}
				position++
				if buffer[position] != rune('r') {
					goto l164
				}
				position++
				if buffer[position] != rune('t') {
					goto l164
				}
				position++
				if buffer[position] != rune('s') {
					goto l164
				}
				position++
				if buffer[position] != rune('_') {
					goto l164
				}
				position++
				if buffer[position] != rune('w') {
					goto l164
				}
				position++
				if buffer[position] != rune('i') {
					goto l164
				}
				position++
				if buffer[position] != rune('t') {
					goto l164
				}
				position++
				if buffer[position] != rune('h') {
					goto l164
				}
				position++
				add(ruleNOT_STARTS_WITH, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 39 NOT_ENDS_WITH <- <('n' 'o' 't' ' ' 'e' 'n' 'd' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				if buffer[position] != rune('n') {
					goto l166
				}
				position++
				if buffer[position] != rune('o') {
					goto l166
				}
				position++
				if buffer[position] != rune('t') {
					goto l166
				}
				position++
				if buffer[position] != rune(' ') {
					goto l166
				}
				position++
				if buffer[position] != rune('e') {
					goto l166
				}
				position++
				if buffer[position] != rune('n') {
					goto l166
				}
				position++
				if buffer[position] != rune('d') {
					goto l166
				}
				position++
				if buffer[position] != rune('s') {
					goto l166
				}
				position++
				if buffer[position] != rune('_') {
					goto l166
				}
				position++
				if buffer[position] != rune('w') {
					goto l166
				}
				position++
				if buffer[position] != rune('i') {
					goto l166
				}
				position++
				if buffer[position] != rune('t') {
					goto l166
				}
				position++
				if buffer[position] != rune('h') {
					goto l166
				}
				position++
				add(ruleNOT_ENDS_WITH, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 40 NOT_CONTAINS <- <('n' 'o' 't' ' ' 'c' 'o' 'n' 't' 'a' 'i' 'n' 's')> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				if buffer[position] != rune('n') {
					goto l168
				}
				position++
				if buffer[position] != rune('o') {
					goto l168
				}
				position++
				if buffer[position] != rune('t') {
					goto l168
				}
				position++
				if buffer[position] != rune(' ') {
					goto l168
				}
				position++
				if buffer[position] != rune('c') {
					goto l168
				}
				position++
				if buffer[position] != rune('o') {
					goto l168
				}
				position++
				if buffer[position] != rune('n') {
					goto l168
				}
				position++
				if buffer[position] != rune('t') {
					goto l168
				}
				position++
				if buffer[position] != rune('a') {
					goto l168
				}
				position++
				if buffer[position] != rune('i') {
					goto l168
				}
				position++
				if buffer[position] != rune('n') {
					goto l168
				}
				position++
				if buffer[position] != rune('s') {
					goto l168
				}
				position++
				add(ruleNOT_CONTAINS, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 41 NOT_REGEX <- <('n' 'o' 't' ' ' 'r' 'e' 'g' 'e' 'x')> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune('n') {
					goto l170
				}
				position++
				if buffer[position] != rune('o') {
					goto l170
				}
				position++
				if buffer[position] != rune('t') {
					goto l170
				}
				position++
				if buffer[position] != rune(' ') {
					goto l170
				}
				position++
				if buffer[position] != rune('r') {
					goto l170
				}
				position++
				if buffer[position] != rune('e') {
					goto l170
				}
				position++
				if buffer[position] != rune('g') {
					goto l170
				}
				position++
				if buffer[position] != rune('e') {
					goto l170
				}
				position++
				if buffer[position] != rune('x') {
					goto l170
				}
				position++
				add(ruleNOT_REGEX, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 42 EXISTS <- <('e' 'x' 'i' 's' 't' 's')> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				if buffer[position] != rune('e') {
					goto l172
				}
				position++
				if buffer[position] != rune('x') {
					goto l172
				}
				position++
				if buffer[position] != rune('i') {
					goto l172
				}
				position++
				if buffer[position] != rune('s') {
					goto l172
				}
				position++
				if buffer[position] != rune('t') {
					goto l172
				}
				position++
				if buffer[position] != rune('s') {
					goto l172
				}
				position++
				add(ruleEXISTS, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 43 NOT_EXISTS <- <('n' 'o' 't' ' ' 'e' 'x' 'i' 's' 't' 's')> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune('n') {
					goto l174
				}
				position++
				if buffer[position] != rune('o') {
					goto l174
				}
				position++
				if buffer[position] != rune('t') {
					goto l174
				}
				position++
				if buffer[position] != rune(' ') {
					goto l174
				}
				position++
				if buffer[position] != rune('e') {
					goto l174
				}
				position++
				if buffer[position] != rune('x') {
					goto l174
				}
				position++
				if buffer[position] != rune('i') {
					goto l174
				}
				position++
				if buffer[position] != rune('s') {
					goto l174
				}
				position++
				if buffer[position] != rune('t') {
					goto l174
				}
				position++
				if buffer[position] != rune('s') {
					goto l174
				}
				position++
				add(ruleNOT_EXISTS, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 44 GT <- <'>'> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if buffer[position] != rune('>') {
					goto l176
				}
				position++
				add(ruleGT, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 45 LT <- <'<'> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				if buffer[position] != rune('<') {
					goto l178
				}
				position++
				add(ruleLT, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 46 GTE <- <('>' '=')> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if buffer[position] != rune('>') {
					goto l180
				}
				position++
				if buffer[position] != rune('=') {
					goto l180
				}
				position++
				add(ruleGTE, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 47 LTE <- <('<' '=')> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				if buffer[position] != rune('<') {
					goto l182
				}
				position++
				if buffer[position] != rune('=') {
					goto l182
				}
				position++
				add(ruleLTE, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 48 EQ <- <'='> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if buffer[position] != rune('=') {
					goto l184
				}
				position++
				add(ruleEQ, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 49 NE <- <('!' '=')> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune('!') {
					goto l186
				}
				position++
				if buffer[position] != rune('=') {
					goto l186
				}
				position++
				add(ruleNE, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 50 Quote <- <'"'> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune('"') {
					goto l188
				}
				position++
				add(ruleQuote, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 51 Comma <- <(_ ',' _)> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if !_rules[rule_]() {
					goto l190
				}
				if buffer[position] != rune(',') {
					goto l190
				}
				position++
				if !_rules[rule_]() {
					goto l190
				}
				add(ruleComma, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 52 BackTick <- <'`'> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if buffer[position] != rune('`') {
					goto l192
				}
				position++
				add(ruleBackTick, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 53 Dot <- <(_ '.' _)> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				if !_rules[rule_]() {
					goto l194
				}
				if buffer[position] != rune('.') {
					goto l194
				}
				position++
				if !_rules[rule_]() {
					goto l194
				}
				add(ruleDot, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 54 LP <- <(_ '(' _)> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				if !_rules[rule_]() {
					goto l196
				}
				if buffer[position] != rune('(') {
					goto l196
				}
				position++
				if !_rules[rule_]() {
					goto l196
				}
				add(ruleLP, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 55 RP <- <(_ ')' _)> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				if !_rules[rule_]() {
					goto l198
				}
				if buffer[position] != rune(')') {
					goto l198
				}
				position++
				if !_rules[rule_]() {
					goto l198
				}
				add(ruleRP, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 56 _ <- <(' ' / '\t' / '\n' / '\r')*> */
		func() bool {
			{
				position201 := position
			l202:
				{
					position203, tokenIndex203 := position, tokenIndex
					{
						position204, tokenIndex204 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l205
						}
						position++
						goto l204
					l205:
						position, tokenIndex = position204, tokenIndex204
						if buffer[position] != rune('\t') {
							goto l206
						}
						position++
						goto l204
					l206:
						position, tokenIndex = position204, tokenIndex204
						if buffer[position] != rune('\n') {
							goto l207
						}
						position++
						goto l204
					l207:
						position, tokenIndex = position204, tokenIndex204
						if buffer[position] != rune('\r') {
							goto l203
						}
						position++
					}
				l204:
					goto l202
				l203:
					position, tokenIndex = position203, tokenIndex203
				}
				add(rule_, position201)
			}
			return true
		},
		/* 57 LiteralChar <- <(!('"' / '^' / '\n') .)> */
		func() bool {
			position208, tokenIndex208 := position, tokenIndex
			{
				position209 := position
				{
					position210, tokenIndex210 := position, tokenIndex
					{
						position211, tokenIndex211 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l212
						}
						position++
						goto l211
					l212:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('^') {
							goto l213
						}
						position++
						goto l211
					l213:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('\n') {
							goto l210
						}
						position++
					}
				l211:
					goto l208
				l210:
					position, tokenIndex = position210, tokenIndex210
				}
				if !matchDot() {
					goto l208
				}
				add(ruleLiteralChar, position209)
			}
			return true
		l208:
			position, tokenIndex = position208, tokenIndex208
			return false
		},
		/* 58 Float <- <('-'? [0-9]+ ('.' [0-9]+)? (('E' / 'e') ('+' / '-')? [0-9]+)?)> */
		func() bool {
			position214, tokenIndex214 := position, tokenIndex
			{
				position215 := position
				{
					position216, tokenIndex216 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l216
					}
					position++
					goto l217
				l216:
					position, tokenIndex = position216, tokenIndex216
				}
			l217:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l214
				}
				position++
			l218:
				{
					position219, tokenIndex219 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l219
					}
					position++
					goto l218
				l219:
					position, tokenIndex = position219, tokenIndex219
				}
				{
					position220, tokenIndex220 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l220
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l220
					}
					position++
				l222:
					{
						position223, tokenIndex223 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l223
						}
						position++
						goto l222
					l223:
						position, tokenIndex = position223, tokenIndex223
					}
					goto l221
				l220:
					position, tokenIndex = position220, tokenIndex220
				}
			l221:
				{
					position224, tokenIndex224 := position, tokenIndex
					{
						position226, tokenIndex226 := position, tokenIndex
						if buffer[position] != rune('E') {
							goto l227
						}
						position++
						goto l226
					l227:
						position, tokenIndex = position226, tokenIndex226
						if buffer[position] != rune('e') {
							goto l224
						}
						position++
					}
				l226:
					{
						position228, tokenIndex228 := position, tokenIndex
						{
							position230, tokenIndex230 := position, tokenIndex
							if buffer[position] != rune('+') {
								goto l231
							}
							position++
							goto l230
						l231:
							position, tokenIndex = position230, tokenIndex230
							if buffer[position] != rune('-') {
								goto l228
							}
							position++
						}
					l230:
						goto l229
					l228:
						position, tokenIndex = position228, tokenIndex228
					}
				l229:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l224
					}
					position++
				l232:
					{
						position233, tokenIndex233 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l233
						}
						position++
						goto l232
					l233:
						position, tokenIndex = position233, tokenIndex233
					}
					goto l225
				l224:
					position, tokenIndex = position224, tokenIndex224
				}
			l225:
				add(ruleFloat, position215)
			}
			return true
		l214:
			position, tokenIndex = position214, tokenIndex214
			return false
		},
		nil,
		/* 61 Action0 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 62 Action1 <- <{ p.Query.ResourceKinds = p.currentList }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 63 Action2 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 64 Action3 <- <{ p.Query.Name = p.currentList }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 65 Action4 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 66 Action5 <- <{ p.Query.Regex = p.currentList }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 67 Action6 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 68 Action7 <- <{ p.Query.Health = p.currentList }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 69 Action8 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 70 Action9 <- <{ p.Query.Status = p.currentList }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 71 Action10 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 72 Action11 <- <{ p.Query.State = p.currentList }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 73 Action12 <- <{ p.currentConditions = make([]Condition, 0) }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 74 Action13 <- <{ p.Query.MetricConditions = p.currentConditions }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 75 Action14 <- <{ p.currentConditions = make([]Condition, 0) }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 76 Action15 <- <{ p.Query.PropertyConditions = p.currentConditions }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 77 Action16 <- <{ p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive("")) }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 78 Action17 <- <{ p.currentConjunctive = strings.ToUpper(text) }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 79 Action18 <- <{ p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(p.currentConjunctive)) }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 80 Action19 <- <{ p.currentCondition.Operator = text}> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 81 Action20 <- <{ p.currentCondition.Key = text }> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 82 Action21 <- <{ p.currentCondition.Operator = text}> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 83 Action22 <- <{ p.currentCondition.Key = text}> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 84 Action23 <- <{ p.currentCondition.Key = text }> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 85 Action24 <- <{ p.currentCondition.Operator = text }> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 86 Action25 <- <{ p.currentCondition.StringValue = text }> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 87 Action26 <- <{ p.currentCondition.DoubleValue, _ = strconv.ParseFloat(text, 64) }> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 88 Action27 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 89 Action28 <- <{ p.Query.Metrics = p.currentList}> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 90 Action29 <- <{ p.currentList = append(p.currentList, text)}> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 91 Action30 <- <{ p.currentList = append(p.currentList, text)}> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 92 Action31 <- <{ p.currentList = append(p.currentList, p.currentText )}> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 93 Action32 <- <{ p.currentList = append(p.currentList, p.currentText) }> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 94 Action33 <- <{ p.currentText = text }> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
