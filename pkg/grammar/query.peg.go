package grammar

// Code generated by peg pkg/grammar/query.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleTypeSpec
	ruleFilter
	ruleConditions
	ruleTerm
	ruleConjunctive
	ruleFunction
	ruleUnaryFunction
	ruleUnaryFunctionName
	ruleBinaryFunctionName
	ruleOperator
	ruleBinaryFunction
	ruleInfixExpression
	ruleLiteralConditionValue
	ruleMetrics
	ruleAggregation
	ruleIdentifier
	ruleIdentifierList
	ruleLiteralStringList
	ruleIDStartCharacter
	ruleIDCharacter
	ruleIDQuotedCharacter
	ruleLiteralString
	ruleMETRICS
	ruleNAME
	ruleREGEX
	ruleRESOURCE
	ruleWHERE_HEALTH
	ruleWHERE_STATE
	ruleWHERE_STATUS
	ruleWHERE_METRICS
	ruleWHERE_PROPERTIES
	ruleAND
	ruleOR
	ruleIN
	ruleNOT_IN
	ruleCONTAINS
	ruleSTARTS_WITH
	ruleENDS_WITH
	ruleNOT_STARTS_WITH
	ruleNOT_ENDS_WITH
	ruleNOT_CONTAINS
	ruleNOT_REGEX
	ruleEXISTS
	ruleNOT_EXISTS
	ruleGT
	ruleLT
	ruleGTE
	ruleLTE
	ruleEQ
	ruleNE
	ruleAVG
	ruleMIN
	ruleMAX
	ruleCOUNT
	ruleSUM
	ruleSTDDEV
	ruleVARIANCE
	ruleMEDIAN
	rulePERCENTILE
	ruleQuote
	ruleComma
	ruleBackTick
	ruleDot
	ruleLP
	ruleRP
	rule_
	ruleLiteralChar
	ruleFloat
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"TypeSpec",
	"Filter",
	"Conditions",
	"Term",
	"Conjunctive",
	"Function",
	"UnaryFunction",
	"UnaryFunctionName",
	"BinaryFunctionName",
	"Operator",
	"BinaryFunction",
	"InfixExpression",
	"LiteralConditionValue",
	"Metrics",
	"Aggregation",
	"Identifier",
	"IdentifierList",
	"LiteralStringList",
	"IDStartCharacter",
	"IDCharacter",
	"IDQuotedCharacter",
	"LiteralString",
	"METRICS",
	"NAME",
	"REGEX",
	"RESOURCE",
	"WHERE_HEALTH",
	"WHERE_STATE",
	"WHERE_STATUS",
	"WHERE_METRICS",
	"WHERE_PROPERTIES",
	"AND",
	"OR",
	"IN",
	"NOT_IN",
	"CONTAINS",
	"STARTS_WITH",
	"ENDS_WITH",
	"NOT_STARTS_WITH",
	"NOT_ENDS_WITH",
	"NOT_CONTAINS",
	"NOT_REGEX",
	"EXISTS",
	"NOT_EXISTS",
	"GT",
	"LT",
	"GTE",
	"LTE",
	"EQ",
	"NE",
	"AVG",
	"MIN",
	"MAX",
	"COUNT",
	"SUM",
	"STDDEV",
	"VARIANCE",
	"MEDIAN",
	"PERCENTILE",
	"Quote",
	"Comma",
	"BackTick",
	"Dot",
	"LP",
	"RP",
	"_",
	"LiteralChar",
	"Float",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type QueryParser struct {
	Query RawQuery

	currentText        string
	currentList        []string
	currentCondition   Condition
	currentConditions  []Condition
	currentConjunctive string
	currentFloat       float64

	Buffer string
	buffer []rune
	rules  [113]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *QueryParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *QueryParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *QueryParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *QueryParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *QueryParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *QueryParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *QueryParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.currentList = make([]string, 0)
		case ruleAction1:
			p.Query.ResourceKinds = p.currentList
		case ruleAction2:
			p.currentList = make([]string, 0)
		case ruleAction3:
			p.Query.Name = p.currentList
		case ruleAction4:
			p.currentList = make([]string, 0)
		case ruleAction5:
			p.Query.Regex = p.currentList
		case ruleAction6:
			p.currentList = make([]string, 0)
		case ruleAction7:
			p.Query.Health = p.currentList
		case ruleAction8:
			p.currentList = make([]string, 0)
		case ruleAction9:
			p.Query.Status = p.currentList
		case ruleAction10:
			p.currentList = make([]string, 0)
		case ruleAction11:
			p.Query.State = p.currentList
		case ruleAction12:
			p.currentConditions = make([]Condition, 0)
		case ruleAction13:
			p.Query.MetricConditions = p.currentConditions
		case ruleAction14:
			p.currentConditions = make([]Condition, 0)
		case ruleAction15:
			p.Query.PropertyConditions = p.currentConditions
		case ruleAction16:
			p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(""))
		case ruleAction17:
			p.currentConjunctive = strings.ToUpper(text)
		case ruleAction18:
			p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(p.currentConjunctive))
		case ruleAction19:
			p.currentCondition.Operator = text
		case ruleAction20:
			p.currentCondition.Key = text
		case ruleAction21:
			p.currentCondition.Operator = text
		case ruleAction22:
			p.currentCondition.Key = text
		case ruleAction23:
			p.currentCondition.Key = text
		case ruleAction24:
			p.currentCondition.Operator = text
		case ruleAction25:
			p.currentCondition.StringValue = &text
		case ruleAction26:

			tmp := p.currentFloat
			p.currentCondition.DoubleValue = &tmp

		case ruleAction27:
			p.currentList = make([]string, 0)
		case ruleAction28:
			p.Query.Metrics = p.currentList
		case ruleAction29:
			p.Query.Aggregation.Type = text
		case ruleAction30:
			p.currentList = make([]string, 0)
		case ruleAction31:
			p.Query.Aggregation.Properties = p.currentList
		case ruleAction32:
			p.Query.Aggregation.Type = text
		case ruleAction33:
			p.currentList = make([]string, 0)
		case ruleAction34:
			p.Query.Aggregation.Parameter = p.currentFloat
		case ruleAction35:
			p.Query.Aggregation.Properties = p.currentList
		case ruleAction36:
			p.currentList = append(p.currentList, text)
		case ruleAction37:
			p.currentList = append(p.currentList, text)
		case ruleAction38:
			p.currentList = append(p.currentList, p.currentText)
		case ruleAction39:
			p.currentList = append(p.currentList, p.currentText)
		case ruleAction40:
			p.currentText = text
		case ruleAction41:
			p.currentFloat, _ = strconv.ParseFloat(text, 64)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *QueryParser) Init(options ...func(*QueryParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(TypeSpec (Dot Filter)+ Dot Metrics (Dot Aggregation)? !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleTypeSpec]() {
					goto l0
				}
				if !_rules[ruleDot]() {
					goto l0
				}
				if !_rules[ruleFilter]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleDot]() {
						goto l3
					}
					if !_rules[ruleFilter]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if !_rules[ruleDot]() {
					goto l0
				}
				if !_rules[ruleMetrics]() {
					goto l0
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !_rules[ruleDot]() {
						goto l4
					}
					if !_rules[ruleAggregation]() {
						goto l4
					}
					goto l5
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
			l5:
				{
					position6, tokenIndex6 := position, tokenIndex
					if !matchDot() {
						goto l6
					}
					goto l0
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 TypeSpec <- <(<RESOURCE> Action0 LP IdentifierList RP Action1)> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				{
					position9 := position
					if !_rules[ruleRESOURCE]() {
						goto l7
					}
					add(rulePegText, position9)
				}
				if !_rules[ruleAction0]() {
					goto l7
				}
				if !_rules[ruleLP]() {
					goto l7
				}
				if !_rules[ruleIdentifierList]() {
					goto l7
				}
				if !_rules[ruleRP]() {
					goto l7
				}
				if !_rules[ruleAction1]() {
					goto l7
				}
				add(ruleTypeSpec, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 2 Filter <- <((NAME Action2 LP LiteralStringList RP Action3) / (REGEX Action4 LP LiteralStringList RP Action5) / (WHERE_HEALTH Action6 LP IdentifierList RP Action7) / (WHERE_STATUS Action8 LP IdentifierList RP Action9) / (WHERE_STATE Action10 LP IdentifierList RP Action11) / (WHERE_METRICS Action12 LP Conditions RP Action13) / (WHERE_PROPERTIES Action14 LP Conditions RP Action15))> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				{
					position12, tokenIndex12 := position, tokenIndex
					if !_rules[ruleNAME]() {
						goto l13
					}
					if !_rules[ruleAction2]() {
						goto l13
					}
					if !_rules[ruleLP]() {
						goto l13
					}
					if !_rules[ruleLiteralStringList]() {
						goto l13
					}
					if !_rules[ruleRP]() {
						goto l13
					}
					if !_rules[ruleAction3]() {
						goto l13
					}
					goto l12
				l13:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleREGEX]() {
						goto l14
					}
					if !_rules[ruleAction4]() {
						goto l14
					}
					if !_rules[ruleLP]() {
						goto l14
					}
					if !_rules[ruleLiteralStringList]() {
						goto l14
					}
					if !_rules[ruleRP]() {
						goto l14
					}
					if !_rules[ruleAction5]() {
						goto l14
					}
					goto l12
				l14:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_HEALTH]() {
						goto l15
					}
					if !_rules[ruleAction6]() {
						goto l15
					}
					if !_rules[ruleLP]() {
						goto l15
					}
					if !_rules[ruleIdentifierList]() {
						goto l15
					}
					if !_rules[ruleRP]() {
						goto l15
					}
					if !_rules[ruleAction7]() {
						goto l15
					}
					goto l12
				l15:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_STATUS]() {
						goto l16
					}
					if !_rules[ruleAction8]() {
						goto l16
					}
					if !_rules[ruleLP]() {
						goto l16
					}
					if !_rules[ruleIdentifierList]() {
						goto l16
					}
					if !_rules[ruleRP]() {
						goto l16
					}
					if !_rules[ruleAction9]() {
						goto l16
					}
					goto l12
				l16:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_STATE]() {
						goto l17
					}
					if !_rules[ruleAction10]() {
						goto l17
					}
					if !_rules[ruleLP]() {
						goto l17
					}
					if !_rules[ruleIdentifierList]() {
						goto l17
					}
					if !_rules[ruleRP]() {
						goto l17
					}
					if !_rules[ruleAction11]() {
						goto l17
					}
					goto l12
				l17:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_METRICS]() {
						goto l18
					}
					if !_rules[ruleAction12]() {
						goto l18
					}
					if !_rules[ruleLP]() {
						goto l18
					}
					if !_rules[ruleConditions]() {
						goto l18
					}
					if !_rules[ruleRP]() {
						goto l18
					}
					if !_rules[ruleAction13]() {
						goto l18
					}
					goto l12
				l18:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_PROPERTIES]() {
						goto l10
					}
					if !_rules[ruleAction14]() {
						goto l10
					}
					if !_rules[ruleLP]() {
						goto l10
					}
					if !_rules[ruleConditions]() {
						goto l10
					}
					if !_rules[ruleRP]() {
						goto l10
					}
					if !_rules[ruleAction15]() {
						goto l10
					}
				}
			l12:
				add(ruleFilter, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 3 Conditions <- <(Term Action16 (_ <Conjunctive> _ Action17 Term Action18)*)> */
		func() bool {
			position19, tokenIndex19 := position, tokenIndex
			{
				position20 := position
				if !_rules[ruleTerm]() {
					goto l19
				}
				if !_rules[ruleAction16]() {
					goto l19
				}
			l21:
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[rule_]() {
						goto l22
					}
					{
						position23 := position
						if !_rules[ruleConjunctive]() {
							goto l22
						}
						add(rulePegText, position23)
					}
					if !_rules[rule_]() {
						goto l22
					}
					if !_rules[ruleAction17]() {
						goto l22
					}
					if !_rules[ruleTerm]() {
						goto l22
					}
					if !_rules[ruleAction18]() {
						goto l22
					}
					goto l21
				l22:
					position, tokenIndex = position22, tokenIndex22
				}
				add(ruleConditions, position20)
			}
			return true
		l19:
			position, tokenIndex = position19, tokenIndex19
			return false
		},
		/* 4 Term <- <(Function / InfixExpression)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if !_rules[ruleFunction]() {
						goto l27
					}
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleInfixExpression]() {
						goto l24
					}
				}
			l26:
				add(ruleTerm, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 5 Conjunctive <- <(AND / OR)> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				{
					position30, tokenIndex30 := position, tokenIndex
					if !_rules[ruleAND]() {
						goto l31
					}
					goto l30
				l31:
					position, tokenIndex = position30, tokenIndex30
					if !_rules[ruleOR]() {
						goto l28
					}
				}
			l30:
				add(ruleConjunctive, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 6 Function <- <(UnaryFunction / BinaryFunction)> */
		func() bool {
			position32, tokenIndex32 := position, tokenIndex
			{
				position33 := position
				{
					position34, tokenIndex34 := position, tokenIndex
					if !_rules[ruleUnaryFunction]() {
						goto l35
					}
					goto l34
				l35:
					position, tokenIndex = position34, tokenIndex34
					if !_rules[ruleBinaryFunction]() {
						goto l32
					}
				}
			l34:
				add(ruleFunction, position33)
			}
			return true
		l32:
			position, tokenIndex = position32, tokenIndex32
			return false
		},
		/* 7 UnaryFunction <- <(<UnaryFunctionName> Action19 LP <Identifier> Action20 RP)> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				{
					position38 := position
					if !_rules[ruleUnaryFunctionName]() {
						goto l36
					}
					add(rulePegText, position38)
				}
				if !_rules[ruleAction19]() {
					goto l36
				}
				if !_rules[ruleLP]() {
					goto l36
				}
				{
					position39 := position
					if !_rules[ruleIdentifier]() {
						goto l36
					}
					add(rulePegText, position39)
				}
				if !_rules[ruleAction20]() {
					goto l36
				}
				if !_rules[ruleRP]() {
					goto l36
				}
				add(ruleUnaryFunction, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 8 UnaryFunctionName <- <(EXISTS / NOT_EXISTS)> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				{
					position42, tokenIndex42 := position, tokenIndex
					if !_rules[ruleEXISTS]() {
						goto l43
					}
					goto l42
				l43:
					position, tokenIndex = position42, tokenIndex42
					if !_rules[ruleNOT_EXISTS]() {
						goto l40
					}
				}
			l42:
				add(ruleUnaryFunctionName, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 9 BinaryFunctionName <- <(CONTAINS / STARTS_WITH / ENDS_WITH / REGEX / NOT_CONTAINS / NOT_STARTS_WITH / NOT_ENDS_WITH / NOT_REGEX / IN / NOT_IN)> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				{
					position46, tokenIndex46 := position, tokenIndex
					if !_rules[ruleCONTAINS]() {
						goto l47
					}
					goto l46
				l47:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleSTARTS_WITH]() {
						goto l48
					}
					goto l46
				l48:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleENDS_WITH]() {
						goto l49
					}
					goto l46
				l49:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleREGEX]() {
						goto l50
					}
					goto l46
				l50:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleNOT_CONTAINS]() {
						goto l51
					}
					goto l46
				l51:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleNOT_STARTS_WITH]() {
						goto l52
					}
					goto l46
				l52:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleNOT_ENDS_WITH]() {
						goto l53
					}
					goto l46
				l53:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleNOT_REGEX]() {
						goto l54
					}
					goto l46
				l54:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleIN]() {
						goto l55
					}
					goto l46
				l55:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleNOT_IN]() {
						goto l44
					}
				}
			l46:
				add(ruleBinaryFunctionName, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 10 Operator <- <(EQ / NE / LTE / LT / GTE / GT)> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[ruleEQ]() {
						goto l59
					}
					goto l58
				l59:
					position, tokenIndex = position58, tokenIndex58
					if !_rules[ruleNE]() {
						goto l60
					}
					goto l58
				l60:
					position, tokenIndex = position58, tokenIndex58
					if !_rules[ruleLTE]() {
						goto l61
					}
					goto l58
				l61:
					position, tokenIndex = position58, tokenIndex58
					if !_rules[ruleLT]() {
						goto l62
					}
					goto l58
				l62:
					position, tokenIndex = position58, tokenIndex58
					if !_rules[ruleGTE]() {
						goto l63
					}
					goto l58
				l63:
					position, tokenIndex = position58, tokenIndex58
					if !_rules[ruleGT]() {
						goto l56
					}
				}
			l58:
				add(ruleOperator, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 11 BinaryFunction <- <(<BinaryFunctionName> Action21 LP <Identifier> Action22 Comma LiteralConditionValue RP)> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				{
					position66 := position
					if !_rules[ruleBinaryFunctionName]() {
						goto l64
					}
					add(rulePegText, position66)
				}
				if !_rules[ruleAction21]() {
					goto l64
				}
				if !_rules[ruleLP]() {
					goto l64
				}
				{
					position67 := position
					if !_rules[ruleIdentifier]() {
						goto l64
					}
					add(rulePegText, position67)
				}
				if !_rules[ruleAction22]() {
					goto l64
				}
				if !_rules[ruleComma]() {
					goto l64
				}
				if !_rules[ruleLiteralConditionValue]() {
					goto l64
				}
				if !_rules[ruleRP]() {
					goto l64
				}
				add(ruleBinaryFunction, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 12 InfixExpression <- <(<Identifier> Action23 _ <Operator> Action24 _ LiteralConditionValue)> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				{
					position70 := position
					if !_rules[ruleIdentifier]() {
						goto l68
					}
					add(rulePegText, position70)
				}
				if !_rules[ruleAction23]() {
					goto l68
				}
				if !_rules[rule_]() {
					goto l68
				}
				{
					position71 := position
					if !_rules[ruleOperator]() {
						goto l68
					}
					add(rulePegText, position71)
				}
				if !_rules[ruleAction24]() {
					goto l68
				}
				if !_rules[rule_]() {
					goto l68
				}
				if !_rules[ruleLiteralConditionValue]() {
					goto l68
				}
				add(ruleInfixExpression, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 13 LiteralConditionValue <- <((<LiteralString> Action25) / (Float Action26))> */
		func() bool {
			position72, tokenIndex72 := position, tokenIndex
			{
				position73 := position
				{
					position74, tokenIndex74 := position, tokenIndex
					{
						position76 := position
						if !_rules[ruleLiteralString]() {
							goto l75
						}
						add(rulePegText, position76)
					}
					if !_rules[ruleAction25]() {
						goto l75
					}
					goto l74
				l75:
					position, tokenIndex = position74, tokenIndex74
					if !_rules[ruleFloat]() {
						goto l72
					}
					if !_rules[ruleAction26]() {
						goto l72
					}
				}
			l74:
				add(ruleLiteralConditionValue, position73)
			}
			return true
		l72:
			position, tokenIndex = position72, tokenIndex72
			return false
		},
		/* 14 Metrics <- <(METRICS Action27 LP IdentifierList RP Action28)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if !_rules[ruleMETRICS]() {
					goto l77
				}
				if !_rules[ruleAction27]() {
					goto l77
				}
				if !_rules[ruleLP]() {
					goto l77
				}
				if !_rules[ruleIdentifierList]() {
					goto l77
				}
				if !_rules[ruleRP]() {
					goto l77
				}
				if !_rules[ruleAction28]() {
					goto l77
				}
				add(ruleMetrics, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 Aggregation <- <((<(AVG / MIN / MAX / STDDEV / VARIANCE / MEDIAN / COUNT / SUM)> Action29 LP Action30 IdentifierList? Action31 RP) / (PERCENTILE Action32 LP Action33 Float Action34 Comma IdentifierList? Action35 RP))> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					{
						position83 := position
						{
							position84, tokenIndex84 := position, tokenIndex
							if !_rules[ruleAVG]() {
								goto l85
							}
							goto l84
						l85:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleMIN]() {
								goto l86
							}
							goto l84
						l86:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleMAX]() {
								goto l87
							}
							goto l84
						l87:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleSTDDEV]() {
								goto l88
							}
							goto l84
						l88:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleVARIANCE]() {
								goto l89
							}
							goto l84
						l89:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleMEDIAN]() {
								goto l90
							}
							goto l84
						l90:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleCOUNT]() {
								goto l91
							}
							goto l84
						l91:
							position, tokenIndex = position84, tokenIndex84
							if !_rules[ruleSUM]() {
								goto l82
							}
						}
					l84:
						add(rulePegText, position83)
					}
					if !_rules[ruleAction29]() {
						goto l82
					}
					if !_rules[ruleLP]() {
						goto l82
					}
					if !_rules[ruleAction30]() {
						goto l82
					}
					{
						position92, tokenIndex92 := position, tokenIndex
						if !_rules[ruleIdentifierList]() {
							goto l92
						}
						goto l93
					l92:
						position, tokenIndex = position92, tokenIndex92
					}
				l93:
					if !_rules[ruleAction31]() {
						goto l82
					}
					if !_rules[ruleRP]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[rulePERCENTILE]() {
						goto l79
					}
					if !_rules[ruleAction32]() {
						goto l79
					}
					if !_rules[ruleLP]() {
						goto l79
					}
					if !_rules[ruleAction33]() {
						goto l79
					}
					if !_rules[ruleFloat]() {
						goto l79
					}
					if !_rules[ruleAction34]() {
						goto l79
					}
					if !_rules[ruleComma]() {
						goto l79
					}
					{
						position94, tokenIndex94 := position, tokenIndex
						if !_rules[ruleIdentifierList]() {
							goto l94
						}
						goto l95
					l94:
						position, tokenIndex = position94, tokenIndex94
					}
				l95:
					if !_rules[ruleAction35]() {
						goto l79
					}
					if !_rules[ruleRP]() {
						goto l79
					}
				}
			l81:
				add(ruleAggregation, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 Identifier <- <((IDStartCharacter IDCharacter*) / (BackTick <IDQuotedCharacter+> BackTick))> */
		func() bool {
			position96, tokenIndex96 := position, tokenIndex
			{
				position97 := position
				{
					position98, tokenIndex98 := position, tokenIndex
					if !_rules[ruleIDStartCharacter]() {
						goto l99
					}
				l100:
					{
						position101, tokenIndex101 := position, tokenIndex
						if !_rules[ruleIDCharacter]() {
							goto l101
						}
						goto l100
					l101:
						position, tokenIndex = position101, tokenIndex101
					}
					goto l98
				l99:
					position, tokenIndex = position98, tokenIndex98
					if !_rules[ruleBackTick]() {
						goto l96
					}
					{
						position102 := position
						if !_rules[ruleIDQuotedCharacter]() {
							goto l96
						}
					l103:
						{
							position104, tokenIndex104 := position, tokenIndex
							if !_rules[ruleIDQuotedCharacter]() {
								goto l104
							}
							goto l103
						l104:
							position, tokenIndex = position104, tokenIndex104
						}
						add(rulePegText, position102)
					}
					if !_rules[ruleBackTick]() {
						goto l96
					}
				}
			l98:
				add(ruleIdentifier, position97)
			}
			return true
		l96:
			position, tokenIndex = position96, tokenIndex96
			return false
		},
		/* 17 IdentifierList <- <(<Identifier> Action36 (Comma <Identifier> Action37)*)> */
		func() bool {
			position105, tokenIndex105 := position, tokenIndex
			{
				position106 := position
				{
					position107 := position
					if !_rules[ruleIdentifier]() {
						goto l105
					}
					add(rulePegText, position107)
				}
				if !_rules[ruleAction36]() {
					goto l105
				}
			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[ruleComma]() {
						goto l109
					}
					{
						position110 := position
						if !_rules[ruleIdentifier]() {
							goto l109
						}
						add(rulePegText, position110)
					}
					if !_rules[ruleAction37]() {
						goto l109
					}
					goto l108
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
				add(ruleIdentifierList, position106)
			}
			return true
		l105:
			position, tokenIndex = position105, tokenIndex105
			return false
		},
		/* 18 LiteralStringList <- <(<LiteralString> Action38 (Comma <LiteralString> Action39)*)> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				{
					position113 := position
					if !_rules[ruleLiteralString]() {
						goto l111
					}
					add(rulePegText, position113)
				}
				if !_rules[ruleAction38]() {
					goto l111
				}
			l114:
				{
					position115, tokenIndex115 := position, tokenIndex
					if !_rules[ruleComma]() {
						goto l115
					}
					{
						position116 := position
						if !_rules[ruleLiteralString]() {
							goto l115
						}
						add(rulePegText, position116)
					}
					if !_rules[ruleAction39]() {
						goto l115
					}
					goto l114
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				add(ruleLiteralStringList, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 19 IDStartCharacter <- <([A-Z] / [a-z] / '_')> */
		func() bool {
			position117, tokenIndex117 := position, tokenIndex
			{
				position118 := position
				{
					position119, tokenIndex119 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l120
					}
					position++
					goto l119
				l120:
					position, tokenIndex = position119, tokenIndex119
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l121
					}
					position++
					goto l119
				l121:
					position, tokenIndex = position119, tokenIndex119
					if buffer[position] != rune('_') {
						goto l117
					}
					position++
				}
			l119:
				add(ruleIDStartCharacter, position118)
			}
			return true
		l117:
			position, tokenIndex = position117, tokenIndex117
			return false
		},
		/* 20 IDCharacter <- <([A-Z] / [a-z] / [0-9] / '_' / ':' / '|' / '.' / '-')> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				{
					position124, tokenIndex124 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l125
					}
					position++
					goto l124
				l125:
					position, tokenIndex = position124, tokenIndex124
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l126
					}
					position++
					goto l124
				l126:
					position, tokenIndex = position124, tokenIndex124
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l127
					}
					position++
					goto l124
				l127:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune('_') {
						goto l128
					}
					position++
					goto l124
				l128:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune(':') {
						goto l129
					}
					position++
					goto l124
				l129:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune('|') {
						goto l130
					}
					position++
					goto l124
				l130:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune('.') {
						goto l131
					}
					position++
					goto l124
				l131:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune('-') {
						goto l122
					}
					position++
				}
			l124:
				add(ruleIDCharacter, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 21 IDQuotedCharacter <- <([A-Z] / [a-z] / [0-9] / '_' / ':' / '|' / '.' / '-' / ' ' / ',' / '$')> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				{
					position134, tokenIndex134 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l135
					}
					position++
					goto l134
				l135:
					position, tokenIndex = position134, tokenIndex134
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l136
					}
					position++
					goto l134
				l136:
					position, tokenIndex = position134, tokenIndex134
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l137
					}
					position++
					goto l134
				l137:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('_') {
						goto l138
					}
					position++
					goto l134
				l138:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune(':') {
						goto l139
					}
					position++
					goto l134
				l139:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('|') {
						goto l140
					}
					position++
					goto l134
				l140:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('.') {
						goto l141
					}
					position++
					goto l134
				l141:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('-') {
						goto l142
					}
					position++
					goto l134
				l142:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune(' ') {
						goto l143
					}
					position++
					goto l134
				l143:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune(',') {
						goto l144
					}
					position++
					goto l134
				l144:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('$') {
						goto l132
					}
					position++
				}
			l134:
				add(ruleIDQuotedCharacter, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 22 LiteralString <- <(Quote <LiteralChar*> Action40 Quote)> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				if !_rules[ruleQuote]() {
					goto l145
				}
				{
					position147 := position
				l148:
					{
						position149, tokenIndex149 := position, tokenIndex
						if !_rules[ruleLiteralChar]() {
							goto l149
						}
						goto l148
					l149:
						position, tokenIndex = position149, tokenIndex149
					}
					add(rulePegText, position147)
				}
				if !_rules[ruleAction40]() {
					goto l145
				}
				if !_rules[ruleQuote]() {
					goto l145
				}
				add(ruleLiteralString, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 23 METRICS <- <('m' 'e' 't' 'r' 'i' 'c' 's')> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				if buffer[position] != rune('m') {
					goto l150
				}
				position++
				if buffer[position] != rune('e') {
					goto l150
				}
				position++
				if buffer[position] != rune('t') {
					goto l150
				}
				position++
				if buffer[position] != rune('r') {
					goto l150
				}
				position++
				if buffer[position] != rune('i') {
					goto l150
				}
				position++
				if buffer[position] != rune('c') {
					goto l150
				}
				position++
				if buffer[position] != rune('s') {
					goto l150
				}
				position++
				add(ruleMETRICS, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 24 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if buffer[position] != rune('n') {
					goto l152
				}
				position++
				if buffer[position] != rune('a') {
					goto l152
				}
				position++
				if buffer[position] != rune('m') {
					goto l152
				}
				position++
				if buffer[position] != rune('e') {
					goto l152
				}
				position++
				add(ruleNAME, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 25 REGEX <- <('r' 'e' 'g' 'e' 'x')> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if buffer[position] != rune('r') {
					goto l154
				}
				position++
				if buffer[position] != rune('e') {
					goto l154
				}
				position++
				if buffer[position] != rune('g') {
					goto l154
				}
				position++
				if buffer[position] != rune('e') {
					goto l154
				}
				position++
				if buffer[position] != rune('x') {
					goto l154
				}
				position++
				add(ruleREGEX, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 26 RESOURCE <- <('r' 'e' 's' 'o' 'u' 'r' 'c' 'e')> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if buffer[position] != rune('r') {
					goto l156
				}
				position++
				if buffer[position] != rune('e') {
					goto l156
				}
				position++
				if buffer[position] != rune('s') {
					goto l156
				}
				position++
				if buffer[position] != rune('o') {
					goto l156
				}
				position++
				if buffer[position] != rune('u') {
					goto l156
				}
				position++
				if buffer[position] != rune('r') {
					goto l156
				}
				position++
				if buffer[position] != rune('c') {
					goto l156
				}
				position++
				if buffer[position] != rune('e') {
					goto l156
				}
				position++
				add(ruleRESOURCE, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 27 WHERE_HEALTH <- <('w' 'h' 'e' 'r' 'e' 'H' 'e' 'a' 'l' 't' 'h')> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				if buffer[position] != rune('w') {
					goto l158
				}
				position++
				if buffer[position] != rune('h') {
					goto l158
				}
				position++
				if buffer[position] != rune('e') {
					goto l158
				}
				position++
				if buffer[position] != rune('r') {
					goto l158
				}
				position++
				if buffer[position] != rune('e') {
					goto l158
				}
				position++
				if buffer[position] != rune('H') {
					goto l158
				}
				position++
				if buffer[position] != rune('e') {
					goto l158
				}
				position++
				if buffer[position] != rune('a') {
					goto l158
				}
				position++
				if buffer[position] != rune('l') {
					goto l158
				}
				position++
				if buffer[position] != rune('t') {
					goto l158
				}
				position++
				if buffer[position] != rune('h') {
					goto l158
				}
				position++
				add(ruleWHERE_HEALTH, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 28 WHERE_STATE <- <('w' 'h' 'e' 'r' 'e' 'S' 't' 'a' 't' 'e')> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if buffer[position] != rune('w') {
					goto l160
				}
				position++
				if buffer[position] != rune('h') {
					goto l160
				}
				position++
				if buffer[position] != rune('e') {
					goto l160
				}
				position++
				if buffer[position] != rune('r') {
					goto l160
				}
				position++
				if buffer[position] != rune('e') {
					goto l160
				}
				position++
				if buffer[position] != rune('S') {
					goto l160
				}
				position++
				if buffer[position] != rune('t') {
					goto l160
				}
				position++
				if buffer[position] != rune('a') {
					goto l160
				}
				position++
				if buffer[position] != rune('t') {
					goto l160
				}
				position++
				if buffer[position] != rune('e') {
					goto l160
				}
				position++
				add(ruleWHERE_STATE, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 29 WHERE_STATUS <- <('w' 'h' 'e' 'r' 'e' 'S' 't' 'a' 't' 'u' 's')> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				if buffer[position] != rune('w') {
					goto l162
				}
				position++
				if buffer[position] != rune('h') {
					goto l162
				}
				position++
				if buffer[position] != rune('e') {
					goto l162
				}
				position++
				if buffer[position] != rune('r') {
					goto l162
				}
				position++
				if buffer[position] != rune('e') {
					goto l162
				}
				position++
				if buffer[position] != rune('S') {
					goto l162
				}
				position++
				if buffer[position] != rune('t') {
					goto l162
				}
				position++
				if buffer[position] != rune('a') {
					goto l162
				}
				position++
				if buffer[position] != rune('t') {
					goto l162
				}
				position++
				if buffer[position] != rune('u') {
					goto l162
				}
				position++
				if buffer[position] != rune('s') {
					goto l162
				}
				position++
				add(ruleWHERE_STATUS, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 30 WHERE_METRICS <- <('w' 'h' 'e' 'r' 'e' 'M' 'e' 't' 'r' 'i' 'c' 's')> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				if buffer[position] != rune('w') {
					goto l164
				}
				position++
				if buffer[position] != rune('h') {
					goto l164
				}
				position++
				if buffer[position] != rune('e') {
					goto l164
				}
				position++
				if buffer[position] != rune('r') {
					goto l164
				}
				position++
				if buffer[position] != rune('e') {
					goto l164
				}
				position++
				if buffer[position] != rune('M') {
					goto l164
				}
				position++
				if buffer[position] != rune('e') {
					goto l164
				}
				position++
				if buffer[position] != rune('t') {
					goto l164
				}
				position++
				if buffer[position] != rune('r') {
					goto l164
				}
				position++
				if buffer[position] != rune('i') {
					goto l164
				}
				position++
				if buffer[position] != rune('c') {
					goto l164
				}
				position++
				if buffer[position] != rune('s') {
					goto l164
				}
				position++
				add(ruleWHERE_METRICS, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 31 WHERE_PROPERTIES <- <('w' 'h' 'e' 'r' 'e' 'P' 'r' 'o' 'p' 'e' 'r' 't' 'i' 'e' 's')> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				if buffer[position] != rune('w') {
					goto l166
				}
				position++
				if buffer[position] != rune('h') {
					goto l166
				}
				position++
				if buffer[position] != rune('e') {
					goto l166
				}
				position++
				if buffer[position] != rune('r') {
					goto l166
				}
				position++
				if buffer[position] != rune('e') {
					goto l166
				}
				position++
				if buffer[position] != rune('P') {
					goto l166
				}
				position++
				if buffer[position] != rune('r') {
					goto l166
				}
				position++
				if buffer[position] != rune('o') {
					goto l166
				}
				position++
				if buffer[position] != rune('p') {
					goto l166
				}
				position++
				if buffer[position] != rune('e') {
					goto l166
				}
				position++
				if buffer[position] != rune('r') {
					goto l166
				}
				position++
				if buffer[position] != rune('t') {
					goto l166
				}
				position++
				if buffer[position] != rune('i') {
					goto l166
				}
				position++
				if buffer[position] != rune('e') {
					goto l166
				}
				position++
				if buffer[position] != rune('s') {
					goto l166
				}
				position++
				add(ruleWHERE_PROPERTIES, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 32 AND <- <('a' 'n' 'd')> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				if buffer[position] != rune('a') {
					goto l168
				}
				position++
				if buffer[position] != rune('n') {
					goto l168
				}
				position++
				if buffer[position] != rune('d') {
					goto l168
				}
				position++
				add(ruleAND, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 33 OR <- <('o' 'r')> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune('o') {
					goto l170
				}
				position++
				if buffer[position] != rune('r') {
					goto l170
				}
				position++
				add(ruleOR, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 34 IN <- <('i' 'n')> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				if buffer[position] != rune('i') {
					goto l172
				}
				position++
				if buffer[position] != rune('n') {
					goto l172
				}
				position++
				add(ruleIN, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 35 NOT_IN <- <('n' 'o' 't' ' ' 'i' 'n')> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune('n') {
					goto l174
				}
				position++
				if buffer[position] != rune('o') {
					goto l174
				}
				position++
				if buffer[position] != rune('t') {
					goto l174
				}
				position++
				if buffer[position] != rune(' ') {
					goto l174
				}
				position++
				if buffer[position] != rune('i') {
					goto l174
				}
				position++
				if buffer[position] != rune('n') {
					goto l174
				}
				position++
				add(ruleNOT_IN, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 36 CONTAINS <- <('c' 'o' 'n' 't' 'a' 'i' 'n' 's')> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if buffer[position] != rune('c') {
					goto l176
				}
				position++
				if buffer[position] != rune('o') {
					goto l176
				}
				position++
				if buffer[position] != rune('n') {
					goto l176
				}
				position++
				if buffer[position] != rune('t') {
					goto l176
				}
				position++
				if buffer[position] != rune('a') {
					goto l176
				}
				position++
				if buffer[position] != rune('i') {
					goto l176
				}
				position++
				if buffer[position] != rune('n') {
					goto l176
				}
				position++
				if buffer[position] != rune('s') {
					goto l176
				}
				position++
				add(ruleCONTAINS, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 37 STARTS_WITH <- <('s' 't' 'a' 'r' 't' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				if buffer[position] != rune('s') {
					goto l178
				}
				position++
				if buffer[position] != rune('t') {
					goto l178
				}
				position++
				if buffer[position] != rune('a') {
					goto l178
				}
				position++
				if buffer[position] != rune('r') {
					goto l178
				}
				position++
				if buffer[position] != rune('t') {
					goto l178
				}
				position++
				if buffer[position] != rune('s') {
					goto l178
				}
				position++
				if buffer[position] != rune('_') {
					goto l178
				}
				position++
				if buffer[position] != rune('w') {
					goto l178
				}
				position++
				if buffer[position] != rune('i') {
					goto l178
				}
				position++
				if buffer[position] != rune('t') {
					goto l178
				}
				position++
				if buffer[position] != rune('h') {
					goto l178
				}
				position++
				add(ruleSTARTS_WITH, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 38 ENDS_WITH <- <('e' 'n' 'd' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if buffer[position] != rune('e') {
					goto l180
				}
				position++
				if buffer[position] != rune('n') {
					goto l180
				}
				position++
				if buffer[position] != rune('d') {
					goto l180
				}
				position++
				if buffer[position] != rune('s') {
					goto l180
				}
				position++
				if buffer[position] != rune('_') {
					goto l180
				}
				position++
				if buffer[position] != rune('w') {
					goto l180
				}
				position++
				if buffer[position] != rune('i') {
					goto l180
				}
				position++
				if buffer[position] != rune('t') {
					goto l180
				}
				position++
				if buffer[position] != rune('h') {
					goto l180
				}
				position++
				add(ruleENDS_WITH, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 39 NOT_STARTS_WITH <- <('n' 'o' 't' ' ' 's' 't' 'a' 'r' 't' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				if buffer[position] != rune('n') {
					goto l182
				}
				position++
				if buffer[position] != rune('o') {
					goto l182
				}
				position++
				if buffer[position] != rune('t') {
					goto l182
				}
				position++
				if buffer[position] != rune(' ') {
					goto l182
				}
				position++
				if buffer[position] != rune('s') {
					goto l182
				}
				position++
				if buffer[position] != rune('t') {
					goto l182
				}
				position++
				if buffer[position] != rune('a') {
					goto l182
				}
				position++
				if buffer[position] != rune('r') {
					goto l182
				}
				position++
				if buffer[position] != rune('t') {
					goto l182
				}
				position++
				if buffer[position] != rune('s') {
					goto l182
				}
				position++
				if buffer[position] != rune('_') {
					goto l182
				}
				position++
				if buffer[position] != rune('w') {
					goto l182
				}
				position++
				if buffer[position] != rune('i') {
					goto l182
				}
				position++
				if buffer[position] != rune('t') {
					goto l182
				}
				position++
				if buffer[position] != rune('h') {
					goto l182
				}
				position++
				add(ruleNOT_STARTS_WITH, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 40 NOT_ENDS_WITH <- <('n' 'o' 't' ' ' 'e' 'n' 'd' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if buffer[position] != rune('n') {
					goto l184
				}
				position++
				if buffer[position] != rune('o') {
					goto l184
				}
				position++
				if buffer[position] != rune('t') {
					goto l184
				}
				position++
				if buffer[position] != rune(' ') {
					goto l184
				}
				position++
				if buffer[position] != rune('e') {
					goto l184
				}
				position++
				if buffer[position] != rune('n') {
					goto l184
				}
				position++
				if buffer[position] != rune('d') {
					goto l184
				}
				position++
				if buffer[position] != rune('s') {
					goto l184
				}
				position++
				if buffer[position] != rune('_') {
					goto l184
				}
				position++
				if buffer[position] != rune('w') {
					goto l184
				}
				position++
				if buffer[position] != rune('i') {
					goto l184
				}
				position++
				if buffer[position] != rune('t') {
					goto l184
				}
				position++
				if buffer[position] != rune('h') {
					goto l184
				}
				position++
				add(ruleNOT_ENDS_WITH, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 41 NOT_CONTAINS <- <('n' 'o' 't' ' ' 'c' 'o' 'n' 't' 'a' 'i' 'n' 's')> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune('n') {
					goto l186
				}
				position++
				if buffer[position] != rune('o') {
					goto l186
				}
				position++
				if buffer[position] != rune('t') {
					goto l186
				}
				position++
				if buffer[position] != rune(' ') {
					goto l186
				}
				position++
				if buffer[position] != rune('c') {
					goto l186
				}
				position++
				if buffer[position] != rune('o') {
					goto l186
				}
				position++
				if buffer[position] != rune('n') {
					goto l186
				}
				position++
				if buffer[position] != rune('t') {
					goto l186
				}
				position++
				if buffer[position] != rune('a') {
					goto l186
				}
				position++
				if buffer[position] != rune('i') {
					goto l186
				}
				position++
				if buffer[position] != rune('n') {
					goto l186
				}
				position++
				if buffer[position] != rune('s') {
					goto l186
				}
				position++
				add(ruleNOT_CONTAINS, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 42 NOT_REGEX <- <('n' 'o' 't' ' ' 'r' 'e' 'g' 'e' 'x')> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune('n') {
					goto l188
				}
				position++
				if buffer[position] != rune('o') {
					goto l188
				}
				position++
				if buffer[position] != rune('t') {
					goto l188
				}
				position++
				if buffer[position] != rune(' ') {
					goto l188
				}
				position++
				if buffer[position] != rune('r') {
					goto l188
				}
				position++
				if buffer[position] != rune('e') {
					goto l188
				}
				position++
				if buffer[position] != rune('g') {
					goto l188
				}
				position++
				if buffer[position] != rune('e') {
					goto l188
				}
				position++
				if buffer[position] != rune('x') {
					goto l188
				}
				position++
				add(ruleNOT_REGEX, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 43 EXISTS <- <('e' 'x' 'i' 's' 't' 's')> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('e') {
					goto l190
				}
				position++
				if buffer[position] != rune('x') {
					goto l190
				}
				position++
				if buffer[position] != rune('i') {
					goto l190
				}
				position++
				if buffer[position] != rune('s') {
					goto l190
				}
				position++
				if buffer[position] != rune('t') {
					goto l190
				}
				position++
				if buffer[position] != rune('s') {
					goto l190
				}
				position++
				add(ruleEXISTS, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 44 NOT_EXISTS <- <('n' 'o' 't' ' ' 'e' 'x' 'i' 's' 't' 's')> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if buffer[position] != rune('n') {
					goto l192
				}
				position++
				if buffer[position] != rune('o') {
					goto l192
				}
				position++
				if buffer[position] != rune('t') {
					goto l192
				}
				position++
				if buffer[position] != rune(' ') {
					goto l192
				}
				position++
				if buffer[position] != rune('e') {
					goto l192
				}
				position++
				if buffer[position] != rune('x') {
					goto l192
				}
				position++
				if buffer[position] != rune('i') {
					goto l192
				}
				position++
				if buffer[position] != rune('s') {
					goto l192
				}
				position++
				if buffer[position] != rune('t') {
					goto l192
				}
				position++
				if buffer[position] != rune('s') {
					goto l192
				}
				position++
				add(ruleNOT_EXISTS, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 45 GT <- <'>'> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				if buffer[position] != rune('>') {
					goto l194
				}
				position++
				add(ruleGT, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 46 LT <- <'<'> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				if buffer[position] != rune('<') {
					goto l196
				}
				position++
				add(ruleLT, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 47 GTE <- <('>' '=')> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				if buffer[position] != rune('>') {
					goto l198
				}
				position++
				if buffer[position] != rune('=') {
					goto l198
				}
				position++
				add(ruleGTE, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 48 LTE <- <('<' '=')> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				if buffer[position] != rune('<') {
					goto l200
				}
				position++
				if buffer[position] != rune('=') {
					goto l200
				}
				position++
				add(ruleLTE, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 49 EQ <- <'='> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				if buffer[position] != rune('=') {
					goto l202
				}
				position++
				add(ruleEQ, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 50 NE <- <('!' '=')> */
		func() bool {
			position204, tokenIndex204 := position, tokenIndex
			{
				position205 := position
				if buffer[position] != rune('!') {
					goto l204
				}
				position++
				if buffer[position] != rune('=') {
					goto l204
				}
				position++
				add(ruleNE, position205)
			}
			return true
		l204:
			position, tokenIndex = position204, tokenIndex204
			return false
		},
		/* 51 AVG <- <('a' 'v' 'g')> */
		func() bool {
			position206, tokenIndex206 := position, tokenIndex
			{
				position207 := position
				if buffer[position] != rune('a') {
					goto l206
				}
				position++
				if buffer[position] != rune('v') {
					goto l206
				}
				position++
				if buffer[position] != rune('g') {
					goto l206
				}
				position++
				add(ruleAVG, position207)
			}
			return true
		l206:
			position, tokenIndex = position206, tokenIndex206
			return false
		},
		/* 52 MIN <- <('m' 'i' 'n')> */
		func() bool {
			position208, tokenIndex208 := position, tokenIndex
			{
				position209 := position
				if buffer[position] != rune('m') {
					goto l208
				}
				position++
				if buffer[position] != rune('i') {
					goto l208
				}
				position++
				if buffer[position] != rune('n') {
					goto l208
				}
				position++
				add(ruleMIN, position209)
			}
			return true
		l208:
			position, tokenIndex = position208, tokenIndex208
			return false
		},
		/* 53 MAX <- <('m' 'a' 'x')> */
		func() bool {
			position210, tokenIndex210 := position, tokenIndex
			{
				position211 := position
				if buffer[position] != rune('m') {
					goto l210
				}
				position++
				if buffer[position] != rune('a') {
					goto l210
				}
				position++
				if buffer[position] != rune('x') {
					goto l210
				}
				position++
				add(ruleMAX, position211)
			}
			return true
		l210:
			position, tokenIndex = position210, tokenIndex210
			return false
		},
		/* 54 COUNT <- <('c' 'o' 'u' 'n' 't')> */
		func() bool {
			position212, tokenIndex212 := position, tokenIndex
			{
				position213 := position
				if buffer[position] != rune('c') {
					goto l212
				}
				position++
				if buffer[position] != rune('o') {
					goto l212
				}
				position++
				if buffer[position] != rune('u') {
					goto l212
				}
				position++
				if buffer[position] != rune('n') {
					goto l212
				}
				position++
				if buffer[position] != rune('t') {
					goto l212
				}
				position++
				add(ruleCOUNT, position213)
			}
			return true
		l212:
			position, tokenIndex = position212, tokenIndex212
			return false
		},
		/* 55 SUM <- <('s' 'u' 'm')> */
		func() bool {
			position214, tokenIndex214 := position, tokenIndex
			{
				position215 := position
				if buffer[position] != rune('s') {
					goto l214
				}
				position++
				if buffer[position] != rune('u') {
					goto l214
				}
				position++
				if buffer[position] != rune('m') {
					goto l214
				}
				position++
				add(ruleSUM, position215)
			}
			return true
		l214:
			position, tokenIndex = position214, tokenIndex214
			return false
		},
		/* 56 STDDEV <- <('s' 't' 'd' 'd' 'e' 'v')> */
		func() bool {
			position216, tokenIndex216 := position, tokenIndex
			{
				position217 := position
				if buffer[position] != rune('s') {
					goto l216
				}
				position++
				if buffer[position] != rune('t') {
					goto l216
				}
				position++
				if buffer[position] != rune('d') {
					goto l216
				}
				position++
				if buffer[position] != rune('d') {
					goto l216
				}
				position++
				if buffer[position] != rune('e') {
					goto l216
				}
				position++
				if buffer[position] != rune('v') {
					goto l216
				}
				position++
				add(ruleSTDDEV, position217)
			}
			return true
		l216:
			position, tokenIndex = position216, tokenIndex216
			return false
		},
		/* 57 VARIANCE <- <('v' 'a' 'r' 'i' 'a' 'n' 'c' 'e')> */
		func() bool {
			position218, tokenIndex218 := position, tokenIndex
			{
				position219 := position
				if buffer[position] != rune('v') {
					goto l218
				}
				position++
				if buffer[position] != rune('a') {
					goto l218
				}
				position++
				if buffer[position] != rune('r') {
					goto l218
				}
				position++
				if buffer[position] != rune('i') {
					goto l218
				}
				position++
				if buffer[position] != rune('a') {
					goto l218
				}
				position++
				if buffer[position] != rune('n') {
					goto l218
				}
				position++
				if buffer[position] != rune('c') {
					goto l218
				}
				position++
				if buffer[position] != rune('e') {
					goto l218
				}
				position++
				add(ruleVARIANCE, position219)
			}
			return true
		l218:
			position, tokenIndex = position218, tokenIndex218
			return false
		},
		/* 58 MEDIAN <- <('m' 'e' 'd' 'i' 'a' 'n')> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				if buffer[position] != rune('m') {
					goto l220
				}
				position++
				if buffer[position] != rune('e') {
					goto l220
				}
				position++
				if buffer[position] != rune('d') {
					goto l220
				}
				position++
				if buffer[position] != rune('i') {
					goto l220
				}
				position++
				if buffer[position] != rune('a') {
					goto l220
				}
				position++
				if buffer[position] != rune('n') {
					goto l220
				}
				position++
				add(ruleMEDIAN, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
		/* 59 PERCENTILE <- <('p' 'e' 'r' 'c' 'e' 'n' 't' 'i' 'l' 'e')> */
		func() bool {
			position222, tokenIndex222 := position, tokenIndex
			{
				position223 := position
				if buffer[position] != rune('p') {
					goto l222
				}
				position++
				if buffer[position] != rune('e') {
					goto l222
				}
				position++
				if buffer[position] != rune('r') {
					goto l222
				}
				position++
				if buffer[position] != rune('c') {
					goto l222
				}
				position++
				if buffer[position] != rune('e') {
					goto l222
				}
				position++
				if buffer[position] != rune('n') {
					goto l222
				}
				position++
				if buffer[position] != rune('t') {
					goto l222
				}
				position++
				if buffer[position] != rune('i') {
					goto l222
				}
				position++
				if buffer[position] != rune('l') {
					goto l222
				}
				position++
				if buffer[position] != rune('e') {
					goto l222
				}
				position++
				add(rulePERCENTILE, position223)
			}
			return true
		l222:
			position, tokenIndex = position222, tokenIndex222
			return false
		},
		/* 60 Quote <- <'"'> */
		func() bool {
			position224, tokenIndex224 := position, tokenIndex
			{
				position225 := position
				if buffer[position] != rune('"') {
					goto l224
				}
				position++
				add(ruleQuote, position225)
			}
			return true
		l224:
			position, tokenIndex = position224, tokenIndex224
			return false
		},
		/* 61 Comma <- <(_ ',' _)> */
		func() bool {
			position226, tokenIndex226 := position, tokenIndex
			{
				position227 := position
				if !_rules[rule_]() {
					goto l226
				}
				if buffer[position] != rune(',') {
					goto l226
				}
				position++
				if !_rules[rule_]() {
					goto l226
				}
				add(ruleComma, position227)
			}
			return true
		l226:
			position, tokenIndex = position226, tokenIndex226
			return false
		},
		/* 62 BackTick <- <'`'> */
		func() bool {
			position228, tokenIndex228 := position, tokenIndex
			{
				position229 := position
				if buffer[position] != rune('`') {
					goto l228
				}
				position++
				add(ruleBackTick, position229)
			}
			return true
		l228:
			position, tokenIndex = position228, tokenIndex228
			return false
		},
		/* 63 Dot <- <(_ '.' _)> */
		func() bool {
			position230, tokenIndex230 := position, tokenIndex
			{
				position231 := position
				if !_rules[rule_]() {
					goto l230
				}
				if buffer[position] != rune('.') {
					goto l230
				}
				position++
				if !_rules[rule_]() {
					goto l230
				}
				add(ruleDot, position231)
			}
			return true
		l230:
			position, tokenIndex = position230, tokenIndex230
			return false
		},
		/* 64 LP <- <(_ '(' _)> */
		func() bool {
			position232, tokenIndex232 := position, tokenIndex
			{
				position233 := position
				if !_rules[rule_]() {
					goto l232
				}
				if buffer[position] != rune('(') {
					goto l232
				}
				position++
				if !_rules[rule_]() {
					goto l232
				}
				add(ruleLP, position233)
			}
			return true
		l232:
			position, tokenIndex = position232, tokenIndex232
			return false
		},
		/* 65 RP <- <(_ ')' _)> */
		func() bool {
			position234, tokenIndex234 := position, tokenIndex
			{
				position235 := position
				if !_rules[rule_]() {
					goto l234
				}
				if buffer[position] != rune(')') {
					goto l234
				}
				position++
				if !_rules[rule_]() {
					goto l234
				}
				add(ruleRP, position235)
			}
			return true
		l234:
			position, tokenIndex = position234, tokenIndex234
			return false
		},
		/* 66 _ <- <(' ' / '\t' / '\n' / '\r')*> */
		func() bool {
			{
				position237 := position
			l238:
				{
					position239, tokenIndex239 := position, tokenIndex
					{
						position240, tokenIndex240 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l241
						}
						position++
						goto l240
					l241:
						position, tokenIndex = position240, tokenIndex240
						if buffer[position] != rune('\t') {
							goto l242
						}
						position++
						goto l240
					l242:
						position, tokenIndex = position240, tokenIndex240
						if buffer[position] != rune('\n') {
							goto l243
						}
						position++
						goto l240
					l243:
						position, tokenIndex = position240, tokenIndex240
						if buffer[position] != rune('\r') {
							goto l239
						}
						position++
					}
				l240:
					goto l238
				l239:
					position, tokenIndex = position239, tokenIndex239
				}
				add(rule_, position237)
			}
			return true
		},
		/* 67 LiteralChar <- <(!('"' / '^' / '\n') .)> */
		func() bool {
			position244, tokenIndex244 := position, tokenIndex
			{
				position245 := position
				{
					position246, tokenIndex246 := position, tokenIndex
					{
						position247, tokenIndex247 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('^') {
							goto l249
						}
						position++
						goto l247
					l249:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('\n') {
							goto l246
						}
						position++
					}
				l247:
					goto l244
				l246:
					position, tokenIndex = position246, tokenIndex246
				}
				if !matchDot() {
					goto l244
				}
				add(ruleLiteralChar, position245)
			}
			return true
		l244:
			position, tokenIndex = position244, tokenIndex244
			return false
		},
		/* 68 Float <- <(<('-'? [0-9]+ ('.' [0-9]+)? (('E' / 'e') ('+' / '-')? [0-9]+)?)> Action41)> */
		func() bool {
			position250, tokenIndex250 := position, tokenIndex
			{
				position251 := position
				{
					position252 := position
					{
						position253, tokenIndex253 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l253
						}
						position++
						goto l254
					l253:
						position, tokenIndex = position253, tokenIndex253
					}
				l254:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l250
					}
					position++
				l255:
					{
						position256, tokenIndex256 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l256
						}
						position++
						goto l255
					l256:
						position, tokenIndex = position256, tokenIndex256
					}
					{
						position257, tokenIndex257 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l257
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l257
						}
						position++
					l259:
						{
							position260, tokenIndex260 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l260
							}
							position++
							goto l259
						l260:
							position, tokenIndex = position260, tokenIndex260
						}
						goto l258
					l257:
						position, tokenIndex = position257, tokenIndex257
					}
				l258:
					{
						position261, tokenIndex261 := position, tokenIndex
						{
							position263, tokenIndex263 := position, tokenIndex
							if buffer[position] != rune('E') {
								goto l264
							}
							position++
							goto l263
						l264:
							position, tokenIndex = position263, tokenIndex263
							if buffer[position] != rune('e') {
								goto l261
							}
							position++
						}
					l263:
						{
							position265, tokenIndex265 := position, tokenIndex
							{
								position267, tokenIndex267 := position, tokenIndex
								if buffer[position] != rune('+') {
									goto l268
								}
								position++
								goto l267
							l268:
								position, tokenIndex = position267, tokenIndex267
								if buffer[position] != rune('-') {
									goto l265
								}
								position++
							}
						l267:
							goto l266
						l265:
							position, tokenIndex = position265, tokenIndex265
						}
					l266:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l261
						}
						position++
					l269:
						{
							position270, tokenIndex270 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l270
							}
							position++
							goto l269
						l270:
							position, tokenIndex = position270, tokenIndex270
						}
						goto l262
					l261:
						position, tokenIndex = position261, tokenIndex261
					}
				l262:
					add(rulePegText, position252)
				}
				if !_rules[ruleAction41]() {
					goto l250
				}
				add(ruleFloat, position251)
			}
			return true
		l250:
			position, tokenIndex = position250, tokenIndex250
			return false
		},
		nil,
		/* 71 Action0 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 72 Action1 <- <{ p.Query.ResourceKinds = p.currentList }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 73 Action2 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 74 Action3 <- <{ p.Query.Name = p.currentList }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 75 Action4 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 76 Action5 <- <{ p.Query.Regex = p.currentList }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 77 Action6 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 78 Action7 <- <{ p.Query.Health = p.currentList }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 79 Action8 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 80 Action9 <- <{ p.Query.Status = p.currentList }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 81 Action10 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 82 Action11 <- <{ p.Query.State = p.currentList }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 83 Action12 <- <{ p.currentConditions = make([]Condition, 0) }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 84 Action13 <- <{ p.Query.MetricConditions = p.currentConditions }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 85 Action14 <- <{ p.currentConditions = make([]Condition, 0) }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 86 Action15 <- <{ p.Query.PropertyConditions = p.currentConditions }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 87 Action16 <- <{ p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive("")) }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 88 Action17 <- <{ p.currentConjunctive = strings.ToUpper(text) }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 89 Action18 <- <{ p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(p.currentConjunctive)) }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 90 Action19 <- <{ p.currentCondition.Operator = text}> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 91 Action20 <- <{ p.currentCondition.Key = text }> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 92 Action21 <- <{ p.currentCondition.Operator = text}> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 93 Action22 <- <{ p.currentCondition.Key = text}> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 94 Action23 <- <{ p.currentCondition.Key = text }> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 95 Action24 <- <{ p.currentCondition.Operator = text }> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 96 Action25 <- <{ p.currentCondition.StringValue = &text }> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 97 Action26 <- <{
		   tmp := p.currentFloat
		   p.currentCondition.DoubleValue = &tmp
		 }> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 98 Action27 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 99 Action28 <- <{ p.Query.Metrics = p.currentList }> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 100 Action29 <- <{ p.Query.Aggregation.Type = text }> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 101 Action30 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 102 Action31 <- <{ p.Query.Aggregation.Properties = p.currentList }> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 103 Action32 <- <{ p.Query.Aggregation.Type = text }> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 104 Action33 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 105 Action34 <- <{ p.Query.Aggregation.Parameter = p.currentFloat }> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 106 Action35 <- <{ p.Query.Aggregation.Properties = p.currentList }> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 107 Action36 <- <{ p.currentList = append(p.currentList, text)}> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 108 Action37 <- <{ p.currentList = append(p.currentList, text)}> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 109 Action38 <- <{ p.currentList = append(p.currentList, p.currentText )}> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 110 Action39 <- <{ p.currentList = append(p.currentList, p.currentText) }> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
		/* 111 Action40 <- <{ p.currentText = text }> */
		func() bool {
			{
				add(ruleAction40, position)
			}
			return true
		},
		/* 112 Action41 <- <{ p.currentFloat, _ = strconv.ParseFloat(text, 64) }> */
		func() bool {
			{
				add(ruleAction41, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
