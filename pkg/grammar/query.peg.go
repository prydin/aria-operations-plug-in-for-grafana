package grammar

// Code generated by peg pkg/grammar/query.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleTypeSpec
	ruleFilter
	ruleAggregation
	ruleConditions
	ruleTerm
	ruleConjunctive
	ruleFunction
	ruleUnaryFunction
	ruleUnaryFunctionName
	ruleBinaryFunctionName
	ruleOperator
	ruleBinaryFunction
	ruleInfixExpression
	ruleLiteralConditionValue
	ruleMetrics
	ruleIdentifier
	ruleIdentifierList
	ruleLiteralStringList
	ruleIDStartCharacter
	ruleIDCharacter
	ruleIDQuotedCharacter
	ruleLiteralString
	ruleMETRICS
	ruleNAME
	ruleREGEX
	ruleRESOURCE
	ruleWHERE_HEALTH
	ruleWHERE_STATE
	ruleWHERE_STATUS
	ruleWHERE_METRICS
	ruleWHERE_PROPERTIES
	ruleAND
	ruleOR
	ruleIN
	ruleNOT_IN
	ruleCONTAINS
	ruleSTARTS_WITH
	ruleENDS_WITH
	ruleNOT_STARTS_WITH
	ruleNOT_ENDS_WITH
	ruleNOT_CONTAINS
	ruleNOT_REGEX
	ruleEXISTS
	ruleNOT_EXISTS
	ruleGT
	ruleLT
	ruleGTE
	ruleLTE
	ruleEQ
	ruleNE
	ruleAVG
	ruleMIN
	ruleMAX
	ruleSTDDEV
	ruleVARIANCE
	ruleMEDIAN
	rulePERCENTILE
	ruleQuote
	ruleComma
	ruleBackTick
	ruleDot
	ruleLP
	ruleRP
	rule_
	ruleLiteralChar
	ruleFloat
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"TypeSpec",
	"Filter",
	"Aggregation",
	"Conditions",
	"Term",
	"Conjunctive",
	"Function",
	"UnaryFunction",
	"UnaryFunctionName",
	"BinaryFunctionName",
	"Operator",
	"BinaryFunction",
	"InfixExpression",
	"LiteralConditionValue",
	"Metrics",
	"Identifier",
	"IdentifierList",
	"LiteralStringList",
	"IDStartCharacter",
	"IDCharacter",
	"IDQuotedCharacter",
	"LiteralString",
	"METRICS",
	"NAME",
	"REGEX",
	"RESOURCE",
	"WHERE_HEALTH",
	"WHERE_STATE",
	"WHERE_STATUS",
	"WHERE_METRICS",
	"WHERE_PROPERTIES",
	"AND",
	"OR",
	"IN",
	"NOT_IN",
	"CONTAINS",
	"STARTS_WITH",
	"ENDS_WITH",
	"NOT_STARTS_WITH",
	"NOT_ENDS_WITH",
	"NOT_CONTAINS",
	"NOT_REGEX",
	"EXISTS",
	"NOT_EXISTS",
	"GT",
	"LT",
	"GTE",
	"LTE",
	"EQ",
	"NE",
	"AVG",
	"MIN",
	"MAX",
	"STDDEV",
	"VARIANCE",
	"MEDIAN",
	"PERCENTILE",
	"Quote",
	"Comma",
	"BackTick",
	"Dot",
	"LP",
	"RP",
	"_",
	"LiteralChar",
	"Float",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type QueryParser struct {
	Query RawQuery

	currentText        string
	currentList        []string
	currentCondition   Condition
	currentConditions  []Condition
	currentConjunctive string
	currentFloat       float64

	Buffer string
	buffer []rune
	rules  [109]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *QueryParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *QueryParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *QueryParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *QueryParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *QueryParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *QueryParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *QueryParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.currentList = make([]string, 0)
		case ruleAction1:
			p.Query.ResourceKinds = p.currentList
		case ruleAction2:
			p.currentList = make([]string, 0)
		case ruleAction3:
			p.Query.Name = p.currentList
		case ruleAction4:
			p.currentList = make([]string, 0)
		case ruleAction5:
			p.Query.Regex = p.currentList
		case ruleAction6:
			p.currentList = make([]string, 0)
		case ruleAction7:
			p.Query.Health = p.currentList
		case ruleAction8:
			p.currentList = make([]string, 0)
		case ruleAction9:
			p.Query.Status = p.currentList
		case ruleAction10:
			p.currentList = make([]string, 0)
		case ruleAction11:
			p.Query.State = p.currentList
		case ruleAction12:
			p.currentConditions = make([]Condition, 0)
		case ruleAction13:
			p.Query.MetricConditions = p.currentConditions
		case ruleAction14:
			p.currentConditions = make([]Condition, 0)
		case ruleAction15:
			p.Query.PropertyConditions = p.currentConditions
		case ruleAction16:
			p.Query.Aggregation.Type = text
		case ruleAction17:
			p.Query.Aggregation.Field = text
		case ruleAction18:
			p.Query.Aggregation.Type = text
		case ruleAction19:
			p.Query.Aggregation.Field = text
		case ruleAction20:
			p.Query.Aggregation.Value = p.currentFloat
		case ruleAction21:
			p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(""))
		case ruleAction22:
			p.currentConjunctive = strings.ToUpper(text)
		case ruleAction23:
			p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(p.currentConjunctive))
		case ruleAction24:
			p.currentCondition.Operator = text
		case ruleAction25:
			p.currentCondition.Key = text
		case ruleAction26:
			p.currentCondition.Operator = text
		case ruleAction27:
			p.currentCondition.Key = text
		case ruleAction28:
			p.currentCondition.Key = text
		case ruleAction29:
			p.currentCondition.Operator = text
		case ruleAction30:
			p.currentCondition.StringValue = &text
		case ruleAction31:

			tmp := p.currentFloat
			p.currentCondition.DoubleValue = &tmp

		case ruleAction32:
			p.currentList = make([]string, 0)
		case ruleAction33:
			p.Query.Metrics = p.currentList
		case ruleAction34:
			p.currentList = append(p.currentList, text)
		case ruleAction35:
			p.currentList = append(p.currentList, text)
		case ruleAction36:
			p.currentList = append(p.currentList, p.currentText)
		case ruleAction37:
			p.currentList = append(p.currentList, p.currentText)
		case ruleAction38:
			p.currentText = text
		case ruleAction39:
			p.currentFloat, _ = strconv.ParseFloat(text, 64)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*QueryParser) error {
	return func(p *QueryParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *QueryParser) Init(options ...func(*QueryParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(TypeSpec (Dot Filter)+ Dot Metrics (Dot Aggregation)? !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleTypeSpec]() {
					goto l0
				}
				if !_rules[ruleDot]() {
					goto l0
				}
				if !_rules[ruleFilter]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleDot]() {
						goto l3
					}
					if !_rules[ruleFilter]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if !_rules[ruleDot]() {
					goto l0
				}
				if !_rules[ruleMetrics]() {
					goto l0
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !_rules[ruleDot]() {
						goto l4
					}
					if !_rules[ruleAggregation]() {
						goto l4
					}
					goto l5
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
			l5:
				{
					position6, tokenIndex6 := position, tokenIndex
					if !matchDot() {
						goto l6
					}
					goto l0
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 TypeSpec <- <(<RESOURCE> Action0 LP IdentifierList RP Action1)> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				{
					position9 := position
					if !_rules[ruleRESOURCE]() {
						goto l7
					}
					add(rulePegText, position9)
				}
				if !_rules[ruleAction0]() {
					goto l7
				}
				if !_rules[ruleLP]() {
					goto l7
				}
				if !_rules[ruleIdentifierList]() {
					goto l7
				}
				if !_rules[ruleRP]() {
					goto l7
				}
				if !_rules[ruleAction1]() {
					goto l7
				}
				add(ruleTypeSpec, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 2 Filter <- <((NAME Action2 LP LiteralStringList RP Action3) / (REGEX Action4 LP LiteralStringList RP Action5) / (WHERE_HEALTH Action6 LP IdentifierList RP Action7) / (WHERE_STATUS Action8 LP IdentifierList RP Action9) / (WHERE_STATE Action10 LP IdentifierList RP Action11) / (WHERE_METRICS Action12 LP Conditions RP Action13) / (WHERE_PROPERTIES Action14 LP Conditions RP Action15))> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				{
					position12, tokenIndex12 := position, tokenIndex
					if !_rules[ruleNAME]() {
						goto l13
					}
					if !_rules[ruleAction2]() {
						goto l13
					}
					if !_rules[ruleLP]() {
						goto l13
					}
					if !_rules[ruleLiteralStringList]() {
						goto l13
					}
					if !_rules[ruleRP]() {
						goto l13
					}
					if !_rules[ruleAction3]() {
						goto l13
					}
					goto l12
				l13:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleREGEX]() {
						goto l14
					}
					if !_rules[ruleAction4]() {
						goto l14
					}
					if !_rules[ruleLP]() {
						goto l14
					}
					if !_rules[ruleLiteralStringList]() {
						goto l14
					}
					if !_rules[ruleRP]() {
						goto l14
					}
					if !_rules[ruleAction5]() {
						goto l14
					}
					goto l12
				l14:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_HEALTH]() {
						goto l15
					}
					if !_rules[ruleAction6]() {
						goto l15
					}
					if !_rules[ruleLP]() {
						goto l15
					}
					if !_rules[ruleIdentifierList]() {
						goto l15
					}
					if !_rules[ruleRP]() {
						goto l15
					}
					if !_rules[ruleAction7]() {
						goto l15
					}
					goto l12
				l15:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_STATUS]() {
						goto l16
					}
					if !_rules[ruleAction8]() {
						goto l16
					}
					if !_rules[ruleLP]() {
						goto l16
					}
					if !_rules[ruleIdentifierList]() {
						goto l16
					}
					if !_rules[ruleRP]() {
						goto l16
					}
					if !_rules[ruleAction9]() {
						goto l16
					}
					goto l12
				l16:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_STATE]() {
						goto l17
					}
					if !_rules[ruleAction10]() {
						goto l17
					}
					if !_rules[ruleLP]() {
						goto l17
					}
					if !_rules[ruleIdentifierList]() {
						goto l17
					}
					if !_rules[ruleRP]() {
						goto l17
					}
					if !_rules[ruleAction11]() {
						goto l17
					}
					goto l12
				l17:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_METRICS]() {
						goto l18
					}
					if !_rules[ruleAction12]() {
						goto l18
					}
					if !_rules[ruleLP]() {
						goto l18
					}
					if !_rules[ruleConditions]() {
						goto l18
					}
					if !_rules[ruleRP]() {
						goto l18
					}
					if !_rules[ruleAction13]() {
						goto l18
					}
					goto l12
				l18:
					position, tokenIndex = position12, tokenIndex12
					if !_rules[ruleWHERE_PROPERTIES]() {
						goto l10
					}
					if !_rules[ruleAction14]() {
						goto l10
					}
					if !_rules[ruleLP]() {
						goto l10
					}
					if !_rules[ruleConditions]() {
						goto l10
					}
					if !_rules[ruleRP]() {
						goto l10
					}
					if !_rules[ruleAction15]() {
						goto l10
					}
				}
			l12:
				add(ruleFilter, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 3 Aggregation <- <((<(AVG / MIN / MAX / STDDEV / VARIANCE / MEDIAN)> Action16 LP <Identifier> Action17 RP) / (PERCENTILE Action18 LP <Identifier> Action19 Comma Float Action20 RP))> */
		func() bool {
			position19, tokenIndex19 := position, tokenIndex
			{
				position20 := position
				{
					position21, tokenIndex21 := position, tokenIndex
					{
						position23 := position
						{
							position24, tokenIndex24 := position, tokenIndex
							if !_rules[ruleAVG]() {
								goto l25
							}
							goto l24
						l25:
							position, tokenIndex = position24, tokenIndex24
							if !_rules[ruleMIN]() {
								goto l26
							}
							goto l24
						l26:
							position, tokenIndex = position24, tokenIndex24
							if !_rules[ruleMAX]() {
								goto l27
							}
							goto l24
						l27:
							position, tokenIndex = position24, tokenIndex24
							if !_rules[ruleSTDDEV]() {
								goto l28
							}
							goto l24
						l28:
							position, tokenIndex = position24, tokenIndex24
							if !_rules[ruleVARIANCE]() {
								goto l29
							}
							goto l24
						l29:
							position, tokenIndex = position24, tokenIndex24
							if !_rules[ruleMEDIAN]() {
								goto l22
							}
						}
					l24:
						add(rulePegText, position23)
					}
					if !_rules[ruleAction16]() {
						goto l22
					}
					if !_rules[ruleLP]() {
						goto l22
					}
					{
						position30 := position
						if !_rules[ruleIdentifier]() {
							goto l22
						}
						add(rulePegText, position30)
					}
					if !_rules[ruleAction17]() {
						goto l22
					}
					if !_rules[ruleRP]() {
						goto l22
					}
					goto l21
				l22:
					position, tokenIndex = position21, tokenIndex21
					if !_rules[rulePERCENTILE]() {
						goto l19
					}
					if !_rules[ruleAction18]() {
						goto l19
					}
					if !_rules[ruleLP]() {
						goto l19
					}
					{
						position31 := position
						if !_rules[ruleIdentifier]() {
							goto l19
						}
						add(rulePegText, position31)
					}
					if !_rules[ruleAction19]() {
						goto l19
					}
					if !_rules[ruleComma]() {
						goto l19
					}
					if !_rules[ruleFloat]() {
						goto l19
					}
					if !_rules[ruleAction20]() {
						goto l19
					}
					if !_rules[ruleRP]() {
						goto l19
					}
				}
			l21:
				add(ruleAggregation, position20)
			}
			return true
		l19:
			position, tokenIndex = position19, tokenIndex19
			return false
		},
		/* 4 Conditions <- <(Term Action21 (_ <Conjunctive> _ Action22 Term Action23)*)> */
		func() bool {
			position32, tokenIndex32 := position, tokenIndex
			{
				position33 := position
				if !_rules[ruleTerm]() {
					goto l32
				}
				if !_rules[ruleAction21]() {
					goto l32
				}
			l34:
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					{
						position36 := position
						if !_rules[ruleConjunctive]() {
							goto l35
						}
						add(rulePegText, position36)
					}
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleAction22]() {
						goto l35
					}
					if !_rules[ruleTerm]() {
						goto l35
					}
					if !_rules[ruleAction23]() {
						goto l35
					}
					goto l34
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
				add(ruleConditions, position33)
			}
			return true
		l32:
			position, tokenIndex = position32, tokenIndex32
			return false
		},
		/* 5 Term <- <(Function / InfixExpression)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleFunction]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleInfixExpression]() {
						goto l37
					}
				}
			l39:
				add(ruleTerm, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 6 Conjunctive <- <(AND / OR)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[ruleAND]() {
						goto l44
					}
					goto l43
				l44:
					position, tokenIndex = position43, tokenIndex43
					if !_rules[ruleOR]() {
						goto l41
					}
				}
			l43:
				add(ruleConjunctive, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 7 Function <- <(UnaryFunction / BinaryFunction)> */
		func() bool {
			position45, tokenIndex45 := position, tokenIndex
			{
				position46 := position
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[ruleUnaryFunction]() {
						goto l48
					}
					goto l47
				l48:
					position, tokenIndex = position47, tokenIndex47
					if !_rules[ruleBinaryFunction]() {
						goto l45
					}
				}
			l47:
				add(ruleFunction, position46)
			}
			return true
		l45:
			position, tokenIndex = position45, tokenIndex45
			return false
		},
		/* 8 UnaryFunction <- <(<UnaryFunctionName> Action24 LP <Identifier> Action25 RP)> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				{
					position51 := position
					if !_rules[ruleUnaryFunctionName]() {
						goto l49
					}
					add(rulePegText, position51)
				}
				if !_rules[ruleAction24]() {
					goto l49
				}
				if !_rules[ruleLP]() {
					goto l49
				}
				{
					position52 := position
					if !_rules[ruleIdentifier]() {
						goto l49
					}
					add(rulePegText, position52)
				}
				if !_rules[ruleAction25]() {
					goto l49
				}
				if !_rules[ruleRP]() {
					goto l49
				}
				add(ruleUnaryFunction, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 9 UnaryFunctionName <- <(EXISTS / NOT_EXISTS)> */
		func() bool {
			position53, tokenIndex53 := position, tokenIndex
			{
				position54 := position
				{
					position55, tokenIndex55 := position, tokenIndex
					if !_rules[ruleEXISTS]() {
						goto l56
					}
					goto l55
				l56:
					position, tokenIndex = position55, tokenIndex55
					if !_rules[ruleNOT_EXISTS]() {
						goto l53
					}
				}
			l55:
				add(ruleUnaryFunctionName, position54)
			}
			return true
		l53:
			position, tokenIndex = position53, tokenIndex53
			return false
		},
		/* 10 BinaryFunctionName <- <(CONTAINS / STARTS_WITH / ENDS_WITH / REGEX / NOT_CONTAINS / NOT_STARTS_WITH / NOT_ENDS_WITH / NOT_REGEX / IN / NOT_IN)> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleCONTAINS]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleSTARTS_WITH]() {
						goto l61
					}
					goto l59
				l61:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleENDS_WITH]() {
						goto l62
					}
					goto l59
				l62:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleREGEX]() {
						goto l63
					}
					goto l59
				l63:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNOT_CONTAINS]() {
						goto l64
					}
					goto l59
				l64:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNOT_STARTS_WITH]() {
						goto l65
					}
					goto l59
				l65:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNOT_ENDS_WITH]() {
						goto l66
					}
					goto l59
				l66:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNOT_REGEX]() {
						goto l67
					}
					goto l59
				l67:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleIN]() {
						goto l68
					}
					goto l59
				l68:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNOT_IN]() {
						goto l57
					}
				}
			l59:
				add(ruleBinaryFunctionName, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 11 Operator <- <(EQ / NE / LTE / LT / GTE / GT)> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				{
					position71, tokenIndex71 := position, tokenIndex
					if !_rules[ruleEQ]() {
						goto l72
					}
					goto l71
				l72:
					position, tokenIndex = position71, tokenIndex71
					if !_rules[ruleNE]() {
						goto l73
					}
					goto l71
				l73:
					position, tokenIndex = position71, tokenIndex71
					if !_rules[ruleLTE]() {
						goto l74
					}
					goto l71
				l74:
					position, tokenIndex = position71, tokenIndex71
					if !_rules[ruleLT]() {
						goto l75
					}
					goto l71
				l75:
					position, tokenIndex = position71, tokenIndex71
					if !_rules[ruleGTE]() {
						goto l76
					}
					goto l71
				l76:
					position, tokenIndex = position71, tokenIndex71
					if !_rules[ruleGT]() {
						goto l69
					}
				}
			l71:
				add(ruleOperator, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 12 BinaryFunction <- <(<BinaryFunctionName> Action26 LP <Identifier> Action27 Comma LiteralConditionValue RP)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				{
					position79 := position
					if !_rules[ruleBinaryFunctionName]() {
						goto l77
					}
					add(rulePegText, position79)
				}
				if !_rules[ruleAction26]() {
					goto l77
				}
				if !_rules[ruleLP]() {
					goto l77
				}
				{
					position80 := position
					if !_rules[ruleIdentifier]() {
						goto l77
					}
					add(rulePegText, position80)
				}
				if !_rules[ruleAction27]() {
					goto l77
				}
				if !_rules[ruleComma]() {
					goto l77
				}
				if !_rules[ruleLiteralConditionValue]() {
					goto l77
				}
				if !_rules[ruleRP]() {
					goto l77
				}
				add(ruleBinaryFunction, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 13 InfixExpression <- <(<Identifier> Action28 _ <Operator> Action29 _ LiteralConditionValue)> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				{
					position83 := position
					if !_rules[ruleIdentifier]() {
						goto l81
					}
					add(rulePegText, position83)
				}
				if !_rules[ruleAction28]() {
					goto l81
				}
				if !_rules[rule_]() {
					goto l81
				}
				{
					position84 := position
					if !_rules[ruleOperator]() {
						goto l81
					}
					add(rulePegText, position84)
				}
				if !_rules[ruleAction29]() {
					goto l81
				}
				if !_rules[rule_]() {
					goto l81
				}
				if !_rules[ruleLiteralConditionValue]() {
					goto l81
				}
				add(ruleInfixExpression, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 14 LiteralConditionValue <- <((<LiteralString> Action30) / (Float Action31))> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					{
						position89 := position
						if !_rules[ruleLiteralString]() {
							goto l88
						}
						add(rulePegText, position89)
					}
					if !_rules[ruleAction30]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if !_rules[ruleFloat]() {
						goto l85
					}
					if !_rules[ruleAction31]() {
						goto l85
					}
				}
			l87:
				add(ruleLiteralConditionValue, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 15 Metrics <- <(METRICS Action32 LP IdentifierList RP Action33)> */
		func() bool {
			position90, tokenIndex90 := position, tokenIndex
			{
				position91 := position
				if !_rules[ruleMETRICS]() {
					goto l90
				}
				if !_rules[ruleAction32]() {
					goto l90
				}
				if !_rules[ruleLP]() {
					goto l90
				}
				if !_rules[ruleIdentifierList]() {
					goto l90
				}
				if !_rules[ruleRP]() {
					goto l90
				}
				if !_rules[ruleAction33]() {
					goto l90
				}
				add(ruleMetrics, position91)
			}
			return true
		l90:
			position, tokenIndex = position90, tokenIndex90
			return false
		},
		/* 16 Identifier <- <((IDStartCharacter IDCharacter*) / (BackTick <IDQuotedCharacter+> BackTick))> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				{
					position94, tokenIndex94 := position, tokenIndex
					if !_rules[ruleIDStartCharacter]() {
						goto l95
					}
				l96:
					{
						position97, tokenIndex97 := position, tokenIndex
						if !_rules[ruleIDCharacter]() {
							goto l97
						}
						goto l96
					l97:
						position, tokenIndex = position97, tokenIndex97
					}
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					if !_rules[ruleBackTick]() {
						goto l92
					}
					{
						position98 := position
						if !_rules[ruleIDQuotedCharacter]() {
							goto l92
						}
					l99:
						{
							position100, tokenIndex100 := position, tokenIndex
							if !_rules[ruleIDQuotedCharacter]() {
								goto l100
							}
							goto l99
						l100:
							position, tokenIndex = position100, tokenIndex100
						}
						add(rulePegText, position98)
					}
					if !_rules[ruleBackTick]() {
						goto l92
					}
				}
			l94:
				add(ruleIdentifier, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 17 IdentifierList <- <(<Identifier> Action34 (Comma <Identifier> Action35)*)> */
		func() bool {
			position101, tokenIndex101 := position, tokenIndex
			{
				position102 := position
				{
					position103 := position
					if !_rules[ruleIdentifier]() {
						goto l101
					}
					add(rulePegText, position103)
				}
				if !_rules[ruleAction34]() {
					goto l101
				}
			l104:
				{
					position105, tokenIndex105 := position, tokenIndex
					if !_rules[ruleComma]() {
						goto l105
					}
					{
						position106 := position
						if !_rules[ruleIdentifier]() {
							goto l105
						}
						add(rulePegText, position106)
					}
					if !_rules[ruleAction35]() {
						goto l105
					}
					goto l104
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
				add(ruleIdentifierList, position102)
			}
			return true
		l101:
			position, tokenIndex = position101, tokenIndex101
			return false
		},
		/* 18 LiteralStringList <- <(<LiteralString> Action36 (Comma <LiteralString> Action37)*)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				{
					position109 := position
					if !_rules[ruleLiteralString]() {
						goto l107
					}
					add(rulePegText, position109)
				}
				if !_rules[ruleAction36]() {
					goto l107
				}
			l110:
				{
					position111, tokenIndex111 := position, tokenIndex
					if !_rules[ruleComma]() {
						goto l111
					}
					{
						position112 := position
						if !_rules[ruleLiteralString]() {
							goto l111
						}
						add(rulePegText, position112)
					}
					if !_rules[ruleAction37]() {
						goto l111
					}
					goto l110
				l111:
					position, tokenIndex = position111, tokenIndex111
				}
				add(ruleLiteralStringList, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 19 IDStartCharacter <- <([A-Z] / [a-z] / '_')> */
		func() bool {
			position113, tokenIndex113 := position, tokenIndex
			{
				position114 := position
				{
					position115, tokenIndex115 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l116
					}
					position++
					goto l115
				l116:
					position, tokenIndex = position115, tokenIndex115
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l117
					}
					position++
					goto l115
				l117:
					position, tokenIndex = position115, tokenIndex115
					if buffer[position] != rune('_') {
						goto l113
					}
					position++
				}
			l115:
				add(ruleIDStartCharacter, position114)
			}
			return true
		l113:
			position, tokenIndex = position113, tokenIndex113
			return false
		},
		/* 20 IDCharacter <- <([A-Z] / [a-z] / [0-9] / '_' / ':' / '|' / '.' / '-')> */
		func() bool {
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				{
					position120, tokenIndex120 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l121
					}
					position++
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l122
					}
					position++
					goto l120
				l122:
					position, tokenIndex = position120, tokenIndex120
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l123
					}
					position++
					goto l120
				l123:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('_') {
						goto l124
					}
					position++
					goto l120
				l124:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune(':') {
						goto l125
					}
					position++
					goto l120
				l125:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('|') {
						goto l126
					}
					position++
					goto l120
				l126:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('.') {
						goto l127
					}
					position++
					goto l120
				l127:
					position, tokenIndex = position120, tokenIndex120
					if buffer[position] != rune('-') {
						goto l118
					}
					position++
				}
			l120:
				add(ruleIDCharacter, position119)
			}
			return true
		l118:
			position, tokenIndex = position118, tokenIndex118
			return false
		},
		/* 21 IDQuotedCharacter <- <([A-Z] / [a-z] / [0-9] / '_' / ':' / '|' / '.' / '-' / ' ' / ',' / '$')> */
		func() bool {
			position128, tokenIndex128 := position, tokenIndex
			{
				position129 := position
				{
					position130, tokenIndex130 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l131
					}
					position++
					goto l130
				l131:
					position, tokenIndex = position130, tokenIndex130
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l132
					}
					position++
					goto l130
				l132:
					position, tokenIndex = position130, tokenIndex130
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l133
					}
					position++
					goto l130
				l133:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune('_') {
						goto l134
					}
					position++
					goto l130
				l134:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune(':') {
						goto l135
					}
					position++
					goto l130
				l135:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune('|') {
						goto l136
					}
					position++
					goto l130
				l136:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune('.') {
						goto l137
					}
					position++
					goto l130
				l137:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune('-') {
						goto l138
					}
					position++
					goto l130
				l138:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune(' ') {
						goto l139
					}
					position++
					goto l130
				l139:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune(',') {
						goto l140
					}
					position++
					goto l130
				l140:
					position, tokenIndex = position130, tokenIndex130
					if buffer[position] != rune('$') {
						goto l128
					}
					position++
				}
			l130:
				add(ruleIDQuotedCharacter, position129)
			}
			return true
		l128:
			position, tokenIndex = position128, tokenIndex128
			return false
		},
		/* 22 LiteralString <- <(Quote <LiteralChar*> Action38 Quote)> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if !_rules[ruleQuote]() {
					goto l141
				}
				{
					position143 := position
				l144:
					{
						position145, tokenIndex145 := position, tokenIndex
						if !_rules[ruleLiteralChar]() {
							goto l145
						}
						goto l144
					l145:
						position, tokenIndex = position145, tokenIndex145
					}
					add(rulePegText, position143)
				}
				if !_rules[ruleAction38]() {
					goto l141
				}
				if !_rules[ruleQuote]() {
					goto l141
				}
				add(ruleLiteralString, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 23 METRICS <- <('m' 'e' 't' 'r' 'i' 'c' 's')> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				if buffer[position] != rune('m') {
					goto l146
				}
				position++
				if buffer[position] != rune('e') {
					goto l146
				}
				position++
				if buffer[position] != rune('t') {
					goto l146
				}
				position++
				if buffer[position] != rune('r') {
					goto l146
				}
				position++
				if buffer[position] != rune('i') {
					goto l146
				}
				position++
				if buffer[position] != rune('c') {
					goto l146
				}
				position++
				if buffer[position] != rune('s') {
					goto l146
				}
				position++
				add(ruleMETRICS, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 24 NAME <- <('n' 'a' 'm' 'e')> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				if buffer[position] != rune('n') {
					goto l148
				}
				position++
				if buffer[position] != rune('a') {
					goto l148
				}
				position++
				if buffer[position] != rune('m') {
					goto l148
				}
				position++
				if buffer[position] != rune('e') {
					goto l148
				}
				position++
				add(ruleNAME, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 25 REGEX <- <('r' 'e' 'g' 'e' 'x')> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				if buffer[position] != rune('r') {
					goto l150
				}
				position++
				if buffer[position] != rune('e') {
					goto l150
				}
				position++
				if buffer[position] != rune('g') {
					goto l150
				}
				position++
				if buffer[position] != rune('e') {
					goto l150
				}
				position++
				if buffer[position] != rune('x') {
					goto l150
				}
				position++
				add(ruleREGEX, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 26 RESOURCE <- <('r' 'e' 's' 'o' 'u' 'r' 'c' 'e')> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if buffer[position] != rune('r') {
					goto l152
				}
				position++
				if buffer[position] != rune('e') {
					goto l152
				}
				position++
				if buffer[position] != rune('s') {
					goto l152
				}
				position++
				if buffer[position] != rune('o') {
					goto l152
				}
				position++
				if buffer[position] != rune('u') {
					goto l152
				}
				position++
				if buffer[position] != rune('r') {
					goto l152
				}
				position++
				if buffer[position] != rune('c') {
					goto l152
				}
				position++
				if buffer[position] != rune('e') {
					goto l152
				}
				position++
				add(ruleRESOURCE, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 27 WHERE_HEALTH <- <('w' 'h' 'e' 'r' 'e' 'H' 'e' 'a' 'l' 't' 'h')> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if buffer[position] != rune('w') {
					goto l154
				}
				position++
				if buffer[position] != rune('h') {
					goto l154
				}
				position++
				if buffer[position] != rune('e') {
					goto l154
				}
				position++
				if buffer[position] != rune('r') {
					goto l154
				}
				position++
				if buffer[position] != rune('e') {
					goto l154
				}
				position++
				if buffer[position] != rune('H') {
					goto l154
				}
				position++
				if buffer[position] != rune('e') {
					goto l154
				}
				position++
				if buffer[position] != rune('a') {
					goto l154
				}
				position++
				if buffer[position] != rune('l') {
					goto l154
				}
				position++
				if buffer[position] != rune('t') {
					goto l154
				}
				position++
				if buffer[position] != rune('h') {
					goto l154
				}
				position++
				add(ruleWHERE_HEALTH, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 28 WHERE_STATE <- <('w' 'h' 'e' 'r' 'e' 'S' 't' 'a' 't' 'e')> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if buffer[position] != rune('w') {
					goto l156
				}
				position++
				if buffer[position] != rune('h') {
					goto l156
				}
				position++
				if buffer[position] != rune('e') {
					goto l156
				}
				position++
				if buffer[position] != rune('r') {
					goto l156
				}
				position++
				if buffer[position] != rune('e') {
					goto l156
				}
				position++
				if buffer[position] != rune('S') {
					goto l156
				}
				position++
				if buffer[position] != rune('t') {
					goto l156
				}
				position++
				if buffer[position] != rune('a') {
					goto l156
				}
				position++
				if buffer[position] != rune('t') {
					goto l156
				}
				position++
				if buffer[position] != rune('e') {
					goto l156
				}
				position++
				add(ruleWHERE_STATE, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 29 WHERE_STATUS <- <('w' 'h' 'e' 'r' 'e' 'S' 't' 'a' 't' 'u' 's')> */
		func() bool {
			position158, tokenIndex158 := position, tokenIndex
			{
				position159 := position
				if buffer[position] != rune('w') {
					goto l158
				}
				position++
				if buffer[position] != rune('h') {
					goto l158
				}
				position++
				if buffer[position] != rune('e') {
					goto l158
				}
				position++
				if buffer[position] != rune('r') {
					goto l158
				}
				position++
				if buffer[position] != rune('e') {
					goto l158
				}
				position++
				if buffer[position] != rune('S') {
					goto l158
				}
				position++
				if buffer[position] != rune('t') {
					goto l158
				}
				position++
				if buffer[position] != rune('a') {
					goto l158
				}
				position++
				if buffer[position] != rune('t') {
					goto l158
				}
				position++
				if buffer[position] != rune('u') {
					goto l158
				}
				position++
				if buffer[position] != rune('s') {
					goto l158
				}
				position++
				add(ruleWHERE_STATUS, position159)
			}
			return true
		l158:
			position, tokenIndex = position158, tokenIndex158
			return false
		},
		/* 30 WHERE_METRICS <- <('w' 'h' 'e' 'r' 'e' 'M' 'e' 't' 'r' 'i' 'c' 's')> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if buffer[position] != rune('w') {
					goto l160
				}
				position++
				if buffer[position] != rune('h') {
					goto l160
				}
				position++
				if buffer[position] != rune('e') {
					goto l160
				}
				position++
				if buffer[position] != rune('r') {
					goto l160
				}
				position++
				if buffer[position] != rune('e') {
					goto l160
				}
				position++
				if buffer[position] != rune('M') {
					goto l160
				}
				position++
				if buffer[position] != rune('e') {
					goto l160
				}
				position++
				if buffer[position] != rune('t') {
					goto l160
				}
				position++
				if buffer[position] != rune('r') {
					goto l160
				}
				position++
				if buffer[position] != rune('i') {
					goto l160
				}
				position++
				if buffer[position] != rune('c') {
					goto l160
				}
				position++
				if buffer[position] != rune('s') {
					goto l160
				}
				position++
				add(ruleWHERE_METRICS, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 31 WHERE_PROPERTIES <- <('w' 'h' 'e' 'r' 'e' 'P' 'r' 'o' 'p' 'e' 'r' 't' 'i' 'e' 's')> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				if buffer[position] != rune('w') {
					goto l162
				}
				position++
				if buffer[position] != rune('h') {
					goto l162
				}
				position++
				if buffer[position] != rune('e') {
					goto l162
				}
				position++
				if buffer[position] != rune('r') {
					goto l162
				}
				position++
				if buffer[position] != rune('e') {
					goto l162
				}
				position++
				if buffer[position] != rune('P') {
					goto l162
				}
				position++
				if buffer[position] != rune('r') {
					goto l162
				}
				position++
				if buffer[position] != rune('o') {
					goto l162
				}
				position++
				if buffer[position] != rune('p') {
					goto l162
				}
				position++
				if buffer[position] != rune('e') {
					goto l162
				}
				position++
				if buffer[position] != rune('r') {
					goto l162
				}
				position++
				if buffer[position] != rune('t') {
					goto l162
				}
				position++
				if buffer[position] != rune('i') {
					goto l162
				}
				position++
				if buffer[position] != rune('e') {
					goto l162
				}
				position++
				if buffer[position] != rune('s') {
					goto l162
				}
				position++
				add(ruleWHERE_PROPERTIES, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 32 AND <- <('a' 'n' 'd')> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				if buffer[position] != rune('a') {
					goto l164
				}
				position++
				if buffer[position] != rune('n') {
					goto l164
				}
				position++
				if buffer[position] != rune('d') {
					goto l164
				}
				position++
				add(ruleAND, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 33 OR <- <('o' 'r')> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				if buffer[position] != rune('o') {
					goto l166
				}
				position++
				if buffer[position] != rune('r') {
					goto l166
				}
				position++
				add(ruleOR, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 34 IN <- <('i' 'n')> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				if buffer[position] != rune('i') {
					goto l168
				}
				position++
				if buffer[position] != rune('n') {
					goto l168
				}
				position++
				add(ruleIN, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 35 NOT_IN <- <('n' 'o' 't' ' ' 'i' 'n')> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune('n') {
					goto l170
				}
				position++
				if buffer[position] != rune('o') {
					goto l170
				}
				position++
				if buffer[position] != rune('t') {
					goto l170
				}
				position++
				if buffer[position] != rune(' ') {
					goto l170
				}
				position++
				if buffer[position] != rune('i') {
					goto l170
				}
				position++
				if buffer[position] != rune('n') {
					goto l170
				}
				position++
				add(ruleNOT_IN, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 36 CONTAINS <- <('c' 'o' 'n' 't' 'a' 'i' 'n' 's')> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				if buffer[position] != rune('c') {
					goto l172
				}
				position++
				if buffer[position] != rune('o') {
					goto l172
				}
				position++
				if buffer[position] != rune('n') {
					goto l172
				}
				position++
				if buffer[position] != rune('t') {
					goto l172
				}
				position++
				if buffer[position] != rune('a') {
					goto l172
				}
				position++
				if buffer[position] != rune('i') {
					goto l172
				}
				position++
				if buffer[position] != rune('n') {
					goto l172
				}
				position++
				if buffer[position] != rune('s') {
					goto l172
				}
				position++
				add(ruleCONTAINS, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 37 STARTS_WITH <- <('s' 't' 'a' 'r' 't' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune('s') {
					goto l174
				}
				position++
				if buffer[position] != rune('t') {
					goto l174
				}
				position++
				if buffer[position] != rune('a') {
					goto l174
				}
				position++
				if buffer[position] != rune('r') {
					goto l174
				}
				position++
				if buffer[position] != rune('t') {
					goto l174
				}
				position++
				if buffer[position] != rune('s') {
					goto l174
				}
				position++
				if buffer[position] != rune('_') {
					goto l174
				}
				position++
				if buffer[position] != rune('w') {
					goto l174
				}
				position++
				if buffer[position] != rune('i') {
					goto l174
				}
				position++
				if buffer[position] != rune('t') {
					goto l174
				}
				position++
				if buffer[position] != rune('h') {
					goto l174
				}
				position++
				add(ruleSTARTS_WITH, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 38 ENDS_WITH <- <('e' 'n' 'd' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if buffer[position] != rune('e') {
					goto l176
				}
				position++
				if buffer[position] != rune('n') {
					goto l176
				}
				position++
				if buffer[position] != rune('d') {
					goto l176
				}
				position++
				if buffer[position] != rune('s') {
					goto l176
				}
				position++
				if buffer[position] != rune('_') {
					goto l176
				}
				position++
				if buffer[position] != rune('w') {
					goto l176
				}
				position++
				if buffer[position] != rune('i') {
					goto l176
				}
				position++
				if buffer[position] != rune('t') {
					goto l176
				}
				position++
				if buffer[position] != rune('h') {
					goto l176
				}
				position++
				add(ruleENDS_WITH, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 39 NOT_STARTS_WITH <- <('n' 'o' 't' ' ' 's' 't' 'a' 'r' 't' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				if buffer[position] != rune('n') {
					goto l178
				}
				position++
				if buffer[position] != rune('o') {
					goto l178
				}
				position++
				if buffer[position] != rune('t') {
					goto l178
				}
				position++
				if buffer[position] != rune(' ') {
					goto l178
				}
				position++
				if buffer[position] != rune('s') {
					goto l178
				}
				position++
				if buffer[position] != rune('t') {
					goto l178
				}
				position++
				if buffer[position] != rune('a') {
					goto l178
				}
				position++
				if buffer[position] != rune('r') {
					goto l178
				}
				position++
				if buffer[position] != rune('t') {
					goto l178
				}
				position++
				if buffer[position] != rune('s') {
					goto l178
				}
				position++
				if buffer[position] != rune('_') {
					goto l178
				}
				position++
				if buffer[position] != rune('w') {
					goto l178
				}
				position++
				if buffer[position] != rune('i') {
					goto l178
				}
				position++
				if buffer[position] != rune('t') {
					goto l178
				}
				position++
				if buffer[position] != rune('h') {
					goto l178
				}
				position++
				add(ruleNOT_STARTS_WITH, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 40 NOT_ENDS_WITH <- <('n' 'o' 't' ' ' 'e' 'n' 'd' 's' '_' 'w' 'i' 't' 'h')> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if buffer[position] != rune('n') {
					goto l180
				}
				position++
				if buffer[position] != rune('o') {
					goto l180
				}
				position++
				if buffer[position] != rune('t') {
					goto l180
				}
				position++
				if buffer[position] != rune(' ') {
					goto l180
				}
				position++
				if buffer[position] != rune('e') {
					goto l180
				}
				position++
				if buffer[position] != rune('n') {
					goto l180
				}
				position++
				if buffer[position] != rune('d') {
					goto l180
				}
				position++
				if buffer[position] != rune('s') {
					goto l180
				}
				position++
				if buffer[position] != rune('_') {
					goto l180
				}
				position++
				if buffer[position] != rune('w') {
					goto l180
				}
				position++
				if buffer[position] != rune('i') {
					goto l180
				}
				position++
				if buffer[position] != rune('t') {
					goto l180
				}
				position++
				if buffer[position] != rune('h') {
					goto l180
				}
				position++
				add(ruleNOT_ENDS_WITH, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 41 NOT_CONTAINS <- <('n' 'o' 't' ' ' 'c' 'o' 'n' 't' 'a' 'i' 'n' 's')> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				if buffer[position] != rune('n') {
					goto l182
				}
				position++
				if buffer[position] != rune('o') {
					goto l182
				}
				position++
				if buffer[position] != rune('t') {
					goto l182
				}
				position++
				if buffer[position] != rune(' ') {
					goto l182
				}
				position++
				if buffer[position] != rune('c') {
					goto l182
				}
				position++
				if buffer[position] != rune('o') {
					goto l182
				}
				position++
				if buffer[position] != rune('n') {
					goto l182
				}
				position++
				if buffer[position] != rune('t') {
					goto l182
				}
				position++
				if buffer[position] != rune('a') {
					goto l182
				}
				position++
				if buffer[position] != rune('i') {
					goto l182
				}
				position++
				if buffer[position] != rune('n') {
					goto l182
				}
				position++
				if buffer[position] != rune('s') {
					goto l182
				}
				position++
				add(ruleNOT_CONTAINS, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 42 NOT_REGEX <- <('n' 'o' 't' ' ' 'r' 'e' 'g' 'e' 'x')> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if buffer[position] != rune('n') {
					goto l184
				}
				position++
				if buffer[position] != rune('o') {
					goto l184
				}
				position++
				if buffer[position] != rune('t') {
					goto l184
				}
				position++
				if buffer[position] != rune(' ') {
					goto l184
				}
				position++
				if buffer[position] != rune('r') {
					goto l184
				}
				position++
				if buffer[position] != rune('e') {
					goto l184
				}
				position++
				if buffer[position] != rune('g') {
					goto l184
				}
				position++
				if buffer[position] != rune('e') {
					goto l184
				}
				position++
				if buffer[position] != rune('x') {
					goto l184
				}
				position++
				add(ruleNOT_REGEX, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 43 EXISTS <- <('e' 'x' 'i' 's' 't' 's')> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune('e') {
					goto l186
				}
				position++
				if buffer[position] != rune('x') {
					goto l186
				}
				position++
				if buffer[position] != rune('i') {
					goto l186
				}
				position++
				if buffer[position] != rune('s') {
					goto l186
				}
				position++
				if buffer[position] != rune('t') {
					goto l186
				}
				position++
				if buffer[position] != rune('s') {
					goto l186
				}
				position++
				add(ruleEXISTS, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 44 NOT_EXISTS <- <('n' 'o' 't' ' ' 'e' 'x' 'i' 's' 't' 's')> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				if buffer[position] != rune('n') {
					goto l188
				}
				position++
				if buffer[position] != rune('o') {
					goto l188
				}
				position++
				if buffer[position] != rune('t') {
					goto l188
				}
				position++
				if buffer[position] != rune(' ') {
					goto l188
				}
				position++
				if buffer[position] != rune('e') {
					goto l188
				}
				position++
				if buffer[position] != rune('x') {
					goto l188
				}
				position++
				if buffer[position] != rune('i') {
					goto l188
				}
				position++
				if buffer[position] != rune('s') {
					goto l188
				}
				position++
				if buffer[position] != rune('t') {
					goto l188
				}
				position++
				if buffer[position] != rune('s') {
					goto l188
				}
				position++
				add(ruleNOT_EXISTS, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 45 GT <- <'>'> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('>') {
					goto l190
				}
				position++
				add(ruleGT, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 46 LT <- <'<'> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if buffer[position] != rune('<') {
					goto l192
				}
				position++
				add(ruleLT, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 47 GTE <- <('>' '=')> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				if buffer[position] != rune('>') {
					goto l194
				}
				position++
				if buffer[position] != rune('=') {
					goto l194
				}
				position++
				add(ruleGTE, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 48 LTE <- <('<' '=')> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				if buffer[position] != rune('<') {
					goto l196
				}
				position++
				if buffer[position] != rune('=') {
					goto l196
				}
				position++
				add(ruleLTE, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 49 EQ <- <'='> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				if buffer[position] != rune('=') {
					goto l198
				}
				position++
				add(ruleEQ, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 50 NE <- <('!' '=')> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				if buffer[position] != rune('!') {
					goto l200
				}
				position++
				if buffer[position] != rune('=') {
					goto l200
				}
				position++
				add(ruleNE, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 51 AVG <- <('a' 'v' 'g')> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				if buffer[position] != rune('a') {
					goto l202
				}
				position++
				if buffer[position] != rune('v') {
					goto l202
				}
				position++
				if buffer[position] != rune('g') {
					goto l202
				}
				position++
				add(ruleAVG, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 52 MIN <- <('m' 'i' 'n')> */
		func() bool {
			position204, tokenIndex204 := position, tokenIndex
			{
				position205 := position
				if buffer[position] != rune('m') {
					goto l204
				}
				position++
				if buffer[position] != rune('i') {
					goto l204
				}
				position++
				if buffer[position] != rune('n') {
					goto l204
				}
				position++
				add(ruleMIN, position205)
			}
			return true
		l204:
			position, tokenIndex = position204, tokenIndex204
			return false
		},
		/* 53 MAX <- <('m' 'a' 'x')> */
		func() bool {
			position206, tokenIndex206 := position, tokenIndex
			{
				position207 := position
				if buffer[position] != rune('m') {
					goto l206
				}
				position++
				if buffer[position] != rune('a') {
					goto l206
				}
				position++
				if buffer[position] != rune('x') {
					goto l206
				}
				position++
				add(ruleMAX, position207)
			}
			return true
		l206:
			position, tokenIndex = position206, tokenIndex206
			return false
		},
		/* 54 STDDEV <- <('s' 't' 'd' 'd' 'e' 'v')> */
		func() bool {
			position208, tokenIndex208 := position, tokenIndex
			{
				position209 := position
				if buffer[position] != rune('s') {
					goto l208
				}
				position++
				if buffer[position] != rune('t') {
					goto l208
				}
				position++
				if buffer[position] != rune('d') {
					goto l208
				}
				position++
				if buffer[position] != rune('d') {
					goto l208
				}
				position++
				if buffer[position] != rune('e') {
					goto l208
				}
				position++
				if buffer[position] != rune('v') {
					goto l208
				}
				position++
				add(ruleSTDDEV, position209)
			}
			return true
		l208:
			position, tokenIndex = position208, tokenIndex208
			return false
		},
		/* 55 VARIANCE <- <('v' 'a' 'r' 'i' 'a' 'n' 'c' 'e')> */
		func() bool {
			position210, tokenIndex210 := position, tokenIndex
			{
				position211 := position
				if buffer[position] != rune('v') {
					goto l210
				}
				position++
				if buffer[position] != rune('a') {
					goto l210
				}
				position++
				if buffer[position] != rune('r') {
					goto l210
				}
				position++
				if buffer[position] != rune('i') {
					goto l210
				}
				position++
				if buffer[position] != rune('a') {
					goto l210
				}
				position++
				if buffer[position] != rune('n') {
					goto l210
				}
				position++
				if buffer[position] != rune('c') {
					goto l210
				}
				position++
				if buffer[position] != rune('e') {
					goto l210
				}
				position++
				add(ruleVARIANCE, position211)
			}
			return true
		l210:
			position, tokenIndex = position210, tokenIndex210
			return false
		},
		/* 56 MEDIAN <- <('m' 'e' 'd' 'i' 'a' 'n')> */
		func() bool {
			position212, tokenIndex212 := position, tokenIndex
			{
				position213 := position
				if buffer[position] != rune('m') {
					goto l212
				}
				position++
				if buffer[position] != rune('e') {
					goto l212
				}
				position++
				if buffer[position] != rune('d') {
					goto l212
				}
				position++
				if buffer[position] != rune('i') {
					goto l212
				}
				position++
				if buffer[position] != rune('a') {
					goto l212
				}
				position++
				if buffer[position] != rune('n') {
					goto l212
				}
				position++
				add(ruleMEDIAN, position213)
			}
			return true
		l212:
			position, tokenIndex = position212, tokenIndex212
			return false
		},
		/* 57 PERCENTILE <- <('p' 'e' 'r' 'c' 'e' 'n' 't' 'i' 'l' 'e')> */
		func() bool {
			position214, tokenIndex214 := position, tokenIndex
			{
				position215 := position
				if buffer[position] != rune('p') {
					goto l214
				}
				position++
				if buffer[position] != rune('e') {
					goto l214
				}
				position++
				if buffer[position] != rune('r') {
					goto l214
				}
				position++
				if buffer[position] != rune('c') {
					goto l214
				}
				position++
				if buffer[position] != rune('e') {
					goto l214
				}
				position++
				if buffer[position] != rune('n') {
					goto l214
				}
				position++
				if buffer[position] != rune('t') {
					goto l214
				}
				position++
				if buffer[position] != rune('i') {
					goto l214
				}
				position++
				if buffer[position] != rune('l') {
					goto l214
				}
				position++
				if buffer[position] != rune('e') {
					goto l214
				}
				position++
				add(rulePERCENTILE, position215)
			}
			return true
		l214:
			position, tokenIndex = position214, tokenIndex214
			return false
		},
		/* 58 Quote <- <'"'> */
		func() bool {
			position216, tokenIndex216 := position, tokenIndex
			{
				position217 := position
				if buffer[position] != rune('"') {
					goto l216
				}
				position++
				add(ruleQuote, position217)
			}
			return true
		l216:
			position, tokenIndex = position216, tokenIndex216
			return false
		},
		/* 59 Comma <- <(_ ',' _)> */
		func() bool {
			position218, tokenIndex218 := position, tokenIndex
			{
				position219 := position
				if !_rules[rule_]() {
					goto l218
				}
				if buffer[position] != rune(',') {
					goto l218
				}
				position++
				if !_rules[rule_]() {
					goto l218
				}
				add(ruleComma, position219)
			}
			return true
		l218:
			position, tokenIndex = position218, tokenIndex218
			return false
		},
		/* 60 BackTick <- <'`'> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				if buffer[position] != rune('`') {
					goto l220
				}
				position++
				add(ruleBackTick, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
		/* 61 Dot <- <(_ '.' _)> */
		func() bool {
			position222, tokenIndex222 := position, tokenIndex
			{
				position223 := position
				if !_rules[rule_]() {
					goto l222
				}
				if buffer[position] != rune('.') {
					goto l222
				}
				position++
				if !_rules[rule_]() {
					goto l222
				}
				add(ruleDot, position223)
			}
			return true
		l222:
			position, tokenIndex = position222, tokenIndex222
			return false
		},
		/* 62 LP <- <(_ '(' _)> */
		func() bool {
			position224, tokenIndex224 := position, tokenIndex
			{
				position225 := position
				if !_rules[rule_]() {
					goto l224
				}
				if buffer[position] != rune('(') {
					goto l224
				}
				position++
				if !_rules[rule_]() {
					goto l224
				}
				add(ruleLP, position225)
			}
			return true
		l224:
			position, tokenIndex = position224, tokenIndex224
			return false
		},
		/* 63 RP <- <(_ ')' _)> */
		func() bool {
			position226, tokenIndex226 := position, tokenIndex
			{
				position227 := position
				if !_rules[rule_]() {
					goto l226
				}
				if buffer[position] != rune(')') {
					goto l226
				}
				position++
				if !_rules[rule_]() {
					goto l226
				}
				add(ruleRP, position227)
			}
			return true
		l226:
			position, tokenIndex = position226, tokenIndex226
			return false
		},
		/* 64 _ <- <(' ' / '\t' / '\n' / '\r')*> */
		func() bool {
			{
				position229 := position
			l230:
				{
					position231, tokenIndex231 := position, tokenIndex
					{
						position232, tokenIndex232 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l233
						}
						position++
						goto l232
					l233:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('\t') {
							goto l234
						}
						position++
						goto l232
					l234:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('\n') {
							goto l235
						}
						position++
						goto l232
					l235:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('\r') {
							goto l231
						}
						position++
					}
				l232:
					goto l230
				l231:
					position, tokenIndex = position231, tokenIndex231
				}
				add(rule_, position229)
			}
			return true
		},
		/* 65 LiteralChar <- <(!('"' / '^' / '\n') .)> */
		func() bool {
			position236, tokenIndex236 := position, tokenIndex
			{
				position237 := position
				{
					position238, tokenIndex238 := position, tokenIndex
					{
						position239, tokenIndex239 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l240
						}
						position++
						goto l239
					l240:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('^') {
							goto l241
						}
						position++
						goto l239
					l241:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('\n') {
							goto l238
						}
						position++
					}
				l239:
					goto l236
				l238:
					position, tokenIndex = position238, tokenIndex238
				}
				if !matchDot() {
					goto l236
				}
				add(ruleLiteralChar, position237)
			}
			return true
		l236:
			position, tokenIndex = position236, tokenIndex236
			return false
		},
		/* 66 Float <- <(<('-'? [0-9]+ ('.' [0-9]+)? (('E' / 'e') ('+' / '-')? [0-9]+)?)> Action39)> */
		func() bool {
			position242, tokenIndex242 := position, tokenIndex
			{
				position243 := position
				{
					position244 := position
					{
						position245, tokenIndex245 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l245
						}
						position++
						goto l246
					l245:
						position, tokenIndex = position245, tokenIndex245
					}
				l246:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l242
					}
					position++
				l247:
					{
						position248, tokenIndex248 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position248, tokenIndex248
					}
					{
						position249, tokenIndex249 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l249
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l249
						}
						position++
					l251:
						{
							position252, tokenIndex252 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l252
							}
							position++
							goto l251
						l252:
							position, tokenIndex = position252, tokenIndex252
						}
						goto l250
					l249:
						position, tokenIndex = position249, tokenIndex249
					}
				l250:
					{
						position253, tokenIndex253 := position, tokenIndex
						{
							position255, tokenIndex255 := position, tokenIndex
							if buffer[position] != rune('E') {
								goto l256
							}
							position++
							goto l255
						l256:
							position, tokenIndex = position255, tokenIndex255
							if buffer[position] != rune('e') {
								goto l253
							}
							position++
						}
					l255:
						{
							position257, tokenIndex257 := position, tokenIndex
							{
								position259, tokenIndex259 := position, tokenIndex
								if buffer[position] != rune('+') {
									goto l260
								}
								position++
								goto l259
							l260:
								position, tokenIndex = position259, tokenIndex259
								if buffer[position] != rune('-') {
									goto l257
								}
								position++
							}
						l259:
							goto l258
						l257:
							position, tokenIndex = position257, tokenIndex257
						}
					l258:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l253
						}
						position++
					l261:
						{
							position262, tokenIndex262 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l262
							}
							position++
							goto l261
						l262:
							position, tokenIndex = position262, tokenIndex262
						}
						goto l254
					l253:
						position, tokenIndex = position253, tokenIndex253
					}
				l254:
					add(rulePegText, position244)
				}
				if !_rules[ruleAction39]() {
					goto l242
				}
				add(ruleFloat, position243)
			}
			return true
		l242:
			position, tokenIndex = position242, tokenIndex242
			return false
		},
		nil,
		/* 69 Action0 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 70 Action1 <- <{ p.Query.ResourceKinds = p.currentList }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 71 Action2 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 72 Action3 <- <{ p.Query.Name = p.currentList }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 73 Action4 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 74 Action5 <- <{ p.Query.Regex = p.currentList }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 75 Action6 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 76 Action7 <- <{ p.Query.Health = p.currentList }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 77 Action8 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 78 Action9 <- <{ p.Query.Status = p.currentList }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 79 Action10 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 80 Action11 <- <{ p.Query.State = p.currentList }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 81 Action12 <- <{ p.currentConditions = make([]Condition, 0) }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 82 Action13 <- <{ p.Query.MetricConditions = p.currentConditions }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 83 Action14 <- <{ p.currentConditions = make([]Condition, 0) }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 84 Action15 <- <{ p.Query.PropertyConditions = p.currentConditions }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 85 Action16 <- <{ p.Query.Aggregation.Type = text }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 86 Action17 <- <{ p.Query.Aggregation.Field = text }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 87 Action18 <- <{ p.Query.Aggregation.Type = text }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 88 Action19 <- <{ p.Query.Aggregation.Field = text }> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 89 Action20 <- <{ p.Query.Aggregation.Value = p.currentFloat }> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 90 Action21 <- <{ p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive("")) }> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 91 Action22 <- <{ p.currentConjunctive = strings.ToUpper(text) }> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 92 Action23 <- <{ p.currentConditions = append(p.currentConditions, *p.currentCondition.WithConjunctive(p.currentConjunctive)) }> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 93 Action24 <- <{ p.currentCondition.Operator = text}> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 94 Action25 <- <{ p.currentCondition.Key = text }> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 95 Action26 <- <{ p.currentCondition.Operator = text}> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 96 Action27 <- <{ p.currentCondition.Key = text}> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 97 Action28 <- <{ p.currentCondition.Key = text }> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 98 Action29 <- <{ p.currentCondition.Operator = text }> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 99 Action30 <- <{ p.currentCondition.StringValue = &text }> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 100 Action31 <- <{
		   tmp := p.currentFloat
		   p.currentCondition.DoubleValue = &tmp
		 }> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 101 Action32 <- <{ p.currentList = make([]string, 0) }> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 102 Action33 <- <{ p.Query.Metrics = p.currentList }> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 103 Action34 <- <{ p.currentList = append(p.currentList, text)}> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 104 Action35 <- <{ p.currentList = append(p.currentList, text)}> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 105 Action36 <- <{ p.currentList = append(p.currentList, p.currentText )}> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 106 Action37 <- <{ p.currentList = append(p.currentList, p.currentText) }> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 107 Action38 <- <{ p.currentText = text }> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 108 Action39 <- <{ p.currentFloat, _ = strconv.ParseFloat(text, 64) }> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
