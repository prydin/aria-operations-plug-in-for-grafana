// Generated by Peggy 2.0.1.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var loc = this.location.source + ":" + s.line + ":" + s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Query: peg$parseQuery };
  var peg$startRuleFunction = peg$parseQuery;

  var peg$c0 = "resource";
  var peg$c1 = "all";
  var peg$c2 = "id";
  var peg$c3 = "name";
  var peg$c4 = "regex";
  var peg$c5 = "whereProperties";
  var peg$c6 = "whereMetrics";
  var peg$c7 = "and";
  var peg$c8 = "or";
  var peg$c9 = "avg";
  var peg$c10 = "min";
  var peg$c11 = "max";
  var peg$c12 = "sum";
  var peg$c13 = "count";
  var peg$c14 = "variance";
  var peg$c15 = "stddev";
  var peg$c16 = "percentile";
  var peg$c17 = "mavg";
  var peg$c18 = "mstddev";
  var peg$c19 = "mvariance";
  var peg$c20 = "mmedian";
  var peg$c21 = "mmax";
  var peg$c22 = "mmin";
  var peg$c23 = "msum";
  var peg$c24 = "s";
  var peg$c25 = "m";
  var peg$c26 = "h";
  var peg$c27 = "d";
  var peg$c28 = "w";
  var peg$c29 = "y";
  var peg$c30 = "=";
  var peg$c31 = "!=";
  var peg$c32 = "<";
  var peg$c33 = ">";
  var peg$c34 = "<=";
  var peg$c35 = ">=";
  var peg$c36 = "not exists";
  var peg$c37 = "exists";
  var peg$c38 = "like";
  var peg$c39 = "contains";
  var peg$c40 = "starts_with";
  var peg$c41 = "ends_with";
  var peg$c42 = "not starts_with";
  var peg$c43 = "not ends_with";
  var peg$c44 = "not contains";
  var peg$c45 = "not regex";
  var peg$c46 = "whereState";
  var peg$c47 = "whereStatus";
  var peg$c48 = "whereHealth";
  var peg$c49 = "whereTags";
  var peg$c50 = "metrics";
  var peg$c51 = "\\";
  var peg$c52 = ".";
  var peg$c53 = ",";
  var peg$c54 = "(";
  var peg$c55 = ")";
  var peg$c56 = "number";
  var peg$c57 = "\"";
  var peg$c58 = "/";
  var peg$c59 = "b";
  var peg$c60 = "f";
  var peg$c61 = "n";
  var peg$c62 = "r";
  var peg$c63 = "t";
  var peg$c64 = "u";

  var peg$r0 = /^[A-Za-z0-9_:|.\-]/;
  var peg$r1 = /^[ \t\n\r]/;
  var peg$r2 = /^[^\0-\x1F"\\]/;
  var peg$r3 = /^[0-9]/;
  var peg$r4 = /^[0-9a-f]/i;

  var peg$e0 = peg$literalExpectation("resource", false);
  var peg$e1 = peg$literalExpectation("all", false);
  var peg$e2 = peg$literalExpectation("id", false);
  var peg$e3 = peg$literalExpectation("name", false);
  var peg$e4 = peg$literalExpectation("regex", false);
  var peg$e5 = peg$literalExpectation("whereProperties", false);
  var peg$e6 = peg$literalExpectation("whereMetrics", false);
  var peg$e7 = peg$literalExpectation("and", false);
  var peg$e8 = peg$literalExpectation("or", false);
  var peg$e9 = peg$literalExpectation("avg", false);
  var peg$e10 = peg$literalExpectation("min", false);
  var peg$e11 = peg$literalExpectation("max", false);
  var peg$e12 = peg$literalExpectation("sum", false);
  var peg$e13 = peg$literalExpectation("count", false);
  var peg$e14 = peg$literalExpectation("variance", false);
  var peg$e15 = peg$literalExpectation("stddev", false);
  var peg$e16 = peg$literalExpectation("percentile", false);
  var peg$e17 = peg$literalExpectation("mavg", false);
  var peg$e18 = peg$literalExpectation("mstddev", false);
  var peg$e19 = peg$literalExpectation("mvariance", false);
  var peg$e20 = peg$literalExpectation("mmedian", false);
  var peg$e21 = peg$literalExpectation("mmax", false);
  var peg$e22 = peg$literalExpectation("mmin", false);
  var peg$e23 = peg$literalExpectation("msum", false);
  var peg$e24 = peg$literalExpectation("s", false);
  var peg$e25 = peg$literalExpectation("m", false);
  var peg$e26 = peg$literalExpectation("h", false);
  var peg$e27 = peg$literalExpectation("d", false);
  var peg$e28 = peg$literalExpectation("w", false);
  var peg$e29 = peg$literalExpectation("y", false);
  var peg$e30 = peg$literalExpectation("=", false);
  var peg$e31 = peg$literalExpectation("!=", false);
  var peg$e32 = peg$literalExpectation("<", false);
  var peg$e33 = peg$literalExpectation(">", false);
  var peg$e34 = peg$literalExpectation("<=", false);
  var peg$e35 = peg$literalExpectation(">=", false);
  var peg$e36 = peg$literalExpectation("not exists", false);
  var peg$e37 = peg$literalExpectation("exists", false);
  var peg$e38 = peg$literalExpectation("like", false);
  var peg$e39 = peg$literalExpectation("contains", false);
  var peg$e40 = peg$literalExpectation("starts_with", false);
  var peg$e41 = peg$literalExpectation("ends_with", false);
  var peg$e42 = peg$literalExpectation("not starts_with", false);
  var peg$e43 = peg$literalExpectation("not ends_with", false);
  var peg$e44 = peg$literalExpectation("not contains", false);
  var peg$e45 = peg$literalExpectation("not regex", false);
  var peg$e46 = peg$literalExpectation("whereState", false);
  var peg$e47 = peg$literalExpectation("whereStatus", false);
  var peg$e48 = peg$literalExpectation("whereHealth", false);
  var peg$e49 = peg$literalExpectation("whereTags", false);
  var peg$e50 = peg$literalExpectation("metrics", false);
  var peg$e51 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_", ":", "|", ".", "-"], false, false);
  var peg$e52 = peg$literalExpectation("\\", false);
  var peg$e53 = peg$literalExpectation(".", false);
  var peg$e54 = peg$literalExpectation(",", false);
  var peg$e55 = peg$literalExpectation("(", false);
  var peg$e56 = peg$literalExpectation(")", false);
  var peg$e57 = peg$literalExpectation("number", false);
  var peg$e58 = peg$otherExpectation("integer");
  var peg$e59 = peg$otherExpectation("number");
  var peg$e60 = peg$otherExpectation("whitespace");
  var peg$e61 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$e62 = peg$otherExpectation("string");
  var peg$e63 = peg$literalExpectation("\"", false);
  var peg$e64 = peg$literalExpectation("/", false);
  var peg$e65 = peg$literalExpectation("b", false);
  var peg$e66 = peg$literalExpectation("f", false);
  var peg$e67 = peg$literalExpectation("n", false);
  var peg$e68 = peg$literalExpectation("r", false);
  var peg$e69 = peg$literalExpectation("t", false);
  var peg$e70 = peg$literalExpectation("u", false);
  var peg$e71 = peg$classExpectation([["\0", "\x1F"], "\"", "\\"], true, false);
  var peg$e72 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e73 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true);

  var peg$f0 = function(type, instances, metrics, aggregation, slidingWindow) { return { type, instances, metrics, slidingWindow, aggregation }};
  var peg$f1 = function(resourceType) { return resourceType };
  var peg$f2 = function(instanceSelector) { return instanceSelector };
  var peg$f3 = function(first, theRest) { return [ first, ...theRest ]};
  var peg$f4 = function(data) { return data };
  var peg$f5 = function(type) { return { type, arg: [] } };
  var peg$f6 = function(type, arg) { return { type, arg } };
  var peg$f7 = function(type, arg) { return { type, arg } };
  var peg$f8 = function(type, arg) { return { type, arg } };
  var peg$f9 = function(type, arg) { return { type, arg } };
  var peg$f10 = function(first, theRest) { return [ first, ...theRest ] };
  var peg$f11 = function(conjunctive, term) { return { ...term, conjunctive } };
  var peg$f12 = function(name, arg) { return { name: name.toUpperCase(), arg: [ arg ] } };
  var peg$f13 = function(name, arg0, arg1) { return { name: name.toUpperCase(), arg: [ arg0, arg1 ] } };
  var peg$f14 = function(left, operator, right) { return { name: operator, arg: [ left, right ] }};
  var peg$f15 = function(type, properties) { return { type, properties } };
  var peg$f16 = function(type, parameter, identifiers) {return identifiers};
  var peg$f17 = function(type, parameter, properties) { return { type, parameter, properties } };
  var peg$f18 = function(type, duration) { return { type, duration }};
  var peg$f19 = function(timequantity, timeunit) { return timequantity * timeunit };
  var peg$f20 = function() { return 1};
  var peg$f21 = function() { return 60 };
  var peg$f22 = function() { return 60 * 60 };
  var peg$f23 = function() { return 24 * 60 * 60 };
  var peg$f24 = function() { return 7 * 24 * 60 * 60 };
  var peg$f25 = function() { return 365 * 24 * 60 * 60};
  var peg$f26 = function() { return "EQ" };
  var peg$f27 = function() { return "NE" };
  var peg$f28 = function() { return "LT" };
  var peg$f29 = function() { return "GT" };
  var peg$f30 = function() { return "LT_EQ" };
  var peg$f31 = function() { return "GT_EQ" };
  var peg$f32 = function() { return text().replace(" ", "_").toUpperCase()};
  var peg$f33 = function() { return text().replace(" ", "_").toUpperCase()};
  var peg$f34 = function(type, arg) { return { type, arg }};
  var peg$f35 = function(type, arg) { return { type, arg }};
  var peg$f36 = function(type, arg) { return { type, arg }};
  var peg$f37 = function(type, arg) { return { type, arg }};
  var peg$f38 = function(metrics) { return metrics };
  var peg$f39 = function() { return text() };
  var peg$f40 = function(identifier) { return identifier };
  var peg$f41 = function(first, theRest) { return [ first, ...theRest ] };
  var peg$f42 = function(data) { return data };
  var peg$f43 = function(first, theRest) { return [ first, ...theRest ] };
  var peg$f44 = function(data) { return data };
  var peg$f45 = function(first, theRest) { return [ first, ...theRest ]};
  var peg$f46 = function(data) { return data };
  var peg$f47 = function(chars) { return chars.join("") };
  var peg$f48 = function() { return parseInt(text(), 10); };
  var peg$f49 = function() { return parseFloat(text()) };
  var peg$f50 = function(chars) { return chars.join(""); };
  var peg$f51 = function() { return "\b"; };
  var peg$f52 = function() { return "\f"; };
  var peg$f53 = function() { return "\n"; };
  var peg$f54 = function() { return "\r"; };
  var peg$f55 = function() { return "\t"; };
  var peg$f56 = function(digits) {
          return String.fromCharCode(parseInt(digits, 16));
        };
  var peg$f57 = function(sequence) { return sequence; };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseQuery() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseTypeSpec();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDot();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseInstanceSelectors();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseMetricSelector();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseAggregation();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s8 = peg$parseSlidingWindow();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f0(s2, s4, s6, s7, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeSpec() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifierList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRP();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f1(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInstanceSelectors() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseInstanceFilterChain();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f2(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseInstanceFilterChain() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseInstanceFilter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseInstanceFilterNode();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseInstanceFilterNode();
      }
      peg$savedPos = s0;
      s0 = peg$f3(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInstanceFilterNode() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseInstanceFilter();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f4(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInstanceFilter() {
    var s0;

    s0 = peg$parseAll();
    if (s0 === peg$FAILED) {
      s0 = peg$parseInstanceId();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInstanceName();
        if (s0 === peg$FAILED) {
          s0 = peg$parseInstanceRegex();
          if (s0 === peg$FAILED) {
            s0 = peg$parseHealthFilter();
            if (s0 === peg$FAILED) {
              s0 = peg$parseStateFilter();
              if (s0 === peg$FAILED) {
                s0 = peg$parseStatusFilter();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseTagFilter();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseComplexInstanceFilter();
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAll() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRP();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f5(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInstanceId() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLiteralStringList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRP();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f6(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInstanceName() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLiteralStringList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRP();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f7(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInstanceRegex() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c4) {
      s1 = peg$c4;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRegexpList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRP();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f8(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComplexInstanceFilter() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 12) === peg$c6) {
        s1 = peg$c6;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFilterConditions();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRP();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f9(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFilterConditions() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseTerm();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseTermNode();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseTermNode();
      }
      peg$savedPos = s0;
      s0 = peg$f10(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTermNode() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c7) {
      s2 = peg$c7;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c8) {
        s2 = peg$c8;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseTerm();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTerm() {
    var s0;

    s0 = peg$parseFunction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseInfixExpression();
    }

    return s0;
  }

  function peg$parseFunction() {
    var s0;

    s0 = peg$parseUnaryFunction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBinaryFunction();
    }

    return s0;
  }

  function peg$parseUnaryFunction() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseUnaryFunctionName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRP();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f12(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBinaryFunction() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseBinaryFunctionName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLiteralValue();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseRP();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f13(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInfixExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseOperator();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseLiteralValue();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralValue() {
    var s0;

    s0 = peg$parseLiteralString();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNumber();
    }

    return s0;
  }

  function peg$parseAggregation() {
    var s0;

    s0 = peg$parseTwoParamAggregation();
    if (s0 === peg$FAILED) {
      s0 = peg$parseOneParamAggregation();
    }

    return s0;
  }

  function peg$parseOneParamAggregation() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOneParamAggregationOp();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLP();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIdentifierList();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseRP();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOneParamAggregationOp() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c9) {
      s0 = peg$c9;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c10) {
        s0 = peg$c10;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c11) {
          s0 = peg$c11;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c12) {
            s0 = peg$c12;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c13) {
              s0 = peg$c13;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c14) {
                s0 = peg$c14;
                peg$currPos += 8;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c15) {
                  s0 = peg$c15;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseTwoParamAggregation() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseDot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTwoParamAggregationOp();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLP();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNumber();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseComma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIdentifierList();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f16(s2, s4, s7);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parseRP();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f17(s2, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTwoParamAggregationOp() {
    var s0;

    if (input.substr(peg$currPos, 10) === peg$c16) {
      s0 = peg$c16;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parseSlidingWindow() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSlidingWindowOp();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLP();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseTimeSpec();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRP();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f18(s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSlidingWindowOp() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c17) {
      s0 = peg$c17;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c18) {
        s0 = peg$c18;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c19) {
          s0 = peg$c19;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c20) {
            s0 = peg$c20;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c21) {
              s0 = peg$c21;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e21); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c22) {
                s0 = peg$c22;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c23) {
                  s0 = peg$c23;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e23); }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseTimeSpec() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTimeUnit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTimeUnit() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 115) {
      s1 = peg$c24;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f20();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 109) {
        s1 = peg$c25;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 104) {
          s1 = peg$c26;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f22();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 100) {
            s1 = peg$c27;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e27); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f23();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 119) {
              s1 = peg$c28;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e28); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f24();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 121) {
                s1 = peg$c29;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e29); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f25();
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseOperator() {
    var s0;

    s0 = peg$parseOpEQ();
    if (s0 === peg$FAILED) {
      s0 = peg$parseOpNE();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOpLT();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOpGT();
          if (s0 === peg$FAILED) {
            s0 = peg$parseOpLT_EQ();
            if (s0 === peg$FAILED) {
              s0 = peg$parseOpGT_EQ();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseOpEQ() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f26();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOpNE() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f27();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOpLT() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f28();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOpGT() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 62) {
      s1 = peg$c33;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f29();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOpLT_EQ() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c34) {
      s1 = peg$c34;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOpGT_EQ() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f31();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUnaryFunctionName() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c36) {
      s1 = peg$c36;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c37) {
        s1 = peg$c37;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f32();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBinaryFunctionName() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c39) {
        s1 = peg$c39;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c40) {
          s1 = peg$c40;
          peg$currPos += 11;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c41) {
            s1 = peg$c41;
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 15) === peg$c42) {
              s1 = peg$c42;
              peg$currPos += 15;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 13) === peg$c43) {
                s1 = peg$c43;
                peg$currPos += 13;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e43); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 12) === peg$c44) {
                  s1 = peg$c44;
                  peg$currPos += 12;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e44); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c4) {
                    s1 = peg$c4;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e4); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c45) {
                      s1 = peg$c45;
                      peg$currPos += 9;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e45); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f33();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStateFilter() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c46) {
      s1 = peg$c46;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifierList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRP();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f34(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatusFilter() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifierList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRP();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f35(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHealthFilter() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c48) {
      s1 = peg$c48;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifierList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRP();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f36(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTagFilter() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c49) {
      s1 = peg$c49;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifierList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRP();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f37(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMetricSelector() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseDot();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c50) {
        s2 = peg$c50;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLP();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIdentifierList();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = peg$parseRP();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f38(s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCharacters() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIdentifier() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseLiteralString();
    if (s1 === peg$FAILED) {
      s1 = peg$parseCharacters();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIdentifierList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseIdentifierNode();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseIdentifierNode();
      }
      peg$savedPos = s0;
      s0 = peg$f41(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifierNode() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseComma();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f42(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralStringList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseLiteralString();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseLiteralStringNode();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseLiteralStringNode();
      }
      peg$savedPos = s0;
      s0 = peg$f43(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralStringNode() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseComma();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLiteralString();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f44(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRegexpList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseRegexp();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseRegexpNode();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseRegexpNode();
      }
      peg$savedPos = s0;
      s0 = peg$f45(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRegexpNode() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseComma();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRegexp();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f46(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRegexp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseQuote();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseUnescaped();
      if (s3 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s3 = peg$c51;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseUnescaped();
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s3 = peg$c51;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e52); }
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseQuote();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f47(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDot() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c52;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComma() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c53;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLP() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c54;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRP() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 41) {
      s2 = peg$c55;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c56) {
      s1 = peg$c56;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseInteger();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseFloat();
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parseDIGIT();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDIGIT();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f48();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    return s0;
  }

  function peg$parseFloat() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parseDIGIT();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDIGIT();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s5 = peg$c52;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }
      if (s5 !== peg$FAILED) {
        s6 = [];
        s7 = peg$parseDIGIT();
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseDIGIT();
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s5 = peg$c52;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e53); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseDIGIT();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseDIGIT();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f49();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e60); }

    return s0;
  }

  function peg$parseLiteralString() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseQuote();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseChar();
      }
      s3 = peg$parseQuote();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f50(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

    return s0;
  }

  function peg$parseChar() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$parseUnescaped();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseEscape();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c57;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e63); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s2 = peg$c51;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e52); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s2 = peg$c58;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e64); }
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 98) {
                s3 = peg$c59;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e65); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$f51();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 102) {
                  s3 = peg$c60;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e66); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$f52();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 110) {
                    s3 = peg$c61;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e67); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$f53();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 114) {
                      s3 = peg$c62;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e68); }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$f54();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 116) {
                        s3 = peg$c63;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e69); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$f55();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 117) {
                          s3 = peg$c64;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e70); }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = peg$currPos;
                          s6 = peg$parseHEXDIG();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseHEXDIG();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parseHEXDIG();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseHEXDIG();
                                if (s9 !== peg$FAILED) {
                                  s6 = [s6, s7, s8, s9];
                                  s5 = s6;
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s4 = input.substring(s4, peg$currPos);
                          } else {
                            s4 = s5;
                          }
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s2 = peg$f56(s4);
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f57(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEscape() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c51;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseQuote() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c57;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

    return s0;
  }

  function peg$parseUnescaped() {
    var s0;

    if (peg$r2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }

    return s0;
  }

  function peg$parseDIGIT() {
    var s0;

    if (peg$r3.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }

    return s0;
  }

  function peg$parseHEXDIG() {
    var s0;

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
